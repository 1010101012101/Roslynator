// Copyright (c) Josef Pihrt. All rights reserved. Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

// <auto-generated>

using System;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace Roslynator.CSharp.SyntaxWalkers
{
    public abstract class CSharpSyntaxNodeWalker : CSharpSyntaxWalker
    {
        protected CSharpSyntaxNodeWalker(): base (depth: SyntaxWalkerDepth.Node)
        {
        }

        protected virtual bool ShouldVisit
        {
            get
            {
                return true;
            }
        }

        public override void VisitAccessorDeclaration(AccessorDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            if (!ShouldVisit)
            {
                return;
            }

            BlockSyntax body = node.Body;
            if (body != null)
            {
                VisitBlock(body);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax expression = node.ExpressionBody?.Expression;
            if (expression != null)
            {
                VisitExpression(expression);
            }
        }

        public override void VisitAccessorList(AccessorListSyntax node)
        {
            foreach (AccessorDeclarationSyntax accessorDeclaration in node.Accessors)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAccessorDeclaration(accessorDeclaration);
            }
        }

        public override void VisitAliasQualifiedName(AliasQualifiedNameSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            IdentifierNameSyntax alias = node.Alias;
            if (alias != null)
            {
                VisitIdentifierName(alias);
            }

            VisitType(node.Name);
        }

        public override void VisitAnonymousMethodExpression(AnonymousMethodExpressionSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            BlockSyntax block = node.Block;
            if (block != null)
            {
                VisitBlock(block);
            }

            ParameterListSyntax parameterList = node.ParameterList;
            if (parameterList != null)
            {
                foreach (ParameterSyntax parameter in parameterList.Parameters)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitParameter(parameter);
                }
            }

            CSharpSyntaxNode body = node.Body;
            if (body is ExpressionSyntax expression)
            {
                VisitExpression(expression);
            }
            else if (body is StatementSyntax statement)
            {
                VisitStatement(statement);
            }
            else
            {
                throw new InvalidOperationException();
            }
        }

        public override void VisitAnonymousObjectCreationExpression(AnonymousObjectCreationExpressionSyntax node)
        {
            foreach (AnonymousObjectMemberDeclaratorSyntax anonymousObjectMemberDeclarator in node.Initializers)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAnonymousObjectMemberDeclarator(anonymousObjectMemberDeclarator);
            }
        }

        public override void VisitAnonymousObjectMemberDeclarator(AnonymousObjectMemberDeclaratorSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            IdentifierNameSyntax name = node.NameEquals?.Name;
            if (name != null)
            {
                VisitIdentifierName(name);
            }

            VisitExpression(node.Expression);
        }

        public override void VisitArgument(ArgumentSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            IdentifierNameSyntax name = node.NameColon?.Name;
            if (name != null)
            {
                VisitIdentifierName(name);
            }

            VisitExpression(node.Expression);
        }

        public override void VisitArgumentList(ArgumentListSyntax node)
        {
            foreach (ArgumentSyntax argument in node.Arguments)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitArgument(argument);
            }
        }

        public override void VisitArrayCreationExpression(ArrayCreationExpressionSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ArrayTypeSyntax type = node.Type;
            if (type != null)
            {
                VisitArrayType(type);
            }

            if (!ShouldVisit)
            {
                return;
            }

            InitializerExpressionSyntax initializer = node.Initializer;
            if (initializer != null)
            {
                VisitInitializerExpression(initializer);
            }
        }

        public override void VisitArrayRankSpecifier(ArrayRankSpecifierSyntax node)
        {
            foreach (ExpressionSyntax expression in node.Sizes)
            {
                VisitExpression(expression);
            }
        }

        public override void VisitArrayType(ArrayTypeSyntax node)
        {
            VisitType(node.ElementType);
            foreach (ArrayRankSpecifierSyntax arrayRankSpecifier in node.RankSpecifiers)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitArrayRankSpecifier(arrayRankSpecifier);
            }
        }

        public override void VisitArrowExpressionClause(ArrowExpressionClauseSyntax node)
        {
            VisitExpression(node.Expression);
        }

        public override void VisitAssignmentExpression(AssignmentExpressionSyntax node)
        {
            VisitExpression(node.Left);
            VisitExpression(node.Right);
        }

        public override void VisitAttribute(AttributeSyntax node)
        {
            VisitType(node.Name);
            AttributeArgumentListSyntax argumentList = node.ArgumentList;
            if (argumentList != null)
            {
                foreach (AttributeArgumentSyntax attributeArgument in argumentList.Arguments)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitAttributeArgument(attributeArgument);
                }
            }
        }

        public override void VisitAttributeArgument(AttributeArgumentSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            IdentifierNameSyntax name = node.NameEquals?.Name;
            if (name != null)
            {
                VisitIdentifierName(name);
            }

            if (!ShouldVisit)
            {
                return;
            }

            IdentifierNameSyntax name2 = node.NameColon?.Name;
            if (name2 != null)
            {
                VisitIdentifierName(name2);
            }

            VisitExpression(node.Expression);
        }

        public override void VisitAttributeArgumentList(AttributeArgumentListSyntax node)
        {
            foreach (AttributeArgumentSyntax attributeArgument in node.Arguments)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeArgument(attributeArgument);
            }
        }

        public override void VisitAttributeList(AttributeListSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            AttributeTargetSpecifierSyntax target = node.Target;
            if (target != null)
            {
                VisitAttributeTargetSpecifier(target);
            }

            foreach (AttributeSyntax attribute in node.Attributes)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttribute(attribute);
            }
        }

        public override void VisitAttributeTargetSpecifier(AttributeTargetSpecifierSyntax node)
        {
        }

        public override void VisitAwaitExpression(AwaitExpressionSyntax node)
        {
            VisitExpression(node.Expression);
        }

        public override void VisitBadDirectiveTrivia(BadDirectiveTriviaSyntax node)
        {
        }

        public override void VisitBaseExpression(BaseExpressionSyntax node)
        {
        }

        public override void VisitBaseList(BaseListSyntax node)
        {
            foreach (BaseTypeSyntax baseType in node.Types)
            {
                VisitBaseType(baseType);
            }
        }

        public override void VisitBinaryExpression(BinaryExpressionSyntax node)
        {
            VisitExpression(node.Left);
            VisitExpression(node.Right);
        }

        public override void VisitBlock(BlockSyntax node)
        {
            foreach (StatementSyntax statement in node.Statements)
            {
                VisitStatement(statement);
            }
        }

        public override void VisitBracketedArgumentList(BracketedArgumentListSyntax node)
        {
            foreach (ArgumentSyntax argument in node.Arguments)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitArgument(argument);
            }
        }

        public override void VisitBracketedParameterList(BracketedParameterListSyntax node)
        {
            foreach (ParameterSyntax parameter in node.Parameters)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitParameter(parameter);
            }
        }

        public override void VisitBreakStatement(BreakStatementSyntax node)
        {
        }

        public override void VisitCasePatternSwitchLabel(CasePatternSwitchLabelSyntax node)
        {
            VisitPattern(node.Pattern);
            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax condition = node.WhenClause?.Condition;
            if (condition != null)
            {
                VisitExpression(condition);
            }
        }

        public override void VisitCaseSwitchLabel(CaseSwitchLabelSyntax node)
        {
            VisitExpression(node.Value);
        }

        public override void VisitCastExpression(CastExpressionSyntax node)
        {
            VisitType(node.Type);
            VisitExpression(node.Expression);
        }

        public override void VisitCatchClause(CatchClauseSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            TypeSyntax type = node.Declaration?.Type;
            if (type != null)
            {
                VisitType(type);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax filterExpression = node.Filter?.FilterExpression;
            if (filterExpression != null)
            {
                VisitExpression(filterExpression);
            }

            if (!ShouldVisit)
            {
                return;
            }

            BlockSyntax block = node.Block;
            if (block != null)
            {
                VisitBlock(block);
            }
        }

        public override void VisitCatchDeclaration(CatchDeclarationSyntax node)
        {
            VisitType(node.Type);
        }

        public override void VisitCatchFilterClause(CatchFilterClauseSyntax node)
        {
            VisitExpression(node.FilterExpression);
        }

        public override void VisitClassDeclaration(ClassDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            TypeParameterListSyntax typeParameterList = node.TypeParameterList;
            if (typeParameterList != null)
            {
                foreach (TypeParameterSyntax typeParameter in typeParameterList.Parameters)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitTypeParameter(typeParameter);
                }
            }

            if (!ShouldVisit)
            {
                return;
            }

            BaseListSyntax baseList = node.BaseList;
            if (baseList != null)
            {
                VisitBaseList(baseList);
            }

            foreach (TypeParameterConstraintClauseSyntax typeParameterConstraintClause in node.ConstraintClauses)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitTypeParameterConstraintClause(typeParameterConstraintClause);
            }

            foreach (MemberDeclarationSyntax memberDeclaration in node.Members)
            {
                VisitMemberDeclaration(memberDeclaration);
            }
        }

        public override void VisitClassOrStructConstraint(ClassOrStructConstraintSyntax node)
        {
        }

        public override void VisitCompilationUnit(CompilationUnitSyntax node)
        {
            foreach (ExternAliasDirectiveSyntax externAliasDirective in node.Externs)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitExternAliasDirective(externAliasDirective);
            }

            foreach (UsingDirectiveSyntax usingDirective in node.Usings)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitUsingDirective(usingDirective);
            }

            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            foreach (MemberDeclarationSyntax memberDeclaration in node.Members)
            {
                VisitMemberDeclaration(memberDeclaration);
            }
        }

        public override void VisitConditionalAccessExpression(ConditionalAccessExpressionSyntax node)
        {
            VisitExpression(node.Expression);
            VisitExpression(node.WhenNotNull);
        }

        public override void VisitConditionalExpression(ConditionalExpressionSyntax node)
        {
            VisitExpression(node.Condition);
            VisitExpression(node.WhenTrue);
            VisitExpression(node.WhenFalse);
        }

        public override void VisitConstantPattern(ConstantPatternSyntax node)
        {
            VisitExpression(node.Expression);
        }

        public override void VisitConstructorConstraint(ConstructorConstraintSyntax node)
        {
        }

        public override void VisitConstructorDeclaration(ConstructorDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            ParameterListSyntax parameterList = node.ParameterList;
            if (parameterList != null)
            {
                foreach (ParameterSyntax parameter in parameterList.Parameters)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitParameter(parameter);
                }
            }

            if (!ShouldVisit)
            {
                return;
            }

            ConstructorInitializerSyntax initializer = node.Initializer;
            if (initializer != null)
            {
                VisitConstructorInitializer(initializer);
            }

            if (!ShouldVisit)
            {
                return;
            }

            BlockSyntax body = node.Body;
            if (body != null)
            {
                VisitBlock(body);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax expression = node.ExpressionBody?.Expression;
            if (expression != null)
            {
                VisitExpression(expression);
            }
        }

        public override void VisitConstructorInitializer(ConstructorInitializerSyntax node)
        {
            ArgumentListSyntax argumentList = node.ArgumentList;
            if (argumentList != null)
            {
                foreach (ArgumentSyntax argument in argumentList.Arguments)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitArgument(argument);
                }
            }
        }

        public override void VisitContinueStatement(ContinueStatementSyntax node)
        {
        }

        public override void VisitConversionOperatorDeclaration(ConversionOperatorDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            VisitType(node.Type);
            ParameterListSyntax parameterList = node.ParameterList;
            if (parameterList != null)
            {
                foreach (ParameterSyntax parameter in parameterList.Parameters)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitParameter(parameter);
                }
            }

            if (!ShouldVisit)
            {
                return;
            }

            BlockSyntax body = node.Body;
            if (body != null)
            {
                VisitBlock(body);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax expression = node.ExpressionBody?.Expression;
            if (expression != null)
            {
                VisitExpression(expression);
            }
        }

        public override void VisitConversionOperatorMemberCref(ConversionOperatorMemberCrefSyntax node)
        {
            VisitType(node.Type);
            if (!ShouldVisit)
            {
                return;
            }

            CrefParameterListSyntax parameters = node.Parameters;
            if (parameters != null)
            {
                VisitCrefParameterList(parameters);
            }
        }

        public override void VisitCrefBracketedParameterList(CrefBracketedParameterListSyntax node)
        {
            foreach (CrefParameterSyntax crefParameter in node.Parameters)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitCrefParameter(crefParameter);
            }
        }

        public override void VisitCrefParameter(CrefParameterSyntax node)
        {
            VisitType(node.Type);
        }

        public override void VisitCrefParameterList(CrefParameterListSyntax node)
        {
            foreach (CrefParameterSyntax crefParameter in node.Parameters)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitCrefParameter(crefParameter);
            }
        }

        public override void VisitDeclarationExpression(DeclarationExpressionSyntax node)
        {
            VisitType(node.Type);
            VisitVariableDesignation(node.Designation);
        }

        public override void VisitDeclarationPattern(DeclarationPatternSyntax node)
        {
            VisitType(node.Type);
            VisitVariableDesignation(node.Designation);
        }

        public override void VisitDefaultExpression(DefaultExpressionSyntax node)
        {
            VisitType(node.Type);
        }

        public override void VisitDefaultSwitchLabel(DefaultSwitchLabelSyntax node)
        {
        }

        public override void VisitDefineDirectiveTrivia(DefineDirectiveTriviaSyntax node)
        {
        }

        public override void VisitDelegateDeclaration(DelegateDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            VisitType(node.ReturnType);
            TypeParameterListSyntax typeParameterList = node.TypeParameterList;
            if (typeParameterList != null)
            {
                foreach (TypeParameterSyntax typeParameter in typeParameterList.Parameters)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitTypeParameter(typeParameter);
                }
            }

            ParameterListSyntax parameterList = node.ParameterList;
            if (parameterList != null)
            {
                foreach (ParameterSyntax parameter in parameterList.Parameters)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitParameter(parameter);
                }
            }

            foreach (TypeParameterConstraintClauseSyntax typeParameterConstraintClause in node.ConstraintClauses)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitTypeParameterConstraintClause(typeParameterConstraintClause);
            }
        }

        public override void VisitDestructorDeclaration(DestructorDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            ParameterListSyntax parameterList = node.ParameterList;
            if (parameterList != null)
            {
                foreach (ParameterSyntax parameter in parameterList.Parameters)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitParameter(parameter);
                }
            }

            if (!ShouldVisit)
            {
                return;
            }

            BlockSyntax body = node.Body;
            if (body != null)
            {
                VisitBlock(body);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax expression = node.ExpressionBody?.Expression;
            if (expression != null)
            {
                VisitExpression(expression);
            }
        }

        public override void VisitDiscardDesignation(DiscardDesignationSyntax node)
        {
        }

        public override void VisitDocumentationCommentTrivia(DocumentationCommentTriviaSyntax node)
        {
            foreach (XmlNodeSyntax xmlNode in node.Content)
            {
                VisitXmlNode(xmlNode);
            }
        }

        public override void VisitDoStatement(DoStatementSyntax node)
        {
            VisitStatement(node.Statement);
            VisitExpression(node.Condition);
        }

        public override void VisitElementAccessExpression(ElementAccessExpressionSyntax node)
        {
            VisitExpression(node.Expression);
            BracketedArgumentListSyntax argumentList = node.ArgumentList;
            if (argumentList != null)
            {
                foreach (ArgumentSyntax argument in argumentList.Arguments)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitArgument(argument);
                }
            }
        }

        public override void VisitElementBindingExpression(ElementBindingExpressionSyntax node)
        {
            BracketedArgumentListSyntax argumentList = node.ArgumentList;
            if (argumentList != null)
            {
                foreach (ArgumentSyntax argument in argumentList.Arguments)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitArgument(argument);
                }
            }
        }

        public override void VisitElifDirectiveTrivia(ElifDirectiveTriviaSyntax node)
        {
            VisitExpression(node.Condition);
        }

        public override void VisitElseClause(ElseClauseSyntax node)
        {
            VisitStatement(node.Statement);
        }

        public override void VisitElseDirectiveTrivia(ElseDirectiveTriviaSyntax node)
        {
        }

        public override void VisitEmptyStatement(EmptyStatementSyntax node)
        {
        }

        public override void VisitEndIfDirectiveTrivia(EndIfDirectiveTriviaSyntax node)
        {
        }

        public override void VisitEndRegionDirectiveTrivia(EndRegionDirectiveTriviaSyntax node)
        {
        }

        public override void VisitEnumDeclaration(EnumDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            if (!ShouldVisit)
            {
                return;
            }

            BaseListSyntax baseList = node.BaseList;
            if (baseList != null)
            {
                VisitBaseList(baseList);
            }

            foreach (EnumMemberDeclarationSyntax enumMemberDeclaration in node.Members)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitEnumMemberDeclaration(enumMemberDeclaration);
            }
        }

        public override void VisitEnumMemberDeclaration(EnumMemberDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax value = node.EqualsValue?.Value;
            if (value != null)
            {
                VisitExpression(value);
            }
        }

        public override void VisitEqualsValueClause(EqualsValueClauseSyntax node)
        {
            VisitExpression(node.Value);
        }

        public override void VisitErrorDirectiveTrivia(ErrorDirectiveTriviaSyntax node)
        {
        }

        public override void VisitEventDeclaration(EventDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            VisitType(node.Type);
            if (!ShouldVisit)
            {
                return;
            }

            NameSyntax name = node.ExplicitInterfaceSpecifier?.Name;
            if (name != null)
            {
                VisitType(name);
            }

            AccessorListSyntax accessorList = node.AccessorList;
            if (accessorList != null)
            {
                foreach (AccessorDeclarationSyntax accessorDeclaration in accessorList.Accessors)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitAccessorDeclaration(accessorDeclaration);
                }
            }
        }

        public override void VisitEventFieldDeclaration(EventFieldDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            if (!ShouldVisit)
            {
                return;
            }

            VariableDeclarationSyntax declaration = node.Declaration;
            if (declaration != null)
            {
                VisitVariableDeclaration(declaration);
            }
        }

        public override void VisitExplicitInterfaceSpecifier(ExplicitInterfaceSpecifierSyntax node)
        {
            VisitType(node.Name);
        }

        public override void VisitExpressionStatement(ExpressionStatementSyntax node)
        {
            VisitExpression(node.Expression);
        }

        public override void VisitExternAliasDirective(ExternAliasDirectiveSyntax node)
        {
        }

        public override void VisitFieldDeclaration(FieldDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            if (!ShouldVisit)
            {
                return;
            }

            VariableDeclarationSyntax declaration = node.Declaration;
            if (declaration != null)
            {
                VisitVariableDeclaration(declaration);
            }
        }

        public override void VisitFinallyClause(FinallyClauseSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            BlockSyntax block = node.Block;
            if (block != null)
            {
                VisitBlock(block);
            }
        }

        public override void VisitFixedStatement(FixedStatementSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            VariableDeclarationSyntax declaration = node.Declaration;
            if (declaration != null)
            {
                VisitVariableDeclaration(declaration);
            }

            VisitStatement(node.Statement);
        }

        public override void VisitForEachStatement(ForEachStatementSyntax node)
        {
            VisitType(node.Type);
            VisitExpression(node.Expression);
            VisitStatement(node.Statement);
        }

        public override void VisitForEachVariableStatement(ForEachVariableStatementSyntax node)
        {
            VisitExpression(node.Variable);
            VisitExpression(node.Expression);
            VisitStatement(node.Statement);
        }

        public override void VisitForStatement(ForStatementSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            VariableDeclarationSyntax declaration = node.Declaration;
            if (declaration != null)
            {
                VisitVariableDeclaration(declaration);
            }

            foreach (ExpressionSyntax expression in node.Initializers)
            {
                VisitExpression(expression);
            }

            VisitExpression(node.Condition);
            foreach (ExpressionSyntax expression2 in node.Incrementors)
            {
                VisitExpression(expression2);
            }

            VisitStatement(node.Statement);
        }

        public override void VisitFromClause(FromClauseSyntax node)
        {
            VisitType(node.Type);
            VisitExpression(node.Expression);
        }

        public override void VisitGenericName(GenericNameSyntax node)
        {
            TypeArgumentListSyntax typeArgumentList = node.TypeArgumentList;
            if (typeArgumentList != null)
            {
                foreach (TypeSyntax type in typeArgumentList.Arguments)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitType(type);
                }
            }
        }

        public override void VisitGlobalStatement(GlobalStatementSyntax node)
        {
            VisitStatement(node.Statement);
        }

        public override void VisitGotoStatement(GotoStatementSyntax node)
        {
            VisitExpression(node.Expression);
        }

        public override void VisitGroupClause(GroupClauseSyntax node)
        {
            VisitExpression(node.GroupExpression);
            VisitExpression(node.ByExpression);
        }

        public override void VisitCheckedExpression(CheckedExpressionSyntax node)
        {
            VisitExpression(node.Expression);
        }

        public override void VisitCheckedStatement(CheckedStatementSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            BlockSyntax block = node.Block;
            if (block != null)
            {
                VisitBlock(block);
            }
        }

        public override void VisitIdentifierName(IdentifierNameSyntax node)
        {
        }

        public override void VisitIfDirectiveTrivia(IfDirectiveTriviaSyntax node)
        {
            VisitExpression(node.Condition);
        }

        public override void VisitIfStatement(IfStatementSyntax node)
        {
            VisitExpression(node.Condition);
            VisitStatement(node.Statement);
            if (!ShouldVisit)
            {
                return;
            }

            StatementSyntax statement = node.Else?.Statement;
            if (statement != null)
            {
                VisitStatement(statement);
            }
        }

        public override void VisitImplicitArrayCreationExpression(ImplicitArrayCreationExpressionSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            InitializerExpressionSyntax initializer = node.Initializer;
            if (initializer != null)
            {
                VisitInitializerExpression(initializer);
            }
        }

        public override void VisitImplicitElementAccess(ImplicitElementAccessSyntax node)
        {
            BracketedArgumentListSyntax argumentList = node.ArgumentList;
            if (argumentList != null)
            {
                foreach (ArgumentSyntax argument in argumentList.Arguments)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitArgument(argument);
                }
            }
        }

        public override void VisitIncompleteMember(IncompleteMemberSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            VisitType(node.Type);
        }

        public override void VisitIndexerDeclaration(IndexerDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            VisitType(node.Type);
            if (!ShouldVisit)
            {
                return;
            }

            NameSyntax name = node.ExplicitInterfaceSpecifier?.Name;
            if (name != null)
            {
                VisitType(name);
            }

            BracketedParameterListSyntax parameterList = node.ParameterList;
            if (parameterList != null)
            {
                foreach (ParameterSyntax parameter in parameterList.Parameters)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitParameter(parameter);
                }
            }

            AccessorListSyntax accessorList = node.AccessorList;
            if (accessorList != null)
            {
                foreach (AccessorDeclarationSyntax accessorDeclaration in accessorList.Accessors)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitAccessorDeclaration(accessorDeclaration);
                }
            }

            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax expression = node.ExpressionBody?.Expression;
            if (expression != null)
            {
                VisitExpression(expression);
            }
        }

        public override void VisitIndexerMemberCref(IndexerMemberCrefSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            CrefBracketedParameterListSyntax parameters = node.Parameters;
            if (parameters != null)
            {
                VisitCrefBracketedParameterList(parameters);
            }
        }

        public override void VisitInitializerExpression(InitializerExpressionSyntax node)
        {
            foreach (ExpressionSyntax expression in node.Expressions)
            {
                VisitExpression(expression);
            }
        }

        public override void VisitInterfaceDeclaration(InterfaceDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            TypeParameterListSyntax typeParameterList = node.TypeParameterList;
            if (typeParameterList != null)
            {
                foreach (TypeParameterSyntax typeParameter in typeParameterList.Parameters)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitTypeParameter(typeParameter);
                }
            }

            if (!ShouldVisit)
            {
                return;
            }

            BaseListSyntax baseList = node.BaseList;
            if (baseList != null)
            {
                VisitBaseList(baseList);
            }

            foreach (TypeParameterConstraintClauseSyntax typeParameterConstraintClause in node.ConstraintClauses)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitTypeParameterConstraintClause(typeParameterConstraintClause);
            }

            foreach (MemberDeclarationSyntax memberDeclaration in node.Members)
            {
                VisitMemberDeclaration(memberDeclaration);
            }
        }

        public override void VisitInterpolatedStringExpression(InterpolatedStringExpressionSyntax node)
        {
            foreach (InterpolatedStringContentSyntax interpolatedStringContent in node.Contents)
            {
                VisitInterpolatedStringContent(interpolatedStringContent);
            }
        }

        public override void VisitInterpolatedStringText(InterpolatedStringTextSyntax node)
        {
        }

        public override void VisitInterpolation(InterpolationSyntax node)
        {
            VisitExpression(node.Expression);
            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax value = node.AlignmentClause?.Value;
            if (value != null)
            {
                VisitExpression(value);
            }

            if (!ShouldVisit)
            {
                return;
            }

            InterpolationFormatClauseSyntax formatClause = node.FormatClause;
            if (formatClause != null)
            {
                VisitInterpolationFormatClause(formatClause);
            }
        }

        public override void VisitInterpolationAlignmentClause(InterpolationAlignmentClauseSyntax node)
        {
            VisitExpression(node.Value);
        }

        public override void VisitInterpolationFormatClause(InterpolationFormatClauseSyntax node)
        {
        }

        public override void VisitInvocationExpression(InvocationExpressionSyntax node)
        {
            VisitExpression(node.Expression);
            ArgumentListSyntax argumentList = node.ArgumentList;
            if (argumentList != null)
            {
                foreach (ArgumentSyntax argument in argumentList.Arguments)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitArgument(argument);
                }
            }
        }

        public override void VisitIsPatternExpression(IsPatternExpressionSyntax node)
        {
            VisitExpression(node.Expression);
            VisitPattern(node.Pattern);
        }

        public override void VisitJoinClause(JoinClauseSyntax node)
        {
            VisitType(node.Type);
            VisitExpression(node.InExpression);
            VisitExpression(node.LeftExpression);
            VisitExpression(node.RightExpression);
            if (!ShouldVisit)
            {
                return;
            }

            JoinIntoClauseSyntax into = node.Into;
            if (into != null)
            {
                VisitJoinIntoClause(into);
            }
        }

        public override void VisitJoinIntoClause(JoinIntoClauseSyntax node)
        {
        }

        public override void VisitLabeledStatement(LabeledStatementSyntax node)
        {
            VisitStatement(node.Statement);
        }

        public override void VisitLetClause(LetClauseSyntax node)
        {
            VisitExpression(node.Expression);
        }

        public override void VisitLineDirectiveTrivia(LineDirectiveTriviaSyntax node)
        {
        }

        public override void VisitLiteralExpression(LiteralExpressionSyntax node)
        {
        }

        public override void VisitLoadDirectiveTrivia(LoadDirectiveTriviaSyntax node)
        {
        }

        public override void VisitLocalDeclarationStatement(LocalDeclarationStatementSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            VariableDeclarationSyntax declaration = node.Declaration;
            if (declaration != null)
            {
                VisitVariableDeclaration(declaration);
            }
        }

        public override void VisitLocalFunctionStatement(LocalFunctionStatementSyntax node)
        {
            VisitType(node.ReturnType);
            TypeParameterListSyntax typeParameterList = node.TypeParameterList;
            if (typeParameterList != null)
            {
                foreach (TypeParameterSyntax typeParameter in typeParameterList.Parameters)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitTypeParameter(typeParameter);
                }
            }

            ParameterListSyntax parameterList = node.ParameterList;
            if (parameterList != null)
            {
                foreach (ParameterSyntax parameter in parameterList.Parameters)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitParameter(parameter);
                }
            }

            foreach (TypeParameterConstraintClauseSyntax typeParameterConstraintClause in node.ConstraintClauses)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitTypeParameterConstraintClause(typeParameterConstraintClause);
            }

            if (!ShouldVisit)
            {
                return;
            }

            BlockSyntax body = node.Body;
            if (body != null)
            {
                VisitBlock(body);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax expression = node.ExpressionBody?.Expression;
            if (expression != null)
            {
                VisitExpression(expression);
            }
        }

        public override void VisitLockStatement(LockStatementSyntax node)
        {
            VisitExpression(node.Expression);
            VisitStatement(node.Statement);
        }

        public override void VisitMakeRefExpression(MakeRefExpressionSyntax node)
        {
            VisitExpression(node.Expression);
        }

        public override void VisitMemberAccessExpression(MemberAccessExpressionSyntax node)
        {
            VisitExpression(node.Expression);
            VisitType(node.Name);
        }

        public override void VisitMemberBindingExpression(MemberBindingExpressionSyntax node)
        {
            VisitType(node.Name);
        }

        public override void VisitMethodDeclaration(MethodDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            VisitType(node.ReturnType);
            if (!ShouldVisit)
            {
                return;
            }

            NameSyntax name = node.ExplicitInterfaceSpecifier?.Name;
            if (name != null)
            {
                VisitType(name);
            }

            TypeParameterListSyntax typeParameterList = node.TypeParameterList;
            if (typeParameterList != null)
            {
                foreach (TypeParameterSyntax typeParameter in typeParameterList.Parameters)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitTypeParameter(typeParameter);
                }
            }

            ParameterListSyntax parameterList = node.ParameterList;
            if (parameterList != null)
            {
                foreach (ParameterSyntax parameter in parameterList.Parameters)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitParameter(parameter);
                }
            }

            foreach (TypeParameterConstraintClauseSyntax typeParameterConstraintClause in node.ConstraintClauses)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitTypeParameterConstraintClause(typeParameterConstraintClause);
            }

            if (!ShouldVisit)
            {
                return;
            }

            BlockSyntax body = node.Body;
            if (body != null)
            {
                VisitBlock(body);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax expression = node.ExpressionBody?.Expression;
            if (expression != null)
            {
                VisitExpression(expression);
            }
        }

        public override void VisitNameColon(NameColonSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            IdentifierNameSyntax name = node.Name;
            if (name != null)
            {
                VisitIdentifierName(name);
            }
        }

        public override void VisitNameEquals(NameEqualsSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            IdentifierNameSyntax name = node.Name;
            if (name != null)
            {
                VisitIdentifierName(name);
            }
        }

        public override void VisitNameMemberCref(NameMemberCrefSyntax node)
        {
            VisitType(node.Name);
            if (!ShouldVisit)
            {
                return;
            }

            CrefParameterListSyntax parameters = node.Parameters;
            if (parameters != null)
            {
                VisitCrefParameterList(parameters);
            }
        }

        public override void VisitNamespaceDeclaration(NamespaceDeclarationSyntax node)
        {
            VisitType(node.Name);
            foreach (ExternAliasDirectiveSyntax externAliasDirective in node.Externs)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitExternAliasDirective(externAliasDirective);
            }

            foreach (UsingDirectiveSyntax usingDirective in node.Usings)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitUsingDirective(usingDirective);
            }

            foreach (MemberDeclarationSyntax memberDeclaration in node.Members)
            {
                VisitMemberDeclaration(memberDeclaration);
            }
        }

        public override void VisitNullableType(NullableTypeSyntax node)
        {
            VisitType(node.ElementType);
        }

        public override void VisitObjectCreationExpression(ObjectCreationExpressionSyntax node)
        {
            VisitType(node.Type);
            ArgumentListSyntax argumentList = node.ArgumentList;
            if (argumentList != null)
            {
                foreach (ArgumentSyntax argument in argumentList.Arguments)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitArgument(argument);
                }
            }

            if (!ShouldVisit)
            {
                return;
            }

            InitializerExpressionSyntax initializer = node.Initializer;
            if (initializer != null)
            {
                VisitInitializerExpression(initializer);
            }
        }

        public override void VisitOmittedArraySizeExpression(OmittedArraySizeExpressionSyntax node)
        {
        }

        public override void VisitOmittedTypeArgument(OmittedTypeArgumentSyntax node)
        {
        }

        public override void VisitOperatorDeclaration(OperatorDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            VisitType(node.ReturnType);
            ParameterListSyntax parameterList = node.ParameterList;
            if (parameterList != null)
            {
                foreach (ParameterSyntax parameter in parameterList.Parameters)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitParameter(parameter);
                }
            }

            if (!ShouldVisit)
            {
                return;
            }

            BlockSyntax body = node.Body;
            if (body != null)
            {
                VisitBlock(body);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax expression = node.ExpressionBody?.Expression;
            if (expression != null)
            {
                VisitExpression(expression);
            }
        }

        public override void VisitOperatorMemberCref(OperatorMemberCrefSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            CrefParameterListSyntax parameters = node.Parameters;
            if (parameters != null)
            {
                VisitCrefParameterList(parameters);
            }
        }

        public override void VisitOrderByClause(OrderByClauseSyntax node)
        {
            foreach (OrderingSyntax ordering in node.Orderings)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitOrdering(ordering);
            }
        }

        public override void VisitOrdering(OrderingSyntax node)
        {
            VisitExpression(node.Expression);
        }

        public override void VisitParameter(ParameterSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            VisitType(node.Type);
            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax value = node.Default?.Value;
            if (value != null)
            {
                VisitExpression(value);
            }
        }

        public override void VisitParameterList(ParameterListSyntax node)
        {
            foreach (ParameterSyntax parameter in node.Parameters)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitParameter(parameter);
            }
        }

        public override void VisitParenthesizedExpression(ParenthesizedExpressionSyntax node)
        {
            VisitExpression(node.Expression);
        }

        public override void VisitParenthesizedLambdaExpression(ParenthesizedLambdaExpressionSyntax node)
        {
            ParameterListSyntax parameterList = node.ParameterList;
            if (parameterList != null)
            {
                foreach (ParameterSyntax parameter in parameterList.Parameters)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitParameter(parameter);
                }
            }

            CSharpSyntaxNode body = node.Body;
            if (body is ExpressionSyntax expression)
            {
                VisitExpression(expression);
            }
            else if (body is StatementSyntax statement)
            {
                VisitStatement(statement);
            }
            else
            {
                throw new InvalidOperationException();
            }
        }

        public override void VisitParenthesizedVariableDesignation(ParenthesizedVariableDesignationSyntax node)
        {
            foreach (VariableDesignationSyntax variableDesignation in node.Variables)
            {
                VisitVariableDesignation(variableDesignation);
            }
        }

        public override void VisitPointerType(PointerTypeSyntax node)
        {
            VisitType(node.ElementType);
        }

        public override void VisitPostfixUnaryExpression(PostfixUnaryExpressionSyntax node)
        {
            VisitExpression(node.Operand);
        }

        public override void VisitPragmaChecksumDirectiveTrivia(PragmaChecksumDirectiveTriviaSyntax node)
        {
        }

        public override void VisitPragmaWarningDirectiveTrivia(PragmaWarningDirectiveTriviaSyntax node)
        {
            foreach (ExpressionSyntax expression in node.ErrorCodes)
            {
                VisitExpression(expression);
            }
        }

        public override void VisitPredefinedType(PredefinedTypeSyntax node)
        {
        }

        public override void VisitPrefixUnaryExpression(PrefixUnaryExpressionSyntax node)
        {
            VisitExpression(node.Operand);
        }

        public override void VisitPropertyDeclaration(PropertyDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            VisitType(node.Type);
            if (!ShouldVisit)
            {
                return;
            }

            NameSyntax name = node.ExplicitInterfaceSpecifier?.Name;
            if (name != null)
            {
                VisitType(name);
            }

            AccessorListSyntax accessorList = node.AccessorList;
            if (accessorList != null)
            {
                foreach (AccessorDeclarationSyntax accessorDeclaration in accessorList.Accessors)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitAccessorDeclaration(accessorDeclaration);
                }
            }

            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax expression = node.ExpressionBody?.Expression;
            if (expression != null)
            {
                VisitExpression(expression);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax value = node.Initializer?.Value;
            if (value != null)
            {
                VisitExpression(value);
            }
        }

        public override void VisitQualifiedCref(QualifiedCrefSyntax node)
        {
            VisitType(node.Container);
            VisitMemberCref(node.Member);
        }

        public override void VisitQualifiedName(QualifiedNameSyntax node)
        {
            VisitType(node.Left);
            VisitType(node.Right);
        }

        public override void VisitQueryBody(QueryBodySyntax node)
        {
            foreach (QueryClauseSyntax queryClause in node.Clauses)
            {
                VisitQueryClause(queryClause);
            }

            VisitSelectOrGroupClause(node.SelectOrGroup);
            if (!ShouldVisit)
            {
                return;
            }

            QueryBodySyntax body = node.Continuation?.Body;
            if (body != null)
            {
                VisitQueryBody(body);
            }
        }

        public override void VisitQueryContinuation(QueryContinuationSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            QueryBodySyntax body = node.Body;
            if (body != null)
            {
                VisitQueryBody(body);
            }
        }

        public override void VisitQueryExpression(QueryExpressionSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            FromClauseSyntax fromClause = node.FromClause;
            if (fromClause != null)
            {
                VisitFromClause(fromClause);
            }

            if (!ShouldVisit)
            {
                return;
            }

            QueryBodySyntax body = node.Body;
            if (body != null)
            {
                VisitQueryBody(body);
            }
        }

        public override void VisitReferenceDirectiveTrivia(ReferenceDirectiveTriviaSyntax node)
        {
        }

        public override void VisitRefExpression(RefExpressionSyntax node)
        {
            VisitExpression(node.Expression);
        }

        public override void VisitRefType(RefTypeSyntax node)
        {
            VisitType(node.Type);
        }

        public override void VisitRefTypeExpression(RefTypeExpressionSyntax node)
        {
            VisitExpression(node.Expression);
        }

        public override void VisitRefValueExpression(RefValueExpressionSyntax node)
        {
            VisitExpression(node.Expression);
            VisitType(node.Type);
        }

        public override void VisitRegionDirectiveTrivia(RegionDirectiveTriviaSyntax node)
        {
        }

        public override void VisitReturnStatement(ReturnStatementSyntax node)
        {
            VisitExpression(node.Expression);
        }

        public override void VisitSelectClause(SelectClauseSyntax node)
        {
            VisitExpression(node.Expression);
        }

        public override void VisitShebangDirectiveTrivia(ShebangDirectiveTriviaSyntax node)
        {
        }

        public override void VisitSimpleBaseType(SimpleBaseTypeSyntax node)
        {
            VisitType(node.Type);
        }

        public override void VisitSimpleLambdaExpression(SimpleLambdaExpressionSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ParameterSyntax parameter = node.Parameter;
            if (parameter != null)
            {
                VisitParameter(parameter);
            }

            CSharpSyntaxNode body = node.Body;
            if (body is ExpressionSyntax expression)
            {
                VisitExpression(expression);
            }
            else if (body is StatementSyntax statement)
            {
                VisitStatement(statement);
            }
            else
            {
                throw new InvalidOperationException();
            }
        }

        public override void VisitSingleVariableDesignation(SingleVariableDesignationSyntax node)
        {
        }

        public override void VisitSizeOfExpression(SizeOfExpressionSyntax node)
        {
            VisitType(node.Type);
        }

        public override void VisitSkippedTokensTrivia(SkippedTokensTriviaSyntax node)
        {
        }

        public override void VisitStackAllocArrayCreationExpression(StackAllocArrayCreationExpressionSyntax node)
        {
            VisitType(node.Type);
        }

        public override void VisitStructDeclaration(StructDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            TypeParameterListSyntax typeParameterList = node.TypeParameterList;
            if (typeParameterList != null)
            {
                foreach (TypeParameterSyntax typeParameter in typeParameterList.Parameters)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitTypeParameter(typeParameter);
                }
            }

            if (!ShouldVisit)
            {
                return;
            }

            BaseListSyntax baseList = node.BaseList;
            if (baseList != null)
            {
                VisitBaseList(baseList);
            }

            foreach (TypeParameterConstraintClauseSyntax typeParameterConstraintClause in node.ConstraintClauses)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitTypeParameterConstraintClause(typeParameterConstraintClause);
            }

            foreach (MemberDeclarationSyntax memberDeclaration in node.Members)
            {
                VisitMemberDeclaration(memberDeclaration);
            }
        }

        public override void VisitSwitchSection(SwitchSectionSyntax node)
        {
            foreach (SwitchLabelSyntax switchLabel in node.Labels)
            {
                VisitSwitchLabel(switchLabel);
            }

            foreach (StatementSyntax statement in node.Statements)
            {
                VisitStatement(statement);
            }
        }

        public override void VisitSwitchStatement(SwitchStatementSyntax node)
        {
            VisitExpression(node.Expression);
            foreach (SwitchSectionSyntax switchSection in node.Sections)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitSwitchSection(switchSection);
            }
        }

        public override void VisitThisExpression(ThisExpressionSyntax node)
        {
        }

        public override void VisitThrowExpression(ThrowExpressionSyntax node)
        {
            VisitExpression(node.Expression);
        }

        public override void VisitThrowStatement(ThrowStatementSyntax node)
        {
            VisitExpression(node.Expression);
        }

        public override void VisitTryStatement(TryStatementSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            BlockSyntax block = node.Block;
            if (block != null)
            {
                VisitBlock(block);
            }

            foreach (CatchClauseSyntax catchClause in node.Catches)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitCatchClause(catchClause);
            }

            if (!ShouldVisit)
            {
                return;
            }

            BlockSyntax block2 = node.Finally?.Block;
            if (block2 != null)
            {
                VisitBlock(block2);
            }
        }

        public override void VisitTupleElement(TupleElementSyntax node)
        {
            VisitType(node.Type);
        }

        public override void VisitTupleExpression(TupleExpressionSyntax node)
        {
            foreach (ArgumentSyntax argument in node.Arguments)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitArgument(argument);
            }
        }

        public override void VisitTupleType(TupleTypeSyntax node)
        {
            foreach (TupleElementSyntax tupleElement in node.Elements)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitTupleElement(tupleElement);
            }
        }

        public override void VisitTypeArgumentList(TypeArgumentListSyntax node)
        {
            foreach (TypeSyntax type in node.Arguments)
            {
                VisitType(type);
            }
        }

        public override void VisitTypeConstraint(TypeConstraintSyntax node)
        {
            VisitType(node.Type);
        }

        public override void VisitTypeCref(TypeCrefSyntax node)
        {
            VisitType(node.Type);
        }

        public override void VisitTypeOfExpression(TypeOfExpressionSyntax node)
        {
            VisitType(node.Type);
        }

        public override void VisitTypeParameter(TypeParameterSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }
        }

        public override void VisitTypeParameterConstraintClause(TypeParameterConstraintClauseSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            IdentifierNameSyntax name = node.Name;
            if (name != null)
            {
                VisitIdentifierName(name);
            }

            foreach (TypeParameterConstraintSyntax typeParameterConstraint in node.Constraints)
            {
                VisitTypeParameterConstraint(typeParameterConstraint);
            }
        }

        public override void VisitTypeParameterList(TypeParameterListSyntax node)
        {
            foreach (TypeParameterSyntax typeParameter in node.Parameters)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitTypeParameter(typeParameter);
            }
        }

        public override void VisitUndefDirectiveTrivia(UndefDirectiveTriviaSyntax node)
        {
        }

        public override void VisitUnsafeStatement(UnsafeStatementSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            BlockSyntax block = node.Block;
            if (block != null)
            {
                VisitBlock(block);
            }
        }

        public override void VisitUsingDirective(UsingDirectiveSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            IdentifierNameSyntax name = node.Alias?.Name;
            if (name != null)
            {
                VisitIdentifierName(name);
            }

            VisitType(node.Name);
        }

        public override void VisitUsingStatement(UsingStatementSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            VariableDeclarationSyntax declaration = node.Declaration;
            if (declaration != null)
            {
                VisitVariableDeclaration(declaration);
            }

            VisitExpression(node.Expression);
            VisitStatement(node.Statement);
        }

        public override void VisitVariableDeclaration(VariableDeclarationSyntax node)
        {
            VisitType(node.Type);
            foreach (VariableDeclaratorSyntax variableDeclarator in node.Variables)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitVariableDeclarator(variableDeclarator);
            }
        }

        public override void VisitVariableDeclarator(VariableDeclaratorSyntax node)
        {
            BracketedArgumentListSyntax argumentList = node.ArgumentList;
            if (argumentList != null)
            {
                foreach (ArgumentSyntax argument in argumentList.Arguments)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitArgument(argument);
                }
            }

            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax value = node.Initializer?.Value;
            if (value != null)
            {
                VisitExpression(value);
            }
        }

        public override void VisitWarningDirectiveTrivia(WarningDirectiveTriviaSyntax node)
        {
        }

        public override void VisitWhenClause(WhenClauseSyntax node)
        {
            VisitExpression(node.Condition);
        }

        public override void VisitWhereClause(WhereClauseSyntax node)
        {
            VisitExpression(node.Condition);
        }

        public override void VisitWhileStatement(WhileStatementSyntax node)
        {
            VisitExpression(node.Condition);
            VisitStatement(node.Statement);
        }

        public override void VisitXmlCDataSection(XmlCDataSectionSyntax node)
        {
        }

        public override void VisitXmlComment(XmlCommentSyntax node)
        {
        }

        public override void VisitXmlCrefAttribute(XmlCrefAttributeSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            XmlPrefixSyntax prefix = node.Name?.Prefix;
            if (prefix != null)
            {
                VisitXmlPrefix(prefix);
            }

            VisitCref(node.Cref);
        }

        public override void VisitXmlElement(XmlElementSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            XmlElementStartTagSyntax startTag = node.StartTag;
            if (startTag != null)
            {
                VisitXmlElementStartTag(startTag);
            }

            foreach (XmlNodeSyntax xmlNode in node.Content)
            {
                VisitXmlNode(xmlNode);
            }

            if (!ShouldVisit)
            {
                return;
            }

            XmlNameSyntax name = node.EndTag?.Name;
            if (name != null)
            {
                VisitXmlName(name);
            }
        }

        public override void VisitXmlElementEndTag(XmlElementEndTagSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            XmlPrefixSyntax prefix = node.Name?.Prefix;
            if (prefix != null)
            {
                VisitXmlPrefix(prefix);
            }
        }

        public override void VisitXmlElementStartTag(XmlElementStartTagSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            XmlPrefixSyntax prefix = node.Name?.Prefix;
            if (prefix != null)
            {
                VisitXmlPrefix(prefix);
            }

            foreach (XmlAttributeSyntax xmlAttribute in node.Attributes)
            {
                VisitXmlAttribute(xmlAttribute);
            }
        }

        public override void VisitXmlEmptyElement(XmlEmptyElementSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            XmlPrefixSyntax prefix = node.Name?.Prefix;
            if (prefix != null)
            {
                VisitXmlPrefix(prefix);
            }

            foreach (XmlAttributeSyntax xmlAttribute in node.Attributes)
            {
                VisitXmlAttribute(xmlAttribute);
            }
        }

        public override void VisitXmlName(XmlNameSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            XmlPrefixSyntax prefix = node.Prefix;
            if (prefix != null)
            {
                VisitXmlPrefix(prefix);
            }
        }

        public override void VisitXmlNameAttribute(XmlNameAttributeSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            XmlPrefixSyntax prefix = node.Name?.Prefix;
            if (prefix != null)
            {
                VisitXmlPrefix(prefix);
            }

            if (!ShouldVisit)
            {
                return;
            }

            IdentifierNameSyntax identifier = node.Identifier;
            if (identifier != null)
            {
                VisitIdentifierName(identifier);
            }
        }

        public override void VisitXmlPrefix(XmlPrefixSyntax node)
        {
        }

        public override void VisitXmlProcessingInstruction(XmlProcessingInstructionSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            XmlPrefixSyntax prefix = node.Name?.Prefix;
            if (prefix != null)
            {
                VisitXmlPrefix(prefix);
            }
        }

        public override void VisitXmlText(XmlTextSyntax node)
        {
        }

        public override void VisitXmlTextAttribute(XmlTextAttributeSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            XmlPrefixSyntax prefix = node.Name?.Prefix;
            if (prefix != null)
            {
                VisitXmlPrefix(prefix);
            }
        }

        public override void VisitYieldStatement(YieldStatementSyntax node)
        {
            VisitExpression(node.Expression);
        }

        protected virtual void VisitBaseType(BaseTypeSyntax node)
        {
            if (node == null)
            {
                return;
            }

            switch (node.Kind())
            {
                case SyntaxKind.SimpleBaseType:
                {
                    VisitSimpleBaseType((SimpleBaseTypeSyntax)node);
                    break;
                }

                default:
                {
                    throw new InvalidOperationException();
                }
            }
        }

        protected virtual void VisitCref(CrefSyntax node)
        {
            if (node == null)
            {
                return;
            }

            switch (node.Kind())
            {
                case SyntaxKind.ConversionOperatorMemberCref:
                {
                    VisitConversionOperatorMemberCref((ConversionOperatorMemberCrefSyntax)node);
                    break;
                }

                case SyntaxKind.IndexerMemberCref:
                {
                    VisitIndexerMemberCref((IndexerMemberCrefSyntax)node);
                    break;
                }

                case SyntaxKind.NameMemberCref:
                {
                    VisitNameMemberCref((NameMemberCrefSyntax)node);
                    break;
                }

                case SyntaxKind.OperatorMemberCref:
                {
                    VisitOperatorMemberCref((OperatorMemberCrefSyntax)node);
                    break;
                }

                case SyntaxKind.QualifiedCref:
                {
                    VisitQualifiedCref((QualifiedCrefSyntax)node);
                    break;
                }

                case SyntaxKind.TypeCref:
                {
                    VisitTypeCref((TypeCrefSyntax)node);
                    break;
                }

                default:
                {
                    throw new InvalidOperationException();
                }
            }
        }

        protected virtual void VisitExpression(ExpressionSyntax node)
        {
            if (node == null)
            {
                return;
            }

            switch (node.Kind())
            {
                case SyntaxKind.AliasQualifiedName:
                {
                    VisitAliasQualifiedName((AliasQualifiedNameSyntax)node);
                    break;
                }

                case SyntaxKind.AnonymousMethodExpression:
                {
                    VisitAnonymousMethodExpression((AnonymousMethodExpressionSyntax)node);
                    break;
                }

                case SyntaxKind.AnonymousObjectCreationExpression:
                {
                    VisitAnonymousObjectCreationExpression((AnonymousObjectCreationExpressionSyntax)node);
                    break;
                }

                case SyntaxKind.ArrayCreationExpression:
                {
                    VisitArrayCreationExpression((ArrayCreationExpressionSyntax)node);
                    break;
                }

                case SyntaxKind.ArrayType:
                {
                    VisitArrayType((ArrayTypeSyntax)node);
                    break;
                }

                case SyntaxKind.SimpleAssignmentExpression:
                case SyntaxKind.AddAssignmentExpression:
                case SyntaxKind.SubtractAssignmentExpression:
                case SyntaxKind.MultiplyAssignmentExpression:
                case SyntaxKind.DivideAssignmentExpression:
                case SyntaxKind.ModuloAssignmentExpression:
                case SyntaxKind.AndAssignmentExpression:
                case SyntaxKind.ExclusiveOrAssignmentExpression:
                case SyntaxKind.OrAssignmentExpression:
                case SyntaxKind.LeftShiftAssignmentExpression:
                case SyntaxKind.RightShiftAssignmentExpression:
                {
                    VisitAssignmentExpression((AssignmentExpressionSyntax)node);
                    break;
                }

                case SyntaxKind.AwaitExpression:
                {
                    VisitAwaitExpression((AwaitExpressionSyntax)node);
                    break;
                }

                case SyntaxKind.BaseExpression:
                {
                    VisitBaseExpression((BaseExpressionSyntax)node);
                    break;
                }

                case SyntaxKind.AddExpression:
                case SyntaxKind.SubtractExpression:
                case SyntaxKind.MultiplyExpression:
                case SyntaxKind.DivideExpression:
                case SyntaxKind.ModuloExpression:
                case SyntaxKind.LeftShiftExpression:
                case SyntaxKind.RightShiftExpression:
                case SyntaxKind.LogicalOrExpression:
                case SyntaxKind.LogicalAndExpression:
                case SyntaxKind.BitwiseOrExpression:
                case SyntaxKind.BitwiseAndExpression:
                case SyntaxKind.ExclusiveOrExpression:
                case SyntaxKind.EqualsExpression:
                case SyntaxKind.NotEqualsExpression:
                case SyntaxKind.LessThanExpression:
                case SyntaxKind.LessThanOrEqualExpression:
                case SyntaxKind.GreaterThanExpression:
                case SyntaxKind.GreaterThanOrEqualExpression:
                case SyntaxKind.IsExpression:
                case SyntaxKind.AsExpression:
                case SyntaxKind.CoalesceExpression:
                {
                    VisitBinaryExpression((BinaryExpressionSyntax)node);
                    break;
                }

                case SyntaxKind.CastExpression:
                {
                    VisitCastExpression((CastExpressionSyntax)node);
                    break;
                }

                case SyntaxKind.ConditionalAccessExpression:
                {
                    VisitConditionalAccessExpression((ConditionalAccessExpressionSyntax)node);
                    break;
                }

                case SyntaxKind.ConditionalExpression:
                {
                    VisitConditionalExpression((ConditionalExpressionSyntax)node);
                    break;
                }

                case SyntaxKind.DeclarationExpression:
                {
                    VisitDeclarationExpression((DeclarationExpressionSyntax)node);
                    break;
                }

                case SyntaxKind.DefaultExpression:
                {
                    VisitDefaultExpression((DefaultExpressionSyntax)node);
                    break;
                }

                case SyntaxKind.ElementAccessExpression:
                {
                    VisitElementAccessExpression((ElementAccessExpressionSyntax)node);
                    break;
                }

                case SyntaxKind.ElementBindingExpression:
                {
                    VisitElementBindingExpression((ElementBindingExpressionSyntax)node);
                    break;
                }

                case SyntaxKind.GenericName:
                {
                    VisitGenericName((GenericNameSyntax)node);
                    break;
                }

                case SyntaxKind.CheckedExpression:
                case SyntaxKind.UncheckedExpression:
                {
                    VisitCheckedExpression((CheckedExpressionSyntax)node);
                    break;
                }

                case SyntaxKind.IdentifierName:
                {
                    VisitIdentifierName((IdentifierNameSyntax)node);
                    break;
                }

                case SyntaxKind.ImplicitArrayCreationExpression:
                {
                    VisitImplicitArrayCreationExpression((ImplicitArrayCreationExpressionSyntax)node);
                    break;
                }

                case SyntaxKind.ImplicitElementAccess:
                {
                    VisitImplicitElementAccess((ImplicitElementAccessSyntax)node);
                    break;
                }

                case SyntaxKind.ArrayInitializerExpression:
                case SyntaxKind.CollectionInitializerExpression:
                case SyntaxKind.ComplexElementInitializerExpression:
                case SyntaxKind.ObjectInitializerExpression:
                {
                    VisitInitializerExpression((InitializerExpressionSyntax)node);
                    break;
                }

                case SyntaxKind.InterpolatedStringExpression:
                {
                    VisitInterpolatedStringExpression((InterpolatedStringExpressionSyntax)node);
                    break;
                }

                case SyntaxKind.InvocationExpression:
                {
                    VisitInvocationExpression((InvocationExpressionSyntax)node);
                    break;
                }

                case SyntaxKind.IsPatternExpression:
                {
                    VisitIsPatternExpression((IsPatternExpressionSyntax)node);
                    break;
                }

                case SyntaxKind.ArgListExpression:
                case SyntaxKind.NumericLiteralExpression:
                case SyntaxKind.StringLiteralExpression:
                case SyntaxKind.CharacterLiteralExpression:
                case SyntaxKind.TrueLiteralExpression:
                case SyntaxKind.FalseLiteralExpression:
                case SyntaxKind.NullLiteralExpression:
                case SyntaxKind.DefaultLiteralExpression:
                {
                    VisitLiteralExpression((LiteralExpressionSyntax)node);
                    break;
                }

                case SyntaxKind.MakeRefExpression:
                {
                    VisitMakeRefExpression((MakeRefExpressionSyntax)node);
                    break;
                }

                case SyntaxKind.PointerMemberAccessExpression:
                case SyntaxKind.SimpleMemberAccessExpression:
                {
                    VisitMemberAccessExpression((MemberAccessExpressionSyntax)node);
                    break;
                }

                case SyntaxKind.MemberBindingExpression:
                {
                    VisitMemberBindingExpression((MemberBindingExpressionSyntax)node);
                    break;
                }

                case SyntaxKind.NullableType:
                {
                    VisitNullableType((NullableTypeSyntax)node);
                    break;
                }

                case SyntaxKind.ObjectCreationExpression:
                {
                    VisitObjectCreationExpression((ObjectCreationExpressionSyntax)node);
                    break;
                }

                case SyntaxKind.OmittedArraySizeExpression:
                {
                    VisitOmittedArraySizeExpression((OmittedArraySizeExpressionSyntax)node);
                    break;
                }

                case SyntaxKind.OmittedTypeArgument:
                {
                    VisitOmittedTypeArgument((OmittedTypeArgumentSyntax)node);
                    break;
                }

                case SyntaxKind.ParenthesizedExpression:
                {
                    VisitParenthesizedExpression((ParenthesizedExpressionSyntax)node);
                    break;
                }

                case SyntaxKind.ParenthesizedLambdaExpression:
                {
                    VisitParenthesizedLambdaExpression((ParenthesizedLambdaExpressionSyntax)node);
                    break;
                }

                case SyntaxKind.PointerType:
                {
                    VisitPointerType((PointerTypeSyntax)node);
                    break;
                }

                case SyntaxKind.PostDecrementExpression:
                case SyntaxKind.PostIncrementExpression:
                {
                    VisitPostfixUnaryExpression((PostfixUnaryExpressionSyntax)node);
                    break;
                }

                case SyntaxKind.PredefinedType:
                {
                    VisitPredefinedType((PredefinedTypeSyntax)node);
                    break;
                }

                case SyntaxKind.UnaryPlusExpression:
                case SyntaxKind.UnaryMinusExpression:
                case SyntaxKind.BitwiseNotExpression:
                case SyntaxKind.LogicalNotExpression:
                case SyntaxKind.PreIncrementExpression:
                case SyntaxKind.PreDecrementExpression:
                case SyntaxKind.AddressOfExpression:
                case SyntaxKind.PointerIndirectionExpression:
                {
                    VisitPrefixUnaryExpression((PrefixUnaryExpressionSyntax)node);
                    break;
                }

                case SyntaxKind.QualifiedName:
                {
                    VisitQualifiedName((QualifiedNameSyntax)node);
                    break;
                }

                case SyntaxKind.QueryExpression:
                {
                    VisitQueryExpression((QueryExpressionSyntax)node);
                    break;
                }

                case SyntaxKind.RefExpression:
                {
                    VisitRefExpression((RefExpressionSyntax)node);
                    break;
                }

                case SyntaxKind.RefTypeExpression:
                {
                    VisitRefTypeExpression((RefTypeExpressionSyntax)node);
                    break;
                }

                case SyntaxKind.RefType:
                {
                    VisitRefType((RefTypeSyntax)node);
                    break;
                }

                case SyntaxKind.RefValueExpression:
                {
                    VisitRefValueExpression((RefValueExpressionSyntax)node);
                    break;
                }

                case SyntaxKind.SimpleLambdaExpression:
                {
                    VisitSimpleLambdaExpression((SimpleLambdaExpressionSyntax)node);
                    break;
                }

                case SyntaxKind.SizeOfExpression:
                {
                    VisitSizeOfExpression((SizeOfExpressionSyntax)node);
                    break;
                }

                case SyntaxKind.StackAllocArrayCreationExpression:
                {
                    VisitStackAllocArrayCreationExpression((StackAllocArrayCreationExpressionSyntax)node);
                    break;
                }

                case SyntaxKind.ThisExpression:
                {
                    VisitThisExpression((ThisExpressionSyntax)node);
                    break;
                }

                case SyntaxKind.ThrowExpression:
                {
                    VisitThrowExpression((ThrowExpressionSyntax)node);
                    break;
                }

                case SyntaxKind.TupleExpression:
                {
                    VisitTupleExpression((TupleExpressionSyntax)node);
                    break;
                }

                case SyntaxKind.TupleType:
                {
                    VisitTupleType((TupleTypeSyntax)node);
                    break;
                }

                case SyntaxKind.TypeOfExpression:
                {
                    VisitTypeOfExpression((TypeOfExpressionSyntax)node);
                    break;
                }

                default:
                {
                    throw new InvalidOperationException();
                }
            }
        }

        protected virtual void VisitInterpolatedStringContent(InterpolatedStringContentSyntax node)
        {
            if (node == null)
            {
                return;
            }

            switch (node.Kind())
            {
                case SyntaxKind.InterpolatedStringText:
                {
                    VisitInterpolatedStringText((InterpolatedStringTextSyntax)node);
                    break;
                }

                case SyntaxKind.Interpolation:
                {
                    VisitInterpolation((InterpolationSyntax)node);
                    break;
                }

                default:
                {
                    throw new InvalidOperationException();
                }
            }
        }

        protected virtual void VisitMemberCref(MemberCrefSyntax node)
        {
            if (node == null)
            {
                return;
            }

            switch (node.Kind())
            {
                case SyntaxKind.ConversionOperatorMemberCref:
                {
                    VisitConversionOperatorMemberCref((ConversionOperatorMemberCrefSyntax)node);
                    break;
                }

                case SyntaxKind.IndexerMemberCref:
                {
                    VisitIndexerMemberCref((IndexerMemberCrefSyntax)node);
                    break;
                }

                case SyntaxKind.NameMemberCref:
                {
                    VisitNameMemberCref((NameMemberCrefSyntax)node);
                    break;
                }

                case SyntaxKind.OperatorMemberCref:
                {
                    VisitOperatorMemberCref((OperatorMemberCrefSyntax)node);
                    break;
                }

                default:
                {
                    throw new InvalidOperationException();
                }
            }
        }

        protected virtual void VisitMemberDeclaration(MemberDeclarationSyntax node)
        {
            if (node == null)
            {
                return;
            }

            switch (node.Kind())
            {
                case SyntaxKind.ClassDeclaration:
                {
                    VisitClassDeclaration((ClassDeclarationSyntax)node);
                    break;
                }

                case SyntaxKind.ConstructorDeclaration:
                {
                    VisitConstructorDeclaration((ConstructorDeclarationSyntax)node);
                    break;
                }

                case SyntaxKind.ConversionOperatorDeclaration:
                {
                    VisitConversionOperatorDeclaration((ConversionOperatorDeclarationSyntax)node);
                    break;
                }

                case SyntaxKind.DelegateDeclaration:
                {
                    VisitDelegateDeclaration((DelegateDeclarationSyntax)node);
                    break;
                }

                case SyntaxKind.DestructorDeclaration:
                {
                    VisitDestructorDeclaration((DestructorDeclarationSyntax)node);
                    break;
                }

                case SyntaxKind.EnumDeclaration:
                {
                    VisitEnumDeclaration((EnumDeclarationSyntax)node);
                    break;
                }

                case SyntaxKind.EnumMemberDeclaration:
                {
                    VisitEnumMemberDeclaration((EnumMemberDeclarationSyntax)node);
                    break;
                }

                case SyntaxKind.EventDeclaration:
                {
                    VisitEventDeclaration((EventDeclarationSyntax)node);
                    break;
                }

                case SyntaxKind.EventFieldDeclaration:
                {
                    VisitEventFieldDeclaration((EventFieldDeclarationSyntax)node);
                    break;
                }

                case SyntaxKind.FieldDeclaration:
                {
                    VisitFieldDeclaration((FieldDeclarationSyntax)node);
                    break;
                }

                case SyntaxKind.GlobalStatement:
                {
                    VisitGlobalStatement((GlobalStatementSyntax)node);
                    break;
                }

                case SyntaxKind.IncompleteMember:
                {
                    VisitIncompleteMember((IncompleteMemberSyntax)node);
                    break;
                }

                case SyntaxKind.IndexerDeclaration:
                {
                    VisitIndexerDeclaration((IndexerDeclarationSyntax)node);
                    break;
                }

                case SyntaxKind.InterfaceDeclaration:
                {
                    VisitInterfaceDeclaration((InterfaceDeclarationSyntax)node);
                    break;
                }

                case SyntaxKind.MethodDeclaration:
                {
                    VisitMethodDeclaration((MethodDeclarationSyntax)node);
                    break;
                }

                case SyntaxKind.NamespaceDeclaration:
                {
                    VisitNamespaceDeclaration((NamespaceDeclarationSyntax)node);
                    break;
                }

                case SyntaxKind.OperatorDeclaration:
                {
                    VisitOperatorDeclaration((OperatorDeclarationSyntax)node);
                    break;
                }

                case SyntaxKind.PropertyDeclaration:
                {
                    VisitPropertyDeclaration((PropertyDeclarationSyntax)node);
                    break;
                }

                case SyntaxKind.StructDeclaration:
                {
                    VisitStructDeclaration((StructDeclarationSyntax)node);
                    break;
                }

                default:
                {
                    throw new InvalidOperationException();
                }
            }
        }

        protected virtual void VisitPattern(PatternSyntax node)
        {
            if (node == null)
            {
                return;
            }

            switch (node.Kind())
            {
                case SyntaxKind.ConstantPattern:
                {
                    VisitConstantPattern((ConstantPatternSyntax)node);
                    break;
                }

                case SyntaxKind.DeclarationPattern:
                {
                    VisitDeclarationPattern((DeclarationPatternSyntax)node);
                    break;
                }

                default:
                {
                    throw new InvalidOperationException();
                }
            }
        }

        protected virtual void VisitQueryClause(QueryClauseSyntax node)
        {
            if (node == null)
            {
                return;
            }

            switch (node.Kind())
            {
                case SyntaxKind.FromClause:
                {
                    VisitFromClause((FromClauseSyntax)node);
                    break;
                }

                case SyntaxKind.JoinClause:
                {
                    VisitJoinClause((JoinClauseSyntax)node);
                    break;
                }

                case SyntaxKind.LetClause:
                {
                    VisitLetClause((LetClauseSyntax)node);
                    break;
                }

                case SyntaxKind.OrderByClause:
                {
                    VisitOrderByClause((OrderByClauseSyntax)node);
                    break;
                }

                case SyntaxKind.WhereClause:
                {
                    VisitWhereClause((WhereClauseSyntax)node);
                    break;
                }

                default:
                {
                    throw new InvalidOperationException();
                }
            }
        }

        protected virtual void VisitSelectOrGroupClause(SelectOrGroupClauseSyntax node)
        {
            if (node == null)
            {
                return;
            }

            switch (node.Kind())
            {
                case SyntaxKind.GroupClause:
                {
                    VisitGroupClause((GroupClauseSyntax)node);
                    break;
                }

                case SyntaxKind.SelectClause:
                {
                    VisitSelectClause((SelectClauseSyntax)node);
                    break;
                }

                default:
                {
                    throw new InvalidOperationException();
                }
            }
        }

        protected virtual void VisitStatement(StatementSyntax node)
        {
            if (node == null)
            {
                return;
            }

            switch (node.Kind())
            {
                case SyntaxKind.Block:
                {
                    VisitBlock((BlockSyntax)node);
                    break;
                }

                case SyntaxKind.BreakStatement:
                {
                    VisitBreakStatement((BreakStatementSyntax)node);
                    break;
                }

                case SyntaxKind.ContinueStatement:
                {
                    VisitContinueStatement((ContinueStatementSyntax)node);
                    break;
                }

                case SyntaxKind.DoStatement:
                {
                    VisitDoStatement((DoStatementSyntax)node);
                    break;
                }

                case SyntaxKind.EmptyStatement:
                {
                    VisitEmptyStatement((EmptyStatementSyntax)node);
                    break;
                }

                case SyntaxKind.ExpressionStatement:
                {
                    VisitExpressionStatement((ExpressionStatementSyntax)node);
                    break;
                }

                case SyntaxKind.FixedStatement:
                {
                    VisitFixedStatement((FixedStatementSyntax)node);
                    break;
                }

                case SyntaxKind.ForEachStatement:
                {
                    VisitForEachStatement((ForEachStatementSyntax)node);
                    break;
                }

                case SyntaxKind.ForEachVariableStatement:
                {
                    VisitForEachVariableStatement((ForEachVariableStatementSyntax)node);
                    break;
                }

                case SyntaxKind.ForStatement:
                {
                    VisitForStatement((ForStatementSyntax)node);
                    break;
                }

                case SyntaxKind.GotoStatement:
                case SyntaxKind.GotoCaseStatement:
                case SyntaxKind.GotoDefaultStatement:
                {
                    VisitGotoStatement((GotoStatementSyntax)node);
                    break;
                }

                case SyntaxKind.CheckedStatement:
                case SyntaxKind.UncheckedStatement:
                {
                    VisitCheckedStatement((CheckedStatementSyntax)node);
                    break;
                }

                case SyntaxKind.IfStatement:
                {
                    VisitIfStatement((IfStatementSyntax)node);
                    break;
                }

                case SyntaxKind.LabeledStatement:
                {
                    VisitLabeledStatement((LabeledStatementSyntax)node);
                    break;
                }

                case SyntaxKind.LocalDeclarationStatement:
                {
                    VisitLocalDeclarationStatement((LocalDeclarationStatementSyntax)node);
                    break;
                }

                case SyntaxKind.LocalFunctionStatement:
                {
                    VisitLocalFunctionStatement((LocalFunctionStatementSyntax)node);
                    break;
                }

                case SyntaxKind.LockStatement:
                {
                    VisitLockStatement((LockStatementSyntax)node);
                    break;
                }

                case SyntaxKind.ReturnStatement:
                {
                    VisitReturnStatement((ReturnStatementSyntax)node);
                    break;
                }

                case SyntaxKind.SwitchStatement:
                {
                    VisitSwitchStatement((SwitchStatementSyntax)node);
                    break;
                }

                case SyntaxKind.ThrowStatement:
                {
                    VisitThrowStatement((ThrowStatementSyntax)node);
                    break;
                }

                case SyntaxKind.TryStatement:
                {
                    VisitTryStatement((TryStatementSyntax)node);
                    break;
                }

                case SyntaxKind.UnsafeStatement:
                {
                    VisitUnsafeStatement((UnsafeStatementSyntax)node);
                    break;
                }

                case SyntaxKind.UsingStatement:
                {
                    VisitUsingStatement((UsingStatementSyntax)node);
                    break;
                }

                case SyntaxKind.WhileStatement:
                {
                    VisitWhileStatement((WhileStatementSyntax)node);
                    break;
                }

                case SyntaxKind.YieldBreakStatement:
                case SyntaxKind.YieldReturnStatement:
                {
                    VisitYieldStatement((YieldStatementSyntax)node);
                    break;
                }

                default:
                {
                    throw new InvalidOperationException();
                }
            }
        }

        protected virtual void VisitSwitchLabel(SwitchLabelSyntax node)
        {
            if (node == null)
            {
                return;
            }

            switch (node.Kind())
            {
                case SyntaxKind.CasePatternSwitchLabel:
                {
                    VisitCasePatternSwitchLabel((CasePatternSwitchLabelSyntax)node);
                    break;
                }

                case SyntaxKind.CaseSwitchLabel:
                {
                    VisitCaseSwitchLabel((CaseSwitchLabelSyntax)node);
                    break;
                }

                case SyntaxKind.DefaultSwitchLabel:
                {
                    VisitDefaultSwitchLabel((DefaultSwitchLabelSyntax)node);
                    break;
                }

                default:
                {
                    throw new InvalidOperationException();
                }
            }
        }

        protected virtual void VisitTypeParameterConstraint(TypeParameterConstraintSyntax node)
        {
            if (node == null)
            {
                return;
            }

            switch (node.Kind())
            {
                case SyntaxKind.ClassConstraint:
                case SyntaxKind.StructConstraint:
                {
                    VisitClassOrStructConstraint((ClassOrStructConstraintSyntax)node);
                    break;
                }

                case SyntaxKind.ConstructorConstraint:
                {
                    VisitConstructorConstraint((ConstructorConstraintSyntax)node);
                    break;
                }

                case SyntaxKind.TypeConstraint:
                {
                    VisitTypeConstraint((TypeConstraintSyntax)node);
                    break;
                }

                default:
                {
                    throw new InvalidOperationException();
                }
            }
        }

        protected virtual void VisitType(TypeSyntax node)
        {
            if (node == null)
            {
                return;
            }

            switch (node.Kind())
            {
                case SyntaxKind.AliasQualifiedName:
                {
                    VisitAliasQualifiedName((AliasQualifiedNameSyntax)node);
                    break;
                }

                case SyntaxKind.ArrayType:
                {
                    VisitArrayType((ArrayTypeSyntax)node);
                    break;
                }

                case SyntaxKind.GenericName:
                {
                    VisitGenericName((GenericNameSyntax)node);
                    break;
                }

                case SyntaxKind.IdentifierName:
                {
                    VisitIdentifierName((IdentifierNameSyntax)node);
                    break;
                }

                case SyntaxKind.NullableType:
                {
                    VisitNullableType((NullableTypeSyntax)node);
                    break;
                }

                case SyntaxKind.OmittedTypeArgument:
                {
                    VisitOmittedTypeArgument((OmittedTypeArgumentSyntax)node);
                    break;
                }

                case SyntaxKind.PointerType:
                {
                    VisitPointerType((PointerTypeSyntax)node);
                    break;
                }

                case SyntaxKind.PredefinedType:
                {
                    VisitPredefinedType((PredefinedTypeSyntax)node);
                    break;
                }

                case SyntaxKind.QualifiedName:
                {
                    VisitQualifiedName((QualifiedNameSyntax)node);
                    break;
                }

                case SyntaxKind.RefType:
                {
                    VisitRefType((RefTypeSyntax)node);
                    break;
                }

                case SyntaxKind.TupleType:
                {
                    VisitTupleType((TupleTypeSyntax)node);
                    break;
                }

                default:
                {
                    throw new InvalidOperationException();
                }
            }
        }

        protected virtual void VisitVariableDesignation(VariableDesignationSyntax node)
        {
            if (node == null)
            {
                return;
            }

            switch (node.Kind())
            {
                case SyntaxKind.DiscardDesignation:
                {
                    VisitDiscardDesignation((DiscardDesignationSyntax)node);
                    break;
                }

                case SyntaxKind.ParenthesizedVariableDesignation:
                {
                    VisitParenthesizedVariableDesignation((ParenthesizedVariableDesignationSyntax)node);
                    break;
                }

                case SyntaxKind.SingleVariableDesignation:
                {
                    VisitSingleVariableDesignation((SingleVariableDesignationSyntax)node);
                    break;
                }

                default:
                {
                    throw new InvalidOperationException();
                }
            }
        }

        protected virtual void VisitXmlAttribute(XmlAttributeSyntax node)
        {
            if (node == null)
            {
                return;
            }

            switch (node.Kind())
            {
                case SyntaxKind.XmlCrefAttribute:
                {
                    VisitXmlCrefAttribute((XmlCrefAttributeSyntax)node);
                    break;
                }

                case SyntaxKind.XmlNameAttribute:
                {
                    VisitXmlNameAttribute((XmlNameAttributeSyntax)node);
                    break;
                }

                case SyntaxKind.XmlTextAttribute:
                {
                    VisitXmlTextAttribute((XmlTextAttributeSyntax)node);
                    break;
                }

                default:
                {
                    throw new InvalidOperationException();
                }
            }
        }

        protected virtual void VisitXmlNode(XmlNodeSyntax node)
        {
            if (node == null)
            {
                return;
            }

            switch (node.Kind())
            {
                case SyntaxKind.XmlCDataSection:
                {
                    VisitXmlCDataSection((XmlCDataSectionSyntax)node);
                    break;
                }

                case SyntaxKind.XmlComment:
                {
                    VisitXmlComment((XmlCommentSyntax)node);
                    break;
                }

                case SyntaxKind.XmlElement:
                {
                    VisitXmlElement((XmlElementSyntax)node);
                    break;
                }

                case SyntaxKind.XmlEmptyElement:
                {
                    VisitXmlEmptyElement((XmlEmptyElementSyntax)node);
                    break;
                }

                case SyntaxKind.XmlProcessingInstruction:
                {
                    VisitXmlProcessingInstruction((XmlProcessingInstructionSyntax)node);
                    break;
                }

                case SyntaxKind.XmlText:
                {
                    VisitXmlText((XmlTextSyntax)node);
                    break;
                }

                default:
                {
                    throw new InvalidOperationException();
                }
            }
        }
    }
}