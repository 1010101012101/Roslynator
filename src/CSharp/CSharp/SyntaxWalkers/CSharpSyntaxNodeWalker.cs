// Copyright (c) Josef Pihrt. All rights reserved. Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

// <auto-generated>

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace Roslynator.CSharp.SyntaxWalkers
{
    public abstract class CSharpSyntaxNodeWalker : CSharpSyntaxWalker
    {
        protected CSharpSyntaxNodeWalker(): base (depth: SyntaxWalkerDepth.Node)
        {
        }

        private void VisitList<TNode>(SyntaxList<TNode> list)where TNode : SyntaxNode
        {
            foreach (TNode node in list)
                Visit(node);
        }

        private void VisitSeparatedList<TNode>(SeparatedSyntaxList<TNode> list)where TNode : SyntaxNode
        {
            foreach (TNode node in list)
                Visit(node);
        }

        private void VisitTokenList(SyntaxTokenList list)
        {
            foreach (SyntaxToken token in list)
                VisitToken(token);
        }

        protected virtual void VisitType(TypeSyntax node)
        {
            Visit(node);
        }

        public override void VisitAccessorDeclaration(AccessorDeclarationSyntax node)
        {
            VisitList(node.AttributeLists);
            VisitBlock(node.Body);
            VisitArrowExpressionClause(node.ExpressionBody);
        }

        public override void VisitAccessorList(AccessorListSyntax node)
        {
            VisitList(node.Accessors);
        }

        public override void VisitAliasQualifiedName(AliasQualifiedNameSyntax node)
        {
            VisitType(node.Alias);
            VisitType(node.Name);
        }

        public override void VisitAnonymousMethodExpression(AnonymousMethodExpressionSyntax node)
        {
            VisitBlock(node.Block);
            ParameterListSyntax parameterList = node.ParameterList;
            if (parameterList != null)
                VisitSeparatedList(parameterList.Parameters);
            Visit(node.Body);
        }

        public override void VisitAnonymousObjectCreationExpression(AnonymousObjectCreationExpressionSyntax node)
        {
            VisitSeparatedList(node.Initializers);
        }

        public override void VisitAnonymousObjectMemberDeclarator(AnonymousObjectMemberDeclaratorSyntax node)
        {
            VisitNameEquals(node.NameEquals);
            Visit(node.Expression);
        }

        public override void VisitArgument(ArgumentSyntax node)
        {
            VisitNameColon(node.NameColon);
            Visit(node.Expression);
        }

        public override void VisitArgumentList(ArgumentListSyntax node)
        {
            VisitSeparatedList(node.Arguments);
        }

        public override void VisitArrayCreationExpression(ArrayCreationExpressionSyntax node)
        {
            VisitArrayType(node.Type);
            Visit(node.Initializer);
        }

        public override void VisitArrayRankSpecifier(ArrayRankSpecifierSyntax node)
        {
            VisitSeparatedList(node.Sizes);
        }

        public override void VisitArrayType(ArrayTypeSyntax node)
        {
            VisitType(node.ElementType);
            VisitList(node.RankSpecifiers);
        }

        public override void VisitArrowExpressionClause(ArrowExpressionClauseSyntax node)
        {
            Visit(node.Expression);
        }

        public override void VisitAssignmentExpression(AssignmentExpressionSyntax node)
        {
            Visit(node.Left);
            Visit(node.Right);
        }

        public override void VisitAttribute(AttributeSyntax node)
        {
            VisitType(node.Name);
            AttributeArgumentListSyntax argumentList = node.ArgumentList;
            if (argumentList != null)
                VisitSeparatedList(argumentList.Arguments);
        }

        public override void VisitAttributeArgument(AttributeArgumentSyntax node)
        {
            VisitNameEquals(node.NameEquals);
            VisitNameColon(node.NameColon);
            Visit(node.Expression);
        }

        public override void VisitAttributeArgumentList(AttributeArgumentListSyntax node)
        {
            VisitSeparatedList(node.Arguments);
        }

        public override void VisitAttributeList(AttributeListSyntax node)
        {
            VisitAttributeTargetSpecifier(node.Target);
            VisitSeparatedList(node.Attributes);
        }

        public override void VisitAttributeTargetSpecifier(AttributeTargetSpecifierSyntax node)
        {
        }

        public override void VisitAwaitExpression(AwaitExpressionSyntax node)
        {
            Visit(node.Expression);
        }

        public override void VisitBadDirectiveTrivia(BadDirectiveTriviaSyntax node)
        {
        }

        public override void VisitBaseExpression(BaseExpressionSyntax node)
        {
        }

        public override void VisitBaseList(BaseListSyntax node)
        {
            VisitSeparatedList(node.Types);
        }

        public override void VisitBinaryExpression(BinaryExpressionSyntax node)
        {
            Visit(node.Left);
            Visit(node.Right);
        }

        public override void VisitBlock(BlockSyntax node)
        {
            VisitList(node.Statements);
        }

        public override void VisitBracketedArgumentList(BracketedArgumentListSyntax node)
        {
            VisitSeparatedList(node.Arguments);
        }

        public override void VisitBracketedParameterList(BracketedParameterListSyntax node)
        {
            VisitSeparatedList(node.Parameters);
        }

        public override void VisitBreakStatement(BreakStatementSyntax node)
        {
        }

        public override void VisitCasePatternSwitchLabel(CasePatternSwitchLabelSyntax node)
        {
            Visit(node.Pattern);
            VisitWhenClause(node.WhenClause);
        }

        public override void VisitCaseSwitchLabel(CaseSwitchLabelSyntax node)
        {
            Visit(node.Value);
        }

        public override void VisitCastExpression(CastExpressionSyntax node)
        {
            VisitType(node.Type);
            Visit(node.Expression);
        }

        public override void VisitCatchClause(CatchClauseSyntax node)
        {
            VisitCatchDeclaration(node.Declaration);
            VisitCatchFilterClause(node.Filter);
            VisitBlock(node.Block);
        }

        public override void VisitCatchDeclaration(CatchDeclarationSyntax node)
        {
            VisitType(node.Type);
        }

        public override void VisitCatchFilterClause(CatchFilterClauseSyntax node)
        {
            Visit(node.FilterExpression);
        }

        public override void VisitClassDeclaration(ClassDeclarationSyntax node)
        {
            VisitList(node.AttributeLists);
            TypeParameterListSyntax typeParameterList = node.TypeParameterList;
            if (typeParameterList != null)
                VisitSeparatedList(typeParameterList.Parameters);
            VisitBaseList(node.BaseList);
            VisitList(node.ConstraintClauses);
            VisitList(node.Members);
        }

        public override void VisitClassOrStructConstraint(ClassOrStructConstraintSyntax node)
        {
        }

        public override void VisitCompilationUnit(CompilationUnitSyntax node)
        {
            VisitList(node.Externs);
            VisitList(node.Usings);
            VisitList(node.AttributeLists);
            VisitList(node.Members);
        }

        public override void VisitConditionalAccessExpression(ConditionalAccessExpressionSyntax node)
        {
            Visit(node.Expression);
            Visit(node.WhenNotNull);
        }

        public override void VisitConditionalExpression(ConditionalExpressionSyntax node)
        {
            Visit(node.Condition);
            Visit(node.WhenTrue);
            Visit(node.WhenFalse);
        }

        public override void VisitConstantPattern(ConstantPatternSyntax node)
        {
            Visit(node.Expression);
        }

        public override void VisitConstructorConstraint(ConstructorConstraintSyntax node)
        {
        }

        public override void VisitConstructorDeclaration(ConstructorDeclarationSyntax node)
        {
            VisitList(node.AttributeLists);
            ParameterListSyntax parameterList = node.ParameterList;
            if (parameterList != null)
                VisitSeparatedList(parameterList.Parameters);
            VisitConstructorInitializer(node.Initializer);
            VisitBlock(node.Body);
            VisitArrowExpressionClause(node.ExpressionBody);
        }

        public override void VisitConstructorInitializer(ConstructorInitializerSyntax node)
        {
            ArgumentListSyntax argumentList = node.ArgumentList;
            if (argumentList != null)
                VisitSeparatedList(argumentList.Arguments);
        }

        public override void VisitContinueStatement(ContinueStatementSyntax node)
        {
        }

        public override void VisitConversionOperatorDeclaration(ConversionOperatorDeclarationSyntax node)
        {
            VisitList(node.AttributeLists);
            VisitType(node.Type);
            ParameterListSyntax parameterList = node.ParameterList;
            if (parameterList != null)
                VisitSeparatedList(parameterList.Parameters);
            VisitBlock(node.Body);
            VisitArrowExpressionClause(node.ExpressionBody);
        }

        public override void VisitConversionOperatorMemberCref(ConversionOperatorMemberCrefSyntax node)
        {
            VisitType(node.Type);
            VisitCrefParameterList(node.Parameters);
        }

        public override void VisitCrefBracketedParameterList(CrefBracketedParameterListSyntax node)
        {
            VisitSeparatedList(node.Parameters);
        }

        public override void VisitCrefParameter(CrefParameterSyntax node)
        {
            VisitType(node.Type);
        }

        public override void VisitCrefParameterList(CrefParameterListSyntax node)
        {
            VisitSeparatedList(node.Parameters);
        }

        public override void VisitDeclarationExpression(DeclarationExpressionSyntax node)
        {
            VisitType(node.Type);
            Visit(node.Designation);
        }

        public override void VisitDeclarationPattern(DeclarationPatternSyntax node)
        {
            VisitType(node.Type);
            Visit(node.Designation);
        }

        public override void VisitDefaultExpression(DefaultExpressionSyntax node)
        {
            VisitType(node.Type);
        }

        public override void VisitDefaultSwitchLabel(DefaultSwitchLabelSyntax node)
        {
        }

        public override void VisitDefineDirectiveTrivia(DefineDirectiveTriviaSyntax node)
        {
        }

        public override void VisitDelegateDeclaration(DelegateDeclarationSyntax node)
        {
            VisitList(node.AttributeLists);
            VisitType(node.ReturnType);
            TypeParameterListSyntax typeParameterList = node.TypeParameterList;
            if (typeParameterList != null)
                VisitSeparatedList(typeParameterList.Parameters);
            ParameterListSyntax parameterList = node.ParameterList;
            if (parameterList != null)
                VisitSeparatedList(parameterList.Parameters);
            VisitList(node.ConstraintClauses);
        }

        public override void VisitDestructorDeclaration(DestructorDeclarationSyntax node)
        {
            VisitList(node.AttributeLists);
            ParameterListSyntax parameterList = node.ParameterList;
            if (parameterList != null)
                VisitSeparatedList(parameterList.Parameters);
            VisitBlock(node.Body);
            VisitArrowExpressionClause(node.ExpressionBody);
        }

        public override void VisitDiscardDesignation(DiscardDesignationSyntax node)
        {
        }

        public override void VisitDocumentationCommentTrivia(DocumentationCommentTriviaSyntax node)
        {
            VisitList(node.Content);
        }

        public override void VisitDoStatement(DoStatementSyntax node)
        {
            Visit(node.Statement);
            Visit(node.Condition);
        }

        public override void VisitElementAccessExpression(ElementAccessExpressionSyntax node)
        {
            Visit(node.Expression);
            BracketedArgumentListSyntax argumentList = node.ArgumentList;
            if (argumentList != null)
                VisitSeparatedList(argumentList.Arguments);
        }

        public override void VisitElementBindingExpression(ElementBindingExpressionSyntax node)
        {
            BracketedArgumentListSyntax argumentList = node.ArgumentList;
            if (argumentList != null)
                VisitSeparatedList(argumentList.Arguments);
        }

        public override void VisitElifDirectiveTrivia(ElifDirectiveTriviaSyntax node)
        {
            Visit(node.Condition);
        }

        public override void VisitElseClause(ElseClauseSyntax node)
        {
            Visit(node.Statement);
        }

        public override void VisitElseDirectiveTrivia(ElseDirectiveTriviaSyntax node)
        {
        }

        public override void VisitEmptyStatement(EmptyStatementSyntax node)
        {
        }

        public override void VisitEndIfDirectiveTrivia(EndIfDirectiveTriviaSyntax node)
        {
        }

        public override void VisitEndRegionDirectiveTrivia(EndRegionDirectiveTriviaSyntax node)
        {
        }

        public override void VisitEnumDeclaration(EnumDeclarationSyntax node)
        {
            VisitList(node.AttributeLists);
            VisitBaseList(node.BaseList);
            VisitSeparatedList(node.Members);
        }

        public override void VisitEnumMemberDeclaration(EnumMemberDeclarationSyntax node)
        {
            VisitList(node.AttributeLists);
            VisitEqualsValueClause(node.EqualsValue);
        }

        public override void VisitEqualsValueClause(EqualsValueClauseSyntax node)
        {
            Visit(node.Value);
        }

        public override void VisitErrorDirectiveTrivia(ErrorDirectiveTriviaSyntax node)
        {
        }

        public override void VisitEventDeclaration(EventDeclarationSyntax node)
        {
            VisitList(node.AttributeLists);
            VisitType(node.Type);
            VisitExplicitInterfaceSpecifier(node.ExplicitInterfaceSpecifier);
            AccessorListSyntax accessorList = node.AccessorList;
            if (accessorList != null)
                VisitList(accessorList.Accessors);
        }

        public override void VisitEventFieldDeclaration(EventFieldDeclarationSyntax node)
        {
            VisitList(node.AttributeLists);
            VisitVariableDeclaration(node.Declaration);
        }

        public override void VisitExplicitInterfaceSpecifier(ExplicitInterfaceSpecifierSyntax node)
        {
            VisitType(node.Name);
        }

        public override void VisitExpressionStatement(ExpressionStatementSyntax node)
        {
            Visit(node.Expression);
        }

        public override void VisitExternAliasDirective(ExternAliasDirectiveSyntax node)
        {
        }

        public override void VisitFieldDeclaration(FieldDeclarationSyntax node)
        {
            VisitList(node.AttributeLists);
            VisitVariableDeclaration(node.Declaration);
        }

        public override void VisitFinallyClause(FinallyClauseSyntax node)
        {
            VisitBlock(node.Block);
        }

        public override void VisitFixedStatement(FixedStatementSyntax node)
        {
            VisitVariableDeclaration(node.Declaration);
            Visit(node.Statement);
        }

        public override void VisitForEachStatement(ForEachStatementSyntax node)
        {
            VisitType(node.Type);
            Visit(node.Expression);
            Visit(node.Statement);
        }

        public override void VisitForEachVariableStatement(ForEachVariableStatementSyntax node)
        {
            Visit(node.Variable);
            Visit(node.Expression);
            Visit(node.Statement);
        }

        public override void VisitForStatement(ForStatementSyntax node)
        {
            VisitVariableDeclaration(node.Declaration);
            VisitSeparatedList(node.Initializers);
            Visit(node.Condition);
            VisitSeparatedList(node.Incrementors);
            Visit(node.Statement);
        }

        public override void VisitFromClause(FromClauseSyntax node)
        {
            VisitType(node.Type);
            Visit(node.Expression);
        }

        public override void VisitGenericName(GenericNameSyntax node)
        {
            TypeArgumentListSyntax typeArgumentList = node.TypeArgumentList;
            if (typeArgumentList != null)
                VisitSeparatedList(typeArgumentList.Arguments);
        }

        public override void VisitGlobalStatement(GlobalStatementSyntax node)
        {
            Visit(node.Statement);
        }

        public override void VisitGotoStatement(GotoStatementSyntax node)
        {
            Visit(node.Expression);
        }

        public override void VisitGroupClause(GroupClauseSyntax node)
        {
            Visit(node.GroupExpression);
            Visit(node.ByExpression);
        }

        public override void VisitCheckedExpression(CheckedExpressionSyntax node)
        {
            Visit(node.Expression);
        }

        public override void VisitCheckedStatement(CheckedStatementSyntax node)
        {
            VisitBlock(node.Block);
        }

        public override void VisitIdentifierName(IdentifierNameSyntax node)
        {
        }

        public override void VisitIfDirectiveTrivia(IfDirectiveTriviaSyntax node)
        {
            Visit(node.Condition);
        }

        public override void VisitIfStatement(IfStatementSyntax node)
        {
            Visit(node.Condition);
            Visit(node.Statement);
            VisitElseClause(node.Else);
        }

        public override void VisitImplicitArrayCreationExpression(ImplicitArrayCreationExpressionSyntax node)
        {
            Visit(node.Initializer);
        }

        public override void VisitImplicitElementAccess(ImplicitElementAccessSyntax node)
        {
            BracketedArgumentListSyntax argumentList = node.ArgumentList;
            if (argumentList != null)
                VisitSeparatedList(argumentList.Arguments);
        }

        public override void VisitIncompleteMember(IncompleteMemberSyntax node)
        {
            VisitList(node.AttributeLists);
            VisitType(node.Type);
        }

        public override void VisitIndexerDeclaration(IndexerDeclarationSyntax node)
        {
            VisitList(node.AttributeLists);
            VisitType(node.Type);
            VisitExplicitInterfaceSpecifier(node.ExplicitInterfaceSpecifier);
            BracketedParameterListSyntax parameterList = node.ParameterList;
            if (parameterList != null)
                VisitSeparatedList(parameterList.Parameters);
            AccessorListSyntax accessorList = node.AccessorList;
            if (accessorList != null)
                VisitList(accessorList.Accessors);
            VisitArrowExpressionClause(node.ExpressionBody);
        }

        public override void VisitIndexerMemberCref(IndexerMemberCrefSyntax node)
        {
            VisitCrefBracketedParameterList(node.Parameters);
        }

        public override void VisitInitializerExpression(InitializerExpressionSyntax node)
        {
            VisitSeparatedList(node.Expressions);
        }

        public override void VisitInterfaceDeclaration(InterfaceDeclarationSyntax node)
        {
            VisitList(node.AttributeLists);
            TypeParameterListSyntax typeParameterList = node.TypeParameterList;
            if (typeParameterList != null)
                VisitSeparatedList(typeParameterList.Parameters);
            VisitBaseList(node.BaseList);
            VisitList(node.ConstraintClauses);
            VisitList(node.Members);
        }

        public override void VisitInterpolatedStringExpression(InterpolatedStringExpressionSyntax node)
        {
            VisitList(node.Contents);
        }

        public override void VisitInterpolatedStringText(InterpolatedStringTextSyntax node)
        {
        }

        public override void VisitInterpolation(InterpolationSyntax node)
        {
            Visit(node.Expression);
            VisitInterpolationAlignmentClause(node.AlignmentClause);
            VisitInterpolationFormatClause(node.FormatClause);
        }

        public override void VisitInterpolationAlignmentClause(InterpolationAlignmentClauseSyntax node)
        {
            Visit(node.Value);
        }

        public override void VisitInterpolationFormatClause(InterpolationFormatClauseSyntax node)
        {
        }

        public override void VisitInvocationExpression(InvocationExpressionSyntax node)
        {
            Visit(node.Expression);
            ArgumentListSyntax argumentList = node.ArgumentList;
            if (argumentList != null)
                VisitSeparatedList(argumentList.Arguments);
        }

        public override void VisitIsPatternExpression(IsPatternExpressionSyntax node)
        {
            Visit(node.Expression);
            Visit(node.Pattern);
        }

        public override void VisitJoinClause(JoinClauseSyntax node)
        {
            VisitType(node.Type);
            Visit(node.InExpression);
            Visit(node.LeftExpression);
            Visit(node.RightExpression);
            VisitJoinIntoClause(node.Into);
        }

        public override void VisitJoinIntoClause(JoinIntoClauseSyntax node)
        {
        }

        public override void VisitLabeledStatement(LabeledStatementSyntax node)
        {
            Visit(node.Statement);
        }

        public override void VisitLetClause(LetClauseSyntax node)
        {
            Visit(node.Expression);
        }

        public override void VisitLineDirectiveTrivia(LineDirectiveTriviaSyntax node)
        {
        }

        public override void VisitLiteralExpression(LiteralExpressionSyntax node)
        {
        }

        public override void VisitLoadDirectiveTrivia(LoadDirectiveTriviaSyntax node)
        {
        }

        public override void VisitLocalDeclarationStatement(LocalDeclarationStatementSyntax node)
        {
            VisitVariableDeclaration(node.Declaration);
        }

        public override void VisitLocalFunctionStatement(LocalFunctionStatementSyntax node)
        {
            VisitType(node.ReturnType);
            TypeParameterListSyntax typeParameterList = node.TypeParameterList;
            if (typeParameterList != null)
                VisitSeparatedList(typeParameterList.Parameters);
            ParameterListSyntax parameterList = node.ParameterList;
            if (parameterList != null)
                VisitSeparatedList(parameterList.Parameters);
            VisitList(node.ConstraintClauses);
            VisitBlock(node.Body);
            VisitArrowExpressionClause(node.ExpressionBody);
        }

        public override void VisitLockStatement(LockStatementSyntax node)
        {
            Visit(node.Expression);
            Visit(node.Statement);
        }

        public override void VisitMakeRefExpression(MakeRefExpressionSyntax node)
        {
            Visit(node.Expression);
        }

        public override void VisitMemberAccessExpression(MemberAccessExpressionSyntax node)
        {
            Visit(node.Expression);
            VisitType(node.Name);
        }

        public override void VisitMemberBindingExpression(MemberBindingExpressionSyntax node)
        {
            VisitType(node.Name);
        }

        public override void VisitMethodDeclaration(MethodDeclarationSyntax node)
        {
            VisitList(node.AttributeLists);
            VisitType(node.ReturnType);
            VisitExplicitInterfaceSpecifier(node.ExplicitInterfaceSpecifier);
            TypeParameterListSyntax typeParameterList = node.TypeParameterList;
            if (typeParameterList != null)
                VisitSeparatedList(typeParameterList.Parameters);
            ParameterListSyntax parameterList = node.ParameterList;
            if (parameterList != null)
                VisitSeparatedList(parameterList.Parameters);
            VisitList(node.ConstraintClauses);
            VisitBlock(node.Body);
            VisitArrowExpressionClause(node.ExpressionBody);
        }

        public override void VisitNameColon(NameColonSyntax node)
        {
            VisitType(node.Name);
        }

        public override void VisitNameEquals(NameEqualsSyntax node)
        {
            VisitType(node.Name);
        }

        public override void VisitNameMemberCref(NameMemberCrefSyntax node)
        {
            VisitType(node.Name);
            VisitCrefParameterList(node.Parameters);
        }

        public override void VisitNamespaceDeclaration(NamespaceDeclarationSyntax node)
        {
            VisitType(node.Name);
            VisitList(node.Externs);
            VisitList(node.Usings);
            VisitList(node.Members);
        }

        public override void VisitNullableType(NullableTypeSyntax node)
        {
            VisitType(node.ElementType);
        }

        public override void VisitObjectCreationExpression(ObjectCreationExpressionSyntax node)
        {
            VisitType(node.Type);
            ArgumentListSyntax argumentList = node.ArgumentList;
            if (argumentList != null)
                VisitSeparatedList(argumentList.Arguments);
            Visit(node.Initializer);
        }

        public override void VisitOmittedArraySizeExpression(OmittedArraySizeExpressionSyntax node)
        {
        }

        public override void VisitOmittedTypeArgument(OmittedTypeArgumentSyntax node)
        {
        }

        public override void VisitOperatorDeclaration(OperatorDeclarationSyntax node)
        {
            VisitList(node.AttributeLists);
            VisitType(node.ReturnType);
            ParameterListSyntax parameterList = node.ParameterList;
            if (parameterList != null)
                VisitSeparatedList(parameterList.Parameters);
            VisitBlock(node.Body);
            VisitArrowExpressionClause(node.ExpressionBody);
        }

        public override void VisitOperatorMemberCref(OperatorMemberCrefSyntax node)
        {
            VisitCrefParameterList(node.Parameters);
        }

        public override void VisitOrderByClause(OrderByClauseSyntax node)
        {
            VisitSeparatedList(node.Orderings);
        }

        public override void VisitOrdering(OrderingSyntax node)
        {
            Visit(node.Expression);
        }

        public override void VisitParameter(ParameterSyntax node)
        {
            VisitList(node.AttributeLists);
            VisitType(node.Type);
            VisitEqualsValueClause(node.Default);
        }

        public override void VisitParameterList(ParameterListSyntax node)
        {
            VisitSeparatedList(node.Parameters);
        }

        public override void VisitParenthesizedExpression(ParenthesizedExpressionSyntax node)
        {
            Visit(node.Expression);
        }

        public override void VisitParenthesizedLambdaExpression(ParenthesizedLambdaExpressionSyntax node)
        {
            ParameterListSyntax parameterList = node.ParameterList;
            if (parameterList != null)
                VisitSeparatedList(parameterList.Parameters);
            Visit(node.Body);
        }

        public override void VisitParenthesizedVariableDesignation(ParenthesizedVariableDesignationSyntax node)
        {
            VisitSeparatedList(node.Variables);
        }

        public override void VisitPointerType(PointerTypeSyntax node)
        {
            VisitType(node.ElementType);
        }

        public override void VisitPostfixUnaryExpression(PostfixUnaryExpressionSyntax node)
        {
            Visit(node.Operand);
        }

        public override void VisitPragmaChecksumDirectiveTrivia(PragmaChecksumDirectiveTriviaSyntax node)
        {
        }

        public override void VisitPragmaWarningDirectiveTrivia(PragmaWarningDirectiveTriviaSyntax node)
        {
            VisitSeparatedList(node.ErrorCodes);
        }

        public override void VisitPredefinedType(PredefinedTypeSyntax node)
        {
        }

        public override void VisitPrefixUnaryExpression(PrefixUnaryExpressionSyntax node)
        {
            Visit(node.Operand);
        }

        public override void VisitPropertyDeclaration(PropertyDeclarationSyntax node)
        {
            VisitList(node.AttributeLists);
            VisitType(node.Type);
            VisitExplicitInterfaceSpecifier(node.ExplicitInterfaceSpecifier);
            AccessorListSyntax accessorList = node.AccessorList;
            if (accessorList != null)
                VisitList(accessorList.Accessors);
            VisitArrowExpressionClause(node.ExpressionBody);
            VisitEqualsValueClause(node.Initializer);
        }

        public override void VisitQualifiedCref(QualifiedCrefSyntax node)
        {
            VisitType(node.Container);
            Visit(node.Member);
        }

        public override void VisitQualifiedName(QualifiedNameSyntax node)
        {
            VisitType(node.Left);
            VisitType(node.Right);
        }

        public override void VisitQueryBody(QueryBodySyntax node)
        {
            VisitList(node.Clauses);
            Visit(node.SelectOrGroup);
            VisitQueryContinuation(node.Continuation);
        }

        public override void VisitQueryContinuation(QueryContinuationSyntax node)
        {
            VisitQueryBody(node.Body);
        }

        public override void VisitQueryExpression(QueryExpressionSyntax node)
        {
            VisitFromClause(node.FromClause);
            VisitQueryBody(node.Body);
        }

        public override void VisitReferenceDirectiveTrivia(ReferenceDirectiveTriviaSyntax node)
        {
        }

        public override void VisitRefExpression(RefExpressionSyntax node)
        {
            Visit(node.Expression);
        }

        public override void VisitRefType(RefTypeSyntax node)
        {
            VisitType(node.Type);
        }

        public override void VisitRefTypeExpression(RefTypeExpressionSyntax node)
        {
            Visit(node.Expression);
        }

        public override void VisitRefValueExpression(RefValueExpressionSyntax node)
        {
            Visit(node.Expression);
            VisitType(node.Type);
        }

        public override void VisitRegionDirectiveTrivia(RegionDirectiveTriviaSyntax node)
        {
        }

        public override void VisitReturnStatement(ReturnStatementSyntax node)
        {
            Visit(node.Expression);
        }

        public override void VisitSelectClause(SelectClauseSyntax node)
        {
            Visit(node.Expression);
        }

        public override void VisitShebangDirectiveTrivia(ShebangDirectiveTriviaSyntax node)
        {
        }

        public override void VisitSimpleBaseType(SimpleBaseTypeSyntax node)
        {
            VisitType(node.Type);
        }

        public override void VisitSimpleLambdaExpression(SimpleLambdaExpressionSyntax node)
        {
            VisitParameter(node.Parameter);
            Visit(node.Body);
        }

        public override void VisitSingleVariableDesignation(SingleVariableDesignationSyntax node)
        {
        }

        public override void VisitSizeOfExpression(SizeOfExpressionSyntax node)
        {
            VisitType(node.Type);
        }

        public override void VisitSkippedTokensTrivia(SkippedTokensTriviaSyntax node)
        {
        }

        public override void VisitStackAllocArrayCreationExpression(StackAllocArrayCreationExpressionSyntax node)
        {
            VisitType(node.Type);
        }

        public override void VisitStructDeclaration(StructDeclarationSyntax node)
        {
            VisitList(node.AttributeLists);
            TypeParameterListSyntax typeParameterList = node.TypeParameterList;
            if (typeParameterList != null)
                VisitSeparatedList(typeParameterList.Parameters);
            VisitBaseList(node.BaseList);
            VisitList(node.ConstraintClauses);
            VisitList(node.Members);
        }

        public override void VisitSwitchSection(SwitchSectionSyntax node)
        {
            VisitList(node.Labels);
            VisitList(node.Statements);
        }

        public override void VisitSwitchStatement(SwitchStatementSyntax node)
        {
            Visit(node.Expression);
            VisitList(node.Sections);
        }

        public override void VisitThisExpression(ThisExpressionSyntax node)
        {
        }

        public override void VisitThrowExpression(ThrowExpressionSyntax node)
        {
            Visit(node.Expression);
        }

        public override void VisitThrowStatement(ThrowStatementSyntax node)
        {
            Visit(node.Expression);
        }

        public override void VisitTryStatement(TryStatementSyntax node)
        {
            VisitBlock(node.Block);
            VisitList(node.Catches);
            VisitFinallyClause(node.Finally);
        }

        public override void VisitTupleElement(TupleElementSyntax node)
        {
            VisitType(node.Type);
        }

        public override void VisitTupleExpression(TupleExpressionSyntax node)
        {
            VisitSeparatedList(node.Arguments);
        }

        public override void VisitTupleType(TupleTypeSyntax node)
        {
            VisitSeparatedList(node.Elements);
        }

        public override void VisitTypeArgumentList(TypeArgumentListSyntax node)
        {
            VisitSeparatedList(node.Arguments);
        }

        public override void VisitTypeConstraint(TypeConstraintSyntax node)
        {
            VisitType(node.Type);
        }

        public override void VisitTypeCref(TypeCrefSyntax node)
        {
            VisitType(node.Type);
        }

        public override void VisitTypeOfExpression(TypeOfExpressionSyntax node)
        {
            VisitType(node.Type);
        }

        public override void VisitTypeParameter(TypeParameterSyntax node)
        {
            VisitList(node.AttributeLists);
        }

        public override void VisitTypeParameterConstraintClause(TypeParameterConstraintClauseSyntax node)
        {
            VisitType(node.Name);
            VisitSeparatedList(node.Constraints);
        }

        public override void VisitTypeParameterList(TypeParameterListSyntax node)
        {
            VisitSeparatedList(node.Parameters);
        }

        public override void VisitUndefDirectiveTrivia(UndefDirectiveTriviaSyntax node)
        {
        }

        public override void VisitUnsafeStatement(UnsafeStatementSyntax node)
        {
            VisitBlock(node.Block);
        }

        public override void VisitUsingDirective(UsingDirectiveSyntax node)
        {
            VisitNameEquals(node.Alias);
            VisitType(node.Name);
        }

        public override void VisitUsingStatement(UsingStatementSyntax node)
        {
            VisitVariableDeclaration(node.Declaration);
            Visit(node.Expression);
            Visit(node.Statement);
        }

        public override void VisitVariableDeclaration(VariableDeclarationSyntax node)
        {
            VisitType(node.Type);
            VisitSeparatedList(node.Variables);
        }

        public override void VisitVariableDeclarator(VariableDeclaratorSyntax node)
        {
            BracketedArgumentListSyntax argumentList = node.ArgumentList;
            if (argumentList != null)
                VisitSeparatedList(argumentList.Arguments);
            VisitEqualsValueClause(node.Initializer);
        }

        public override void VisitWarningDirectiveTrivia(WarningDirectiveTriviaSyntax node)
        {
        }

        public override void VisitWhenClause(WhenClauseSyntax node)
        {
            Visit(node.Condition);
        }

        public override void VisitWhereClause(WhereClauseSyntax node)
        {
            Visit(node.Condition);
        }

        public override void VisitWhileStatement(WhileStatementSyntax node)
        {
            Visit(node.Condition);
            Visit(node.Statement);
        }

        public override void VisitXmlCDataSection(XmlCDataSectionSyntax node)
        {
        }

        public override void VisitXmlComment(XmlCommentSyntax node)
        {
        }

        public override void VisitXmlCrefAttribute(XmlCrefAttributeSyntax node)
        {
            VisitXmlName(node.Name);
            Visit(node.Cref);
        }

        public override void VisitXmlElement(XmlElementSyntax node)
        {
            VisitXmlElementStartTag(node.StartTag);
            VisitList(node.Content);
            VisitXmlElementEndTag(node.EndTag);
        }

        public override void VisitXmlElementEndTag(XmlElementEndTagSyntax node)
        {
            VisitXmlName(node.Name);
        }

        public override void VisitXmlElementStartTag(XmlElementStartTagSyntax node)
        {
            VisitXmlName(node.Name);
            VisitList(node.Attributes);
        }

        public override void VisitXmlEmptyElement(XmlEmptyElementSyntax node)
        {
            VisitXmlName(node.Name);
            VisitList(node.Attributes);
        }

        public override void VisitXmlName(XmlNameSyntax node)
        {
            VisitXmlPrefix(node.Prefix);
        }

        public override void VisitXmlNameAttribute(XmlNameAttributeSyntax node)
        {
            VisitXmlName(node.Name);
            VisitType(node.Identifier);
        }

        public override void VisitXmlPrefix(XmlPrefixSyntax node)
        {
        }

        public override void VisitXmlProcessingInstruction(XmlProcessingInstructionSyntax node)
        {
            VisitXmlName(node.Name);
        }

        public override void VisitXmlText(XmlTextSyntax node)
        {
        }

        public override void VisitXmlTextAttribute(XmlTextAttributeSyntax node)
        {
            VisitXmlName(node.Name);
        }

        public override void VisitYieldStatement(YieldStatementSyntax node)
        {
            Visit(node.Expression);
        }
    }
}