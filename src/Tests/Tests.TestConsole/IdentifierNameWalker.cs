// Copyright (c) Josef Pihrt. All rights reserved. Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

// <auto-generated>

using System;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace Roslynator.CSharp.SyntaxWalkers
{
    public abstract class IdentifierNameWalker
    {
        protected IdentifierNameWalker()
        {
        }

        protected virtual bool ShouldVisit
        {
            get
            {
                return true;
            }
        }

        public void Visit(SyntaxNode node)
        {
            switch (node.Kind())
            {
                case SyntaxKind.GetAccessorDeclaration:
                case SyntaxKind.SetAccessorDeclaration:
                case SyntaxKind.AddAccessorDeclaration:
                case SyntaxKind.RemoveAccessorDeclaration:
                case SyntaxKind.UnknownAccessorDeclaration:
                    VisitAccessorDeclaration((AccessorDeclarationSyntax)node);
                    break;
                case SyntaxKind.AccessorList:
                    VisitAccessorList((AccessorListSyntax)node);
                    break;
                case SyntaxKind.AliasQualifiedName:
                    VisitAliasQualifiedName((AliasQualifiedNameSyntax)node);
                    break;
                case SyntaxKind.AnonymousMethodExpression:
                    VisitAnonymousMethodExpression((AnonymousMethodExpressionSyntax)node);
                    break;
                case SyntaxKind.AnonymousObjectCreationExpression:
                    VisitAnonymousObjectCreationExpression((AnonymousObjectCreationExpressionSyntax)node);
                    break;
                case SyntaxKind.AnonymousObjectMemberDeclarator:
                    VisitAnonymousObjectMemberDeclarator((AnonymousObjectMemberDeclaratorSyntax)node);
                    break;
                case SyntaxKind.ArgumentList:
                    VisitArgumentList((ArgumentListSyntax)node);
                    break;
                case SyntaxKind.Argument:
                    VisitArgument((ArgumentSyntax)node);
                    break;
                case SyntaxKind.ArrayCreationExpression:
                    VisitArrayCreationExpression((ArrayCreationExpressionSyntax)node);
                    break;
                case SyntaxKind.ArrayRankSpecifier:
                    VisitArrayRankSpecifier((ArrayRankSpecifierSyntax)node);
                    break;
                case SyntaxKind.ArrayType:
                    VisitArrayType((ArrayTypeSyntax)node);
                    break;
                case SyntaxKind.ArrowExpressionClause:
                    VisitArrowExpressionClause((ArrowExpressionClauseSyntax)node);
                    break;
                case SyntaxKind.SimpleAssignmentExpression:
                case SyntaxKind.AddAssignmentExpression:
                case SyntaxKind.SubtractAssignmentExpression:
                case SyntaxKind.MultiplyAssignmentExpression:
                case SyntaxKind.DivideAssignmentExpression:
                case SyntaxKind.ModuloAssignmentExpression:
                case SyntaxKind.AndAssignmentExpression:
                case SyntaxKind.ExclusiveOrAssignmentExpression:
                case SyntaxKind.OrAssignmentExpression:
                case SyntaxKind.LeftShiftAssignmentExpression:
                case SyntaxKind.RightShiftAssignmentExpression:
                    VisitAssignmentExpression((AssignmentExpressionSyntax)node);
                    break;
                case SyntaxKind.AttributeArgumentList:
                    VisitAttributeArgumentList((AttributeArgumentListSyntax)node);
                    break;
                case SyntaxKind.AttributeArgument:
                    VisitAttributeArgument((AttributeArgumentSyntax)node);
                    break;
                case SyntaxKind.AttributeList:
                    VisitAttributeList((AttributeListSyntax)node);
                    break;
                case SyntaxKind.Attribute:
                    VisitAttribute((AttributeSyntax)node);
                    break;
                case SyntaxKind.AttributeTargetSpecifier:
                    VisitAttributeTargetSpecifier((AttributeTargetSpecifierSyntax)node);
                    break;
                case SyntaxKind.AwaitExpression:
                    VisitAwaitExpression((AwaitExpressionSyntax)node);
                    break;
                case SyntaxKind.BadDirectiveTrivia:
                    VisitBadDirectiveTrivia((BadDirectiveTriviaSyntax)node);
                    break;
                case SyntaxKind.BaseExpression:
                    VisitBaseExpression((BaseExpressionSyntax)node);
                    break;
                case SyntaxKind.BaseList:
                    VisitBaseList((BaseListSyntax)node);
                    break;
                case SyntaxKind.AddExpression:
                case SyntaxKind.SubtractExpression:
                case SyntaxKind.MultiplyExpression:
                case SyntaxKind.DivideExpression:
                case SyntaxKind.ModuloExpression:
                case SyntaxKind.LeftShiftExpression:
                case SyntaxKind.RightShiftExpression:
                case SyntaxKind.LogicalOrExpression:
                case SyntaxKind.LogicalAndExpression:
                case SyntaxKind.BitwiseOrExpression:
                case SyntaxKind.BitwiseAndExpression:
                case SyntaxKind.ExclusiveOrExpression:
                case SyntaxKind.EqualsExpression:
                case SyntaxKind.NotEqualsExpression:
                case SyntaxKind.LessThanExpression:
                case SyntaxKind.LessThanOrEqualExpression:
                case SyntaxKind.GreaterThanExpression:
                case SyntaxKind.GreaterThanOrEqualExpression:
                case SyntaxKind.IsExpression:
                case SyntaxKind.AsExpression:
                case SyntaxKind.CoalesceExpression:
                    VisitBinaryExpression((BinaryExpressionSyntax)node);
                    break;
                case SyntaxKind.Block:
                    VisitBlock((BlockSyntax)node);
                    break;
                case SyntaxKind.BracketedArgumentList:
                    VisitBracketedArgumentList((BracketedArgumentListSyntax)node);
                    break;
                case SyntaxKind.BracketedParameterList:
                    VisitBracketedParameterList((BracketedParameterListSyntax)node);
                    break;
                case SyntaxKind.BreakStatement:
                    VisitBreakStatement((BreakStatementSyntax)node);
                    break;
                case SyntaxKind.CasePatternSwitchLabel:
                    VisitCasePatternSwitchLabel((CasePatternSwitchLabelSyntax)node);
                    break;
                case SyntaxKind.CaseSwitchLabel:
                    VisitCaseSwitchLabel((CaseSwitchLabelSyntax)node);
                    break;
                case SyntaxKind.CastExpression:
                    VisitCastExpression((CastExpressionSyntax)node);
                    break;
                case SyntaxKind.CatchClause:
                    VisitCatchClause((CatchClauseSyntax)node);
                    break;
                case SyntaxKind.CatchDeclaration:
                    VisitCatchDeclaration((CatchDeclarationSyntax)node);
                    break;
                case SyntaxKind.CatchFilterClause:
                    VisitCatchFilterClause((CatchFilterClauseSyntax)node);
                    break;
                case SyntaxKind.ClassDeclaration:
                    VisitClassDeclaration((ClassDeclarationSyntax)node);
                    break;
                case SyntaxKind.ClassConstraint:
                case SyntaxKind.StructConstraint:
                    VisitClassOrStructConstraint((ClassOrStructConstraintSyntax)node);
                    break;
                case SyntaxKind.CompilationUnit:
                    VisitCompilationUnit((CompilationUnitSyntax)node);
                    break;
                case SyntaxKind.ConditionalAccessExpression:
                    VisitConditionalAccessExpression((ConditionalAccessExpressionSyntax)node);
                    break;
                case SyntaxKind.ConditionalExpression:
                    VisitConditionalExpression((ConditionalExpressionSyntax)node);
                    break;
                case SyntaxKind.ConstantPattern:
                    VisitConstantPattern((ConstantPatternSyntax)node);
                    break;
                case SyntaxKind.ConstructorConstraint:
                    VisitConstructorConstraint((ConstructorConstraintSyntax)node);
                    break;
                case SyntaxKind.ConstructorDeclaration:
                    VisitConstructorDeclaration((ConstructorDeclarationSyntax)node);
                    break;
                case SyntaxKind.BaseConstructorInitializer:
                case SyntaxKind.ThisConstructorInitializer:
                    VisitConstructorInitializer((ConstructorInitializerSyntax)node);
                    break;
                case SyntaxKind.ContinueStatement:
                    VisitContinueStatement((ContinueStatementSyntax)node);
                    break;
                case SyntaxKind.ConversionOperatorDeclaration:
                    VisitConversionOperatorDeclaration((ConversionOperatorDeclarationSyntax)node);
                    break;
                case SyntaxKind.ConversionOperatorMemberCref:
                    VisitConversionOperatorMemberCref((ConversionOperatorMemberCrefSyntax)node);
                    break;
                case SyntaxKind.CrefBracketedParameterList:
                    VisitCrefBracketedParameterList((CrefBracketedParameterListSyntax)node);
                    break;
                case SyntaxKind.CrefParameterList:
                    VisitCrefParameterList((CrefParameterListSyntax)node);
                    break;
                case SyntaxKind.CrefParameter:
                    VisitCrefParameter((CrefParameterSyntax)node);
                    break;
                case SyntaxKind.DeclarationExpression:
                    VisitDeclarationExpression((DeclarationExpressionSyntax)node);
                    break;
                case SyntaxKind.DeclarationPattern:
                    VisitDeclarationPattern((DeclarationPatternSyntax)node);
                    break;
                case SyntaxKind.DefaultExpression:
                    VisitDefaultExpression((DefaultExpressionSyntax)node);
                    break;
                case SyntaxKind.DefaultSwitchLabel:
                    VisitDefaultSwitchLabel((DefaultSwitchLabelSyntax)node);
                    break;
                case SyntaxKind.DefineDirectiveTrivia:
                    VisitDefineDirectiveTrivia((DefineDirectiveTriviaSyntax)node);
                    break;
                case SyntaxKind.DelegateDeclaration:
                    VisitDelegateDeclaration((DelegateDeclarationSyntax)node);
                    break;
                case SyntaxKind.DestructorDeclaration:
                    VisitDestructorDeclaration((DestructorDeclarationSyntax)node);
                    break;
                case SyntaxKind.DiscardDesignation:
                    VisitDiscardDesignation((DiscardDesignationSyntax)node);
                    break;
                case SyntaxKind.SingleLineDocumentationCommentTrivia:
                case SyntaxKind.MultiLineDocumentationCommentTrivia:
                    VisitDocumentationCommentTrivia((DocumentationCommentTriviaSyntax)node);
                    break;
                case SyntaxKind.DoStatement:
                    VisitDoStatement((DoStatementSyntax)node);
                    break;
                case SyntaxKind.ElementAccessExpression:
                    VisitElementAccessExpression((ElementAccessExpressionSyntax)node);
                    break;
                case SyntaxKind.ElementBindingExpression:
                    VisitElementBindingExpression((ElementBindingExpressionSyntax)node);
                    break;
                case SyntaxKind.ElifDirectiveTrivia:
                    VisitElifDirectiveTrivia((ElifDirectiveTriviaSyntax)node);
                    break;
                case SyntaxKind.ElseClause:
                    VisitElseClause((ElseClauseSyntax)node);
                    break;
                case SyntaxKind.ElseDirectiveTrivia:
                    VisitElseDirectiveTrivia((ElseDirectiveTriviaSyntax)node);
                    break;
                case SyntaxKind.EmptyStatement:
                    VisitEmptyStatement((EmptyStatementSyntax)node);
                    break;
                case SyntaxKind.EndIfDirectiveTrivia:
                    VisitEndIfDirectiveTrivia((EndIfDirectiveTriviaSyntax)node);
                    break;
                case SyntaxKind.EndRegionDirectiveTrivia:
                    VisitEndRegionDirectiveTrivia((EndRegionDirectiveTriviaSyntax)node);
                    break;
                case SyntaxKind.EnumDeclaration:
                    VisitEnumDeclaration((EnumDeclarationSyntax)node);
                    break;
                case SyntaxKind.EnumMemberDeclaration:
                    VisitEnumMemberDeclaration((EnumMemberDeclarationSyntax)node);
                    break;
                case SyntaxKind.EqualsValueClause:
                    VisitEqualsValueClause((EqualsValueClauseSyntax)node);
                    break;
                case SyntaxKind.ErrorDirectiveTrivia:
                    VisitErrorDirectiveTrivia((ErrorDirectiveTriviaSyntax)node);
                    break;
                case SyntaxKind.EventDeclaration:
                    VisitEventDeclaration((EventDeclarationSyntax)node);
                    break;
                case SyntaxKind.EventFieldDeclaration:
                    VisitEventFieldDeclaration((EventFieldDeclarationSyntax)node);
                    break;
                case SyntaxKind.ExplicitInterfaceSpecifier:
                    VisitExplicitInterfaceSpecifier((ExplicitInterfaceSpecifierSyntax)node);
                    break;
                case SyntaxKind.ExpressionStatement:
                    VisitExpressionStatement((ExpressionStatementSyntax)node);
                    break;
                case SyntaxKind.ExternAliasDirective:
                    VisitExternAliasDirective((ExternAliasDirectiveSyntax)node);
                    break;
                case SyntaxKind.FieldDeclaration:
                    VisitFieldDeclaration((FieldDeclarationSyntax)node);
                    break;
                case SyntaxKind.FinallyClause:
                    VisitFinallyClause((FinallyClauseSyntax)node);
                    break;
                case SyntaxKind.FixedStatement:
                    VisitFixedStatement((FixedStatementSyntax)node);
                    break;
                case SyntaxKind.ForEachStatement:
                    VisitForEachStatement((ForEachStatementSyntax)node);
                    break;
                case SyntaxKind.ForEachVariableStatement:
                    VisitForEachVariableStatement((ForEachVariableStatementSyntax)node);
                    break;
                case SyntaxKind.ForStatement:
                    VisitForStatement((ForStatementSyntax)node);
                    break;
                case SyntaxKind.FromClause:
                    VisitFromClause((FromClauseSyntax)node);
                    break;
                case SyntaxKind.GenericName:
                    VisitGenericName((GenericNameSyntax)node);
                    break;
                case SyntaxKind.GlobalStatement:
                    VisitGlobalStatement((GlobalStatementSyntax)node);
                    break;
                case SyntaxKind.GotoStatement:
                case SyntaxKind.GotoCaseStatement:
                case SyntaxKind.GotoDefaultStatement:
                    VisitGotoStatement((GotoStatementSyntax)node);
                    break;
                case SyntaxKind.GroupClause:
                    VisitGroupClause((GroupClauseSyntax)node);
                    break;
                case SyntaxKind.CheckedExpression:
                case SyntaxKind.UncheckedExpression:
                    VisitCheckedExpression((CheckedExpressionSyntax)node);
                    break;
                case SyntaxKind.CheckedStatement:
                case SyntaxKind.UncheckedStatement:
                    VisitCheckedStatement((CheckedStatementSyntax)node);
                    break;
                case SyntaxKind.IdentifierName:
                    VisitIdentifierName((IdentifierNameSyntax)node);
                    break;
                case SyntaxKind.IfDirectiveTrivia:
                    VisitIfDirectiveTrivia((IfDirectiveTriviaSyntax)node);
                    break;
                case SyntaxKind.IfStatement:
                    VisitIfStatement((IfStatementSyntax)node);
                    break;
                case SyntaxKind.ImplicitArrayCreationExpression:
                    VisitImplicitArrayCreationExpression((ImplicitArrayCreationExpressionSyntax)node);
                    break;
                case SyntaxKind.ImplicitElementAccess:
                    VisitImplicitElementAccess((ImplicitElementAccessSyntax)node);
                    break;
                case SyntaxKind.IncompleteMember:
                    VisitIncompleteMember((IncompleteMemberSyntax)node);
                    break;
                case SyntaxKind.IndexerDeclaration:
                    VisitIndexerDeclaration((IndexerDeclarationSyntax)node);
                    break;
                case SyntaxKind.IndexerMemberCref:
                    VisitIndexerMemberCref((IndexerMemberCrefSyntax)node);
                    break;
                case SyntaxKind.ArrayInitializerExpression:
                case SyntaxKind.CollectionInitializerExpression:
                case SyntaxKind.ComplexElementInitializerExpression:
                case SyntaxKind.ObjectInitializerExpression:
                    VisitInitializerExpression((InitializerExpressionSyntax)node);
                    break;
                case SyntaxKind.InterfaceDeclaration:
                    VisitInterfaceDeclaration((InterfaceDeclarationSyntax)node);
                    break;
                case SyntaxKind.InterpolatedStringExpression:
                    VisitInterpolatedStringExpression((InterpolatedStringExpressionSyntax)node);
                    break;
                case SyntaxKind.InterpolatedStringText:
                    VisitInterpolatedStringText((InterpolatedStringTextSyntax)node);
                    break;
                case SyntaxKind.InterpolationAlignmentClause:
                    VisitInterpolationAlignmentClause((InterpolationAlignmentClauseSyntax)node);
                    break;
                case SyntaxKind.InterpolationFormatClause:
                    VisitInterpolationFormatClause((InterpolationFormatClauseSyntax)node);
                    break;
                case SyntaxKind.Interpolation:
                    VisitInterpolation((InterpolationSyntax)node);
                    break;
                case SyntaxKind.InvocationExpression:
                    VisitInvocationExpression((InvocationExpressionSyntax)node);
                    break;
                case SyntaxKind.IsPatternExpression:
                    VisitIsPatternExpression((IsPatternExpressionSyntax)node);
                    break;
                case SyntaxKind.JoinClause:
                    VisitJoinClause((JoinClauseSyntax)node);
                    break;
                case SyntaxKind.JoinIntoClause:
                    VisitJoinIntoClause((JoinIntoClauseSyntax)node);
                    break;
                case SyntaxKind.LabeledStatement:
                    VisitLabeledStatement((LabeledStatementSyntax)node);
                    break;
                case SyntaxKind.LetClause:
                    VisitLetClause((LetClauseSyntax)node);
                    break;
                case SyntaxKind.LineDirectiveTrivia:
                    VisitLineDirectiveTrivia((LineDirectiveTriviaSyntax)node);
                    break;
                case SyntaxKind.ArgListExpression:
                case SyntaxKind.NumericLiteralExpression:
                case SyntaxKind.StringLiteralExpression:
                case SyntaxKind.CharacterLiteralExpression:
                case SyntaxKind.TrueLiteralExpression:
                case SyntaxKind.FalseLiteralExpression:
                case SyntaxKind.NullLiteralExpression:
                case SyntaxKind.DefaultLiteralExpression:
                    VisitLiteralExpression((LiteralExpressionSyntax)node);
                    break;
                case SyntaxKind.LoadDirectiveTrivia:
                    VisitLoadDirectiveTrivia((LoadDirectiveTriviaSyntax)node);
                    break;
                case SyntaxKind.LocalDeclarationStatement:
                    VisitLocalDeclarationStatement((LocalDeclarationStatementSyntax)node);
                    break;
                case SyntaxKind.LocalFunctionStatement:
                    VisitLocalFunctionStatement((LocalFunctionStatementSyntax)node);
                    break;
                case SyntaxKind.LockStatement:
                    VisitLockStatement((LockStatementSyntax)node);
                    break;
                case SyntaxKind.MakeRefExpression:
                    VisitMakeRefExpression((MakeRefExpressionSyntax)node);
                    break;
                case SyntaxKind.PointerMemberAccessExpression:
                case SyntaxKind.SimpleMemberAccessExpression:
                    VisitMemberAccessExpression((MemberAccessExpressionSyntax)node);
                    break;
                case SyntaxKind.MemberBindingExpression:
                    VisitMemberBindingExpression((MemberBindingExpressionSyntax)node);
                    break;
                case SyntaxKind.MethodDeclaration:
                    VisitMethodDeclaration((MethodDeclarationSyntax)node);
                    break;
                case SyntaxKind.NameColon:
                    VisitNameColon((NameColonSyntax)node);
                    break;
                case SyntaxKind.NameEquals:
                    VisitNameEquals((NameEqualsSyntax)node);
                    break;
                case SyntaxKind.NameMemberCref:
                    VisitNameMemberCref((NameMemberCrefSyntax)node);
                    break;
                case SyntaxKind.NamespaceDeclaration:
                    VisitNamespaceDeclaration((NamespaceDeclarationSyntax)node);
                    break;
                case SyntaxKind.NullableType:
                    VisitNullableType((NullableTypeSyntax)node);
                    break;
                case SyntaxKind.ObjectCreationExpression:
                    VisitObjectCreationExpression((ObjectCreationExpressionSyntax)node);
                    break;
                case SyntaxKind.OmittedArraySizeExpression:
                    VisitOmittedArraySizeExpression((OmittedArraySizeExpressionSyntax)node);
                    break;
                case SyntaxKind.OmittedTypeArgument:
                    VisitOmittedTypeArgument((OmittedTypeArgumentSyntax)node);
                    break;
                case SyntaxKind.OperatorDeclaration:
                    VisitOperatorDeclaration((OperatorDeclarationSyntax)node);
                    break;
                case SyntaxKind.OperatorMemberCref:
                    VisitOperatorMemberCref((OperatorMemberCrefSyntax)node);
                    break;
                case SyntaxKind.OrderByClause:
                    VisitOrderByClause((OrderByClauseSyntax)node);
                    break;
                case SyntaxKind.AscendingOrdering:
                case SyntaxKind.DescendingOrdering:
                    VisitOrdering((OrderingSyntax)node);
                    break;
                case SyntaxKind.ParameterList:
                    VisitParameterList((ParameterListSyntax)node);
                    break;
                case SyntaxKind.Parameter:
                    VisitParameter((ParameterSyntax)node);
                    break;
                case SyntaxKind.ParenthesizedExpression:
                    VisitParenthesizedExpression((ParenthesizedExpressionSyntax)node);
                    break;
                case SyntaxKind.ParenthesizedLambdaExpression:
                    VisitParenthesizedLambdaExpression((ParenthesizedLambdaExpressionSyntax)node);
                    break;
                case SyntaxKind.ParenthesizedVariableDesignation:
                    VisitParenthesizedVariableDesignation((ParenthesizedVariableDesignationSyntax)node);
                    break;
                case SyntaxKind.PointerType:
                    VisitPointerType((PointerTypeSyntax)node);
                    break;
                case SyntaxKind.PostDecrementExpression:
                case SyntaxKind.PostIncrementExpression:
                    VisitPostfixUnaryExpression((PostfixUnaryExpressionSyntax)node);
                    break;
                case SyntaxKind.PragmaChecksumDirectiveTrivia:
                    VisitPragmaChecksumDirectiveTrivia((PragmaChecksumDirectiveTriviaSyntax)node);
                    break;
                case SyntaxKind.PragmaWarningDirectiveTrivia:
                    VisitPragmaWarningDirectiveTrivia((PragmaWarningDirectiveTriviaSyntax)node);
                    break;
                case SyntaxKind.PredefinedType:
                    VisitPredefinedType((PredefinedTypeSyntax)node);
                    break;
                case SyntaxKind.UnaryPlusExpression:
                case SyntaxKind.UnaryMinusExpression:
                case SyntaxKind.BitwiseNotExpression:
                case SyntaxKind.LogicalNotExpression:
                case SyntaxKind.PreIncrementExpression:
                case SyntaxKind.PreDecrementExpression:
                case SyntaxKind.AddressOfExpression:
                case SyntaxKind.PointerIndirectionExpression:
                    VisitPrefixUnaryExpression((PrefixUnaryExpressionSyntax)node);
                    break;
                case SyntaxKind.PropertyDeclaration:
                    VisitPropertyDeclaration((PropertyDeclarationSyntax)node);
                    break;
                case SyntaxKind.QualifiedCref:
                    VisitQualifiedCref((QualifiedCrefSyntax)node);
                    break;
                case SyntaxKind.QualifiedName:
                    VisitQualifiedName((QualifiedNameSyntax)node);
                    break;
                case SyntaxKind.QueryBody:
                    VisitQueryBody((QueryBodySyntax)node);
                    break;
                case SyntaxKind.QueryContinuation:
                    VisitQueryContinuation((QueryContinuationSyntax)node);
                    break;
                case SyntaxKind.QueryExpression:
                    VisitQueryExpression((QueryExpressionSyntax)node);
                    break;
                case SyntaxKind.ReferenceDirectiveTrivia:
                    VisitReferenceDirectiveTrivia((ReferenceDirectiveTriviaSyntax)node);
                    break;
                case SyntaxKind.RefExpression:
                    VisitRefExpression((RefExpressionSyntax)node);
                    break;
                case SyntaxKind.RefTypeExpression:
                    VisitRefTypeExpression((RefTypeExpressionSyntax)node);
                    break;
                case SyntaxKind.RefType:
                    VisitRefType((RefTypeSyntax)node);
                    break;
                case SyntaxKind.RefValueExpression:
                    VisitRefValueExpression((RefValueExpressionSyntax)node);
                    break;
                case SyntaxKind.RegionDirectiveTrivia:
                    VisitRegionDirectiveTrivia((RegionDirectiveTriviaSyntax)node);
                    break;
                case SyntaxKind.ReturnStatement:
                    VisitReturnStatement((ReturnStatementSyntax)node);
                    break;
                case SyntaxKind.SelectClause:
                    VisitSelectClause((SelectClauseSyntax)node);
                    break;
                case SyntaxKind.ShebangDirectiveTrivia:
                    VisitShebangDirectiveTrivia((ShebangDirectiveTriviaSyntax)node);
                    break;
                case SyntaxKind.SimpleBaseType:
                    VisitSimpleBaseType((SimpleBaseTypeSyntax)node);
                    break;
                case SyntaxKind.SimpleLambdaExpression:
                    VisitSimpleLambdaExpression((SimpleLambdaExpressionSyntax)node);
                    break;
                case SyntaxKind.SingleVariableDesignation:
                    VisitSingleVariableDesignation((SingleVariableDesignationSyntax)node);
                    break;
                case SyntaxKind.SizeOfExpression:
                    VisitSizeOfExpression((SizeOfExpressionSyntax)node);
                    break;
                case SyntaxKind.SkippedTokensTrivia:
                    VisitSkippedTokensTrivia((SkippedTokensTriviaSyntax)node);
                    break;
                case SyntaxKind.StackAllocArrayCreationExpression:
                    VisitStackAllocArrayCreationExpression((StackAllocArrayCreationExpressionSyntax)node);
                    break;
                case SyntaxKind.StructDeclaration:
                    VisitStructDeclaration((StructDeclarationSyntax)node);
                    break;
                case SyntaxKind.SwitchSection:
                    VisitSwitchSection((SwitchSectionSyntax)node);
                    break;
                case SyntaxKind.SwitchStatement:
                    VisitSwitchStatement((SwitchStatementSyntax)node);
                    break;
                case SyntaxKind.ThisExpression:
                    VisitThisExpression((ThisExpressionSyntax)node);
                    break;
                case SyntaxKind.ThrowExpression:
                    VisitThrowExpression((ThrowExpressionSyntax)node);
                    break;
                case SyntaxKind.ThrowStatement:
                    VisitThrowStatement((ThrowStatementSyntax)node);
                    break;
                case SyntaxKind.TryStatement:
                    VisitTryStatement((TryStatementSyntax)node);
                    break;
                case SyntaxKind.TupleElement:
                    VisitTupleElement((TupleElementSyntax)node);
                    break;
                case SyntaxKind.TupleExpression:
                    VisitTupleExpression((TupleExpressionSyntax)node);
                    break;
                case SyntaxKind.TupleType:
                    VisitTupleType((TupleTypeSyntax)node);
                    break;
                case SyntaxKind.TypeArgumentList:
                    VisitTypeArgumentList((TypeArgumentListSyntax)node);
                    break;
                case SyntaxKind.TypeConstraint:
                    VisitTypeConstraint((TypeConstraintSyntax)node);
                    break;
                case SyntaxKind.TypeCref:
                    VisitTypeCref((TypeCrefSyntax)node);
                    break;
                case SyntaxKind.TypeOfExpression:
                    VisitTypeOfExpression((TypeOfExpressionSyntax)node);
                    break;
                case SyntaxKind.TypeParameterConstraintClause:
                    VisitTypeParameterConstraintClause((TypeParameterConstraintClauseSyntax)node);
                    break;
                case SyntaxKind.TypeParameterList:
                    VisitTypeParameterList((TypeParameterListSyntax)node);
                    break;
                case SyntaxKind.TypeParameter:
                    VisitTypeParameter((TypeParameterSyntax)node);
                    break;
                case SyntaxKind.UndefDirectiveTrivia:
                    VisitUndefDirectiveTrivia((UndefDirectiveTriviaSyntax)node);
                    break;
                case SyntaxKind.UnsafeStatement:
                    VisitUnsafeStatement((UnsafeStatementSyntax)node);
                    break;
                case SyntaxKind.UsingDirective:
                    VisitUsingDirective((UsingDirectiveSyntax)node);
                    break;
                case SyntaxKind.UsingStatement:
                    VisitUsingStatement((UsingStatementSyntax)node);
                    break;
                case SyntaxKind.VariableDeclaration:
                    VisitVariableDeclaration((VariableDeclarationSyntax)node);
                    break;
                case SyntaxKind.VariableDeclarator:
                    VisitVariableDeclarator((VariableDeclaratorSyntax)node);
                    break;
                case SyntaxKind.WarningDirectiveTrivia:
                    VisitWarningDirectiveTrivia((WarningDirectiveTriviaSyntax)node);
                    break;
                case SyntaxKind.WhenClause:
                    VisitWhenClause((WhenClauseSyntax)node);
                    break;
                case SyntaxKind.WhereClause:
                    VisitWhereClause((WhereClauseSyntax)node);
                    break;
                case SyntaxKind.WhileStatement:
                    VisitWhileStatement((WhileStatementSyntax)node);
                    break;
                case SyntaxKind.XmlCDataSection:
                    VisitXmlCDataSection((XmlCDataSectionSyntax)node);
                    break;
                case SyntaxKind.XmlComment:
                    VisitXmlComment((XmlCommentSyntax)node);
                    break;
                case SyntaxKind.XmlCrefAttribute:
                    VisitXmlCrefAttribute((XmlCrefAttributeSyntax)node);
                    break;
                case SyntaxKind.XmlElementEndTag:
                    VisitXmlElementEndTag((XmlElementEndTagSyntax)node);
                    break;
                case SyntaxKind.XmlElementStartTag:
                    VisitXmlElementStartTag((XmlElementStartTagSyntax)node);
                    break;
                case SyntaxKind.XmlElement:
                    VisitXmlElement((XmlElementSyntax)node);
                    break;
                case SyntaxKind.XmlEmptyElement:
                    VisitXmlEmptyElement((XmlEmptyElementSyntax)node);
                    break;
                case SyntaxKind.XmlNameAttribute:
                    VisitXmlNameAttribute((XmlNameAttributeSyntax)node);
                    break;
                case SyntaxKind.XmlName:
                    VisitXmlName((XmlNameSyntax)node);
                    break;
                case SyntaxKind.XmlPrefix:
                    VisitXmlPrefix((XmlPrefixSyntax)node);
                    break;
                case SyntaxKind.XmlProcessingInstruction:
                    VisitXmlProcessingInstruction((XmlProcessingInstructionSyntax)node);
                    break;
                case SyntaxKind.XmlTextAttribute:
                    VisitXmlTextAttribute((XmlTextAttributeSyntax)node);
                    break;
                case SyntaxKind.XmlText:
                    VisitXmlText((XmlTextSyntax)node);
                    break;
                case SyntaxKind.YieldBreakStatement:
                case SyntaxKind.YieldReturnStatement:
                    VisitYieldStatement((YieldStatementSyntax)node);
                    break;
                default:
                    throw new ArgumentException($"Unrecognized node '{node.Kind()}'.", nameof(node));
            }
        }

        public void VisitAccessorDeclaration(AccessorDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            if (!ShouldVisit)
            {
                return;
            }

            BlockSyntax body = node.Body;
            if (body != null)
            {
                VisitBlock(body);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ArrowExpressionClauseSyntax expressionBody = node.ExpressionBody;
            if (expressionBody != null)
            {
                VisitArrowExpressionClause(expressionBody);
            }
        }

        public void VisitAccessorList(AccessorListSyntax node)
        {
            foreach (AccessorDeclarationSyntax accessorDeclaration in node.Accessors)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAccessorDeclaration(accessorDeclaration);
            }
        }

        public void VisitAliasQualifiedName(AliasQualifiedNameSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            IdentifierNameSyntax alias = node.Alias;
            if (alias != null)
            {
                VisitIdentifierName(alias);
            }

            if (!ShouldVisit)
            {
                return;
            }

            SimpleNameSyntax name = node.Name;
            if (name != null)
            {
                VisitType(name);
            }
        }

        public void VisitAnonymousMethodExpression(AnonymousMethodExpressionSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ParameterListSyntax parameterList = node.ParameterList;
            if (parameterList != null)
            {
                VisitParameterList(parameterList);
            }

            CSharpSyntaxNode body = node.Body;
            if (body is ExpressionSyntax expression)
            {
                VisitExpression(expression);
            }
            else if (body is StatementSyntax statement)
            {
                VisitStatement(statement);
            }
            else
            {
                Visit(body);
            }
        }

        public void VisitAnonymousObjectCreationExpression(AnonymousObjectCreationExpressionSyntax node)
        {
            foreach (AnonymousObjectMemberDeclaratorSyntax anonymousObjectMemberDeclarator in node.Initializers)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAnonymousObjectMemberDeclarator(anonymousObjectMemberDeclarator);
            }
        }

        public void VisitAnonymousObjectMemberDeclarator(AnonymousObjectMemberDeclaratorSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            NameEqualsSyntax nameEquals = node.NameEquals;
            if (nameEquals != null)
            {
                VisitNameEquals(nameEquals);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax expression = node.Expression;
            if (expression != null)
            {
                VisitExpression(expression);
            }
        }

        public void VisitArgument(ArgumentSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            NameColonSyntax nameColon = node.NameColon;
            if (nameColon != null)
            {
                VisitNameColon(nameColon);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax expression = node.Expression;
            if (expression != null)
            {
                VisitExpression(expression);
            }
        }

        public void VisitArgumentList(ArgumentListSyntax node)
        {
            foreach (ArgumentSyntax argument in node.Arguments)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitArgument(argument);
            }
        }

        public void VisitArrayCreationExpression(ArrayCreationExpressionSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ArrayTypeSyntax type = node.Type;
            if (type != null)
            {
                VisitArrayType(type);
            }

            if (!ShouldVisit)
            {
                return;
            }

            InitializerExpressionSyntax initializer = node.Initializer;
            if (initializer != null)
            {
                VisitInitializerExpression(initializer);
            }
        }

        public void VisitArrayRankSpecifier(ArrayRankSpecifierSyntax node)
        {
            foreach (ExpressionSyntax expression in node.Sizes)
            {
                VisitExpression(expression);
            }
        }

        public void VisitArrayType(ArrayTypeSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            TypeSyntax elementType = node.ElementType;
            if (elementType != null)
            {
                VisitType(elementType);
            }

            foreach (ArrayRankSpecifierSyntax arrayRankSpecifier in node.RankSpecifiers)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitArrayRankSpecifier(arrayRankSpecifier);
            }
        }

        public void VisitArrowExpressionClause(ArrowExpressionClauseSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax expression = node.Expression;
            if (expression != null)
            {
                VisitExpression(expression);
            }
        }

        public void VisitAssignmentExpression(AssignmentExpressionSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax left = node.Left;
            if (left != null)
            {
                VisitExpression(left);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax right = node.Right;
            if (right != null)
            {
                VisitExpression(right);
            }
        }

        public void VisitAttribute(AttributeSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            NameSyntax name = node.Name;
            if (name != null)
            {
                VisitType(name);
            }

            if (!ShouldVisit)
            {
                return;
            }

            AttributeArgumentListSyntax argumentList = node.ArgumentList;
            if (argumentList != null)
            {
                VisitAttributeArgumentList(argumentList);
            }
        }

        public void VisitAttributeArgument(AttributeArgumentSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            NameEqualsSyntax nameEquals = node.NameEquals;
            if (nameEquals != null)
            {
                VisitNameEquals(nameEquals);
            }

            if (!ShouldVisit)
            {
                return;
            }

            NameColonSyntax nameColon = node.NameColon;
            if (nameColon != null)
            {
                VisitNameColon(nameColon);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax expression = node.Expression;
            if (expression != null)
            {
                VisitExpression(expression);
            }
        }

        public void VisitAttributeArgumentList(AttributeArgumentListSyntax node)
        {
            foreach (AttributeArgumentSyntax attributeArgument in node.Arguments)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeArgument(attributeArgument);
            }
        }

        public void VisitAttributeList(AttributeListSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            AttributeTargetSpecifierSyntax target = node.Target;
            if (target != null)
            {
                VisitAttributeTargetSpecifier(target);
            }

            foreach (AttributeSyntax attribute in node.Attributes)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttribute(attribute);
            }
        }

        public void VisitAttributeTargetSpecifier(AttributeTargetSpecifierSyntax node)
        {
        }

        public void VisitAwaitExpression(AwaitExpressionSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax expression = node.Expression;
            if (expression != null)
            {
                VisitExpression(expression);
            }
        }

        public void VisitBadDirectiveTrivia(BadDirectiveTriviaSyntax node)
        {
        }

        public void VisitBaseExpression(BaseExpressionSyntax node)
        {
        }

        public void VisitBaseList(BaseListSyntax node)
        {
            foreach (BaseTypeSyntax baseType in node.Types)
            {
                VisitBaseType(baseType);
            }
        }

        public void VisitBinaryExpression(BinaryExpressionSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax left = node.Left;
            if (left != null)
            {
                VisitExpression(left);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax right = node.Right;
            if (right != null)
            {
                VisitExpression(right);
            }
        }

        public void VisitBlock(BlockSyntax node)
        {
            foreach (StatementSyntax statement in node.Statements)
            {
                VisitStatement(statement);
            }
        }

        public void VisitBracketedArgumentList(BracketedArgumentListSyntax node)
        {
            foreach (ArgumentSyntax argument in node.Arguments)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitArgument(argument);
            }
        }

        public void VisitBracketedParameterList(BracketedParameterListSyntax node)
        {
            foreach (ParameterSyntax parameter in node.Parameters)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitParameter(parameter);
            }
        }

        public void VisitBreakStatement(BreakStatementSyntax node)
        {
        }

        public void VisitCasePatternSwitchLabel(CasePatternSwitchLabelSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            PatternSyntax pattern = node.Pattern;
            if (pattern != null)
            {
                VisitPattern(pattern);
            }

            if (!ShouldVisit)
            {
                return;
            }

            WhenClauseSyntax whenClause = node.WhenClause;
            if (whenClause != null)
            {
                VisitWhenClause(whenClause);
            }
        }

        public void VisitCaseSwitchLabel(CaseSwitchLabelSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax value = node.Value;
            if (value != null)
            {
                VisitExpression(value);
            }
        }

        public void VisitCastExpression(CastExpressionSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            TypeSyntax type = node.Type;
            if (type != null)
            {
                VisitType(type);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax expression = node.Expression;
            if (expression != null)
            {
                VisitExpression(expression);
            }
        }

        public void VisitCatchClause(CatchClauseSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            CatchDeclarationSyntax declaration = node.Declaration;
            if (declaration != null)
            {
                VisitCatchDeclaration(declaration);
            }

            if (!ShouldVisit)
            {
                return;
            }

            CatchFilterClauseSyntax filter = node.Filter;
            if (filter != null)
            {
                VisitCatchFilterClause(filter);
            }

            if (!ShouldVisit)
            {
                return;
            }

            BlockSyntax block = node.Block;
            if (block != null)
            {
                VisitBlock(block);
            }
        }

        public void VisitCatchDeclaration(CatchDeclarationSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            TypeSyntax type = node.Type;
            if (type != null)
            {
                VisitType(type);
            }
        }

        public void VisitCatchFilterClause(CatchFilterClauseSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax filterExpression = node.FilterExpression;
            if (filterExpression != null)
            {
                VisitExpression(filterExpression);
            }
        }

        public void VisitClassDeclaration(ClassDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            if (!ShouldVisit)
            {
                return;
            }

            TypeParameterListSyntax typeParameterList = node.TypeParameterList;
            if (typeParameterList != null)
            {
                VisitTypeParameterList(typeParameterList);
            }

            if (!ShouldVisit)
            {
                return;
            }

            BaseListSyntax baseList = node.BaseList;
            if (baseList != null)
            {
                VisitBaseList(baseList);
            }

            foreach (TypeParameterConstraintClauseSyntax typeParameterConstraintClause in node.ConstraintClauses)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitTypeParameterConstraintClause(typeParameterConstraintClause);
            }

            foreach (MemberDeclarationSyntax memberDeclaration in node.Members)
            {
                VisitMemberDeclaration(memberDeclaration);
            }
        }

        public void VisitClassOrStructConstraint(ClassOrStructConstraintSyntax node)
        {
        }

        public void VisitCompilationUnit(CompilationUnitSyntax node)
        {
            foreach (ExternAliasDirectiveSyntax externAliasDirective in node.Externs)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitExternAliasDirective(externAliasDirective);
            }

            foreach (UsingDirectiveSyntax usingDirective in node.Usings)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitUsingDirective(usingDirective);
            }

            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            foreach (MemberDeclarationSyntax memberDeclaration in node.Members)
            {
                VisitMemberDeclaration(memberDeclaration);
            }
        }

        public void VisitConditionalAccessExpression(ConditionalAccessExpressionSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax expression = node.Expression;
            if (expression != null)
            {
                VisitExpression(expression);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax whenNotNull = node.WhenNotNull;
            if (whenNotNull != null)
            {
                VisitExpression(whenNotNull);
            }
        }

        public void VisitConditionalExpression(ConditionalExpressionSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax condition = node.Condition;
            if (condition != null)
            {
                VisitExpression(condition);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax whenTrue = node.WhenTrue;
            if (whenTrue != null)
            {
                VisitExpression(whenTrue);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax whenFalse = node.WhenFalse;
            if (whenFalse != null)
            {
                VisitExpression(whenFalse);
            }
        }

        public void VisitConstantPattern(ConstantPatternSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax expression = node.Expression;
            if (expression != null)
            {
                VisitExpression(expression);
            }
        }

        public void VisitConstructorConstraint(ConstructorConstraintSyntax node)
        {
        }

        public void VisitConstructorDeclaration(ConstructorDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ParameterListSyntax parameterList = node.ParameterList;
            if (parameterList != null)
            {
                VisitParameterList(parameterList);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ConstructorInitializerSyntax initializer = node.Initializer;
            if (initializer != null)
            {
                VisitConstructorInitializer(initializer);
            }

            if (!ShouldVisit)
            {
                return;
            }

            BlockSyntax body = node.Body;
            if (body != null)
            {
                VisitBlock(body);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ArrowExpressionClauseSyntax expressionBody = node.ExpressionBody;
            if (expressionBody != null)
            {
                VisitArrowExpressionClause(expressionBody);
            }
        }

        public void VisitConstructorInitializer(ConstructorInitializerSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ArgumentListSyntax argumentList = node.ArgumentList;
            if (argumentList != null)
            {
                VisitArgumentList(argumentList);
            }
        }

        public void VisitContinueStatement(ContinueStatementSyntax node)
        {
        }

        public void VisitConversionOperatorDeclaration(ConversionOperatorDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            if (!ShouldVisit)
            {
                return;
            }

            TypeSyntax type = node.Type;
            if (type != null)
            {
                VisitType(type);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ParameterListSyntax parameterList = node.ParameterList;
            if (parameterList != null)
            {
                VisitParameterList(parameterList);
            }

            if (!ShouldVisit)
            {
                return;
            }

            BlockSyntax body = node.Body;
            if (body != null)
            {
                VisitBlock(body);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ArrowExpressionClauseSyntax expressionBody = node.ExpressionBody;
            if (expressionBody != null)
            {
                VisitArrowExpressionClause(expressionBody);
            }
        }

        public void VisitConversionOperatorMemberCref(ConversionOperatorMemberCrefSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            TypeSyntax type = node.Type;
            if (type != null)
            {
                VisitType(type);
            }

            if (!ShouldVisit)
            {
                return;
            }

            CrefParameterListSyntax parameters = node.Parameters;
            if (parameters != null)
            {
                VisitCrefParameterList(parameters);
            }
        }

        public void VisitCrefBracketedParameterList(CrefBracketedParameterListSyntax node)
        {
            foreach (CrefParameterSyntax crefParameter in node.Parameters)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitCrefParameter(crefParameter);
            }
        }

        public void VisitCrefParameter(CrefParameterSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            TypeSyntax type = node.Type;
            if (type != null)
            {
                VisitType(type);
            }
        }

        public void VisitCrefParameterList(CrefParameterListSyntax node)
        {
            foreach (CrefParameterSyntax crefParameter in node.Parameters)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitCrefParameter(crefParameter);
            }
        }

        public void VisitDeclarationExpression(DeclarationExpressionSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            TypeSyntax type = node.Type;
            if (type != null)
            {
                VisitType(type);
            }

            if (!ShouldVisit)
            {
                return;
            }

            VariableDesignationSyntax designation = node.Designation;
            if (designation != null)
            {
                VisitVariableDesignation(designation);
            }
        }

        public void VisitDeclarationPattern(DeclarationPatternSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            TypeSyntax type = node.Type;
            if (type != null)
            {
                VisitType(type);
            }

            if (!ShouldVisit)
            {
                return;
            }

            VariableDesignationSyntax designation = node.Designation;
            if (designation != null)
            {
                VisitVariableDesignation(designation);
            }
        }

        public void VisitDefaultExpression(DefaultExpressionSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            TypeSyntax type = node.Type;
            if (type != null)
            {
                VisitType(type);
            }
        }

        public void VisitDefaultSwitchLabel(DefaultSwitchLabelSyntax node)
        {
        }

        public void VisitDefineDirectiveTrivia(DefineDirectiveTriviaSyntax node)
        {
        }

        public void VisitDelegateDeclaration(DelegateDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            if (!ShouldVisit)
            {
                return;
            }

            TypeSyntax returnType = node.ReturnType;
            if (returnType != null)
            {
                VisitType(returnType);
            }

            if (!ShouldVisit)
            {
                return;
            }

            TypeParameterListSyntax typeParameterList = node.TypeParameterList;
            if (typeParameterList != null)
            {
                VisitTypeParameterList(typeParameterList);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ParameterListSyntax parameterList = node.ParameterList;
            if (parameterList != null)
            {
                VisitParameterList(parameterList);
            }

            foreach (TypeParameterConstraintClauseSyntax typeParameterConstraintClause in node.ConstraintClauses)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitTypeParameterConstraintClause(typeParameterConstraintClause);
            }
        }

        public void VisitDestructorDeclaration(DestructorDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ParameterListSyntax parameterList = node.ParameterList;
            if (parameterList != null)
            {
                VisitParameterList(parameterList);
            }

            if (!ShouldVisit)
            {
                return;
            }

            BlockSyntax body = node.Body;
            if (body != null)
            {
                VisitBlock(body);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ArrowExpressionClauseSyntax expressionBody = node.ExpressionBody;
            if (expressionBody != null)
            {
                VisitArrowExpressionClause(expressionBody);
            }
        }

        public void VisitDiscardDesignation(DiscardDesignationSyntax node)
        {
        }

        public void VisitDocumentationCommentTrivia(DocumentationCommentTriviaSyntax node)
        {
            foreach (XmlNodeSyntax xmlNode in node.Content)
            {
                VisitXmlNode(xmlNode);
            }
        }

        public void VisitDoStatement(DoStatementSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            StatementSyntax statement = node.Statement;
            if (statement != null)
            {
                VisitStatement(statement);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax condition = node.Condition;
            if (condition != null)
            {
                VisitExpression(condition);
            }
        }

        public void VisitElementAccessExpression(ElementAccessExpressionSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax expression = node.Expression;
            if (expression != null)
            {
                VisitExpression(expression);
            }

            if (!ShouldVisit)
            {
                return;
            }

            BracketedArgumentListSyntax argumentList = node.ArgumentList;
            if (argumentList != null)
            {
                VisitBracketedArgumentList(argumentList);
            }
        }

        public void VisitElementBindingExpression(ElementBindingExpressionSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            BracketedArgumentListSyntax argumentList = node.ArgumentList;
            if (argumentList != null)
            {
                VisitBracketedArgumentList(argumentList);
            }
        }

        public void VisitElifDirectiveTrivia(ElifDirectiveTriviaSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax condition = node.Condition;
            if (condition != null)
            {
                VisitExpression(condition);
            }
        }

        public void VisitElseClause(ElseClauseSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            StatementSyntax statement = node.Statement;
            if (statement != null)
            {
                VisitStatement(statement);
            }
        }

        public void VisitElseDirectiveTrivia(ElseDirectiveTriviaSyntax node)
        {
        }

        public void VisitEmptyStatement(EmptyStatementSyntax node)
        {
        }

        public void VisitEndIfDirectiveTrivia(EndIfDirectiveTriviaSyntax node)
        {
        }

        public void VisitEndRegionDirectiveTrivia(EndRegionDirectiveTriviaSyntax node)
        {
        }

        public void VisitEnumDeclaration(EnumDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            if (!ShouldVisit)
            {
                return;
            }

            BaseListSyntax baseList = node.BaseList;
            if (baseList != null)
            {
                VisitBaseList(baseList);
            }

            foreach (EnumMemberDeclarationSyntax enumMemberDeclaration in node.Members)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitEnumMemberDeclaration(enumMemberDeclaration);
            }
        }

        public void VisitEnumMemberDeclaration(EnumMemberDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            if (!ShouldVisit)
            {
                return;
            }

            EqualsValueClauseSyntax equalsValue = node.EqualsValue;
            if (equalsValue != null)
            {
                VisitEqualsValueClause(equalsValue);
            }
        }

        public void VisitEqualsValueClause(EqualsValueClauseSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax value = node.Value;
            if (value != null)
            {
                VisitExpression(value);
            }
        }

        public void VisitErrorDirectiveTrivia(ErrorDirectiveTriviaSyntax node)
        {
        }

        public void VisitEventDeclaration(EventDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            if (!ShouldVisit)
            {
                return;
            }

            TypeSyntax type = node.Type;
            if (type != null)
            {
                VisitType(type);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier = node.ExplicitInterfaceSpecifier;
            if (explicitInterfaceSpecifier != null)
            {
                VisitExplicitInterfaceSpecifier(explicitInterfaceSpecifier);
            }

            if (!ShouldVisit)
            {
                return;
            }

            AccessorListSyntax accessorList = node.AccessorList;
            if (accessorList != null)
            {
                VisitAccessorList(accessorList);
            }
        }

        public void VisitEventFieldDeclaration(EventFieldDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            if (!ShouldVisit)
            {
                return;
            }

            VariableDeclarationSyntax declaration = node.Declaration;
            if (declaration != null)
            {
                VisitVariableDeclaration(declaration);
            }
        }

        public void VisitExplicitInterfaceSpecifier(ExplicitInterfaceSpecifierSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            NameSyntax name = node.Name;
            if (name != null)
            {
                VisitType(name);
            }
        }

        public void VisitExpressionStatement(ExpressionStatementSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax expression = node.Expression;
            if (expression != null)
            {
                VisitExpression(expression);
            }
        }

        public void VisitExternAliasDirective(ExternAliasDirectiveSyntax node)
        {
        }

        public void VisitFieldDeclaration(FieldDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            if (!ShouldVisit)
            {
                return;
            }

            VariableDeclarationSyntax declaration = node.Declaration;
            if (declaration != null)
            {
                VisitVariableDeclaration(declaration);
            }
        }

        public void VisitFinallyClause(FinallyClauseSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            BlockSyntax block = node.Block;
            if (block != null)
            {
                VisitBlock(block);
            }
        }

        public void VisitFixedStatement(FixedStatementSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            VariableDeclarationSyntax declaration = node.Declaration;
            if (declaration != null)
            {
                VisitVariableDeclaration(declaration);
            }

            if (!ShouldVisit)
            {
                return;
            }

            StatementSyntax statement = node.Statement;
            if (statement != null)
            {
                VisitStatement(statement);
            }
        }

        public void VisitForEachStatement(ForEachStatementSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            TypeSyntax type = node.Type;
            if (type != null)
            {
                VisitType(type);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax expression = node.Expression;
            if (expression != null)
            {
                VisitExpression(expression);
            }

            if (!ShouldVisit)
            {
                return;
            }

            StatementSyntax statement = node.Statement;
            if (statement != null)
            {
                VisitStatement(statement);
            }
        }

        public void VisitForEachVariableStatement(ForEachVariableStatementSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax variable = node.Variable;
            if (variable != null)
            {
                VisitExpression(variable);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax expression = node.Expression;
            if (expression != null)
            {
                VisitExpression(expression);
            }

            if (!ShouldVisit)
            {
                return;
            }

            StatementSyntax statement = node.Statement;
            if (statement != null)
            {
                VisitStatement(statement);
            }
        }

        public void VisitForStatement(ForStatementSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            VariableDeclarationSyntax declaration = node.Declaration;
            if (declaration != null)
            {
                VisitVariableDeclaration(declaration);
            }

            foreach (ExpressionSyntax expression in node.Initializers)
            {
                VisitExpression(expression);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax condition = node.Condition;
            if (condition != null)
            {
                VisitExpression(condition);
            }

            foreach (ExpressionSyntax expression2 in node.Incrementors)
            {
                VisitExpression(expression2);
            }

            if (!ShouldVisit)
            {
                return;
            }

            StatementSyntax statement = node.Statement;
            if (statement != null)
            {
                VisitStatement(statement);
            }
        }

        public void VisitFromClause(FromClauseSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            TypeSyntax type = node.Type;
            if (type != null)
            {
                VisitType(type);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax expression = node.Expression;
            if (expression != null)
            {
                VisitExpression(expression);
            }
        }

        public void VisitGenericName(GenericNameSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            TypeArgumentListSyntax typeArgumentList = node.TypeArgumentList;
            if (typeArgumentList != null)
            {
                VisitTypeArgumentList(typeArgumentList);
            }
        }

        public void VisitGlobalStatement(GlobalStatementSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            StatementSyntax statement = node.Statement;
            if (statement != null)
            {
                VisitStatement(statement);
            }
        }

        public void VisitGotoStatement(GotoStatementSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax expression = node.Expression;
            if (expression != null)
            {
                VisitExpression(expression);
            }
        }

        public void VisitGroupClause(GroupClauseSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax groupExpression = node.GroupExpression;
            if (groupExpression != null)
            {
                VisitExpression(groupExpression);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax byExpression = node.ByExpression;
            if (byExpression != null)
            {
                VisitExpression(byExpression);
            }
        }

        public void VisitCheckedExpression(CheckedExpressionSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax expression = node.Expression;
            if (expression != null)
            {
                VisitExpression(expression);
            }
        }

        public void VisitCheckedStatement(CheckedStatementSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            BlockSyntax block = node.Block;
            if (block != null)
            {
                VisitBlock(block);
            }
        }

        public virtual void VisitIdentifierName(IdentifierNameSyntax node)
        {
        }

        public void VisitIfDirectiveTrivia(IfDirectiveTriviaSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax condition = node.Condition;
            if (condition != null)
            {
                VisitExpression(condition);
            }
        }

        public void VisitIfStatement(IfStatementSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax condition = node.Condition;
            if (condition != null)
            {
                VisitExpression(condition);
            }

            if (!ShouldVisit)
            {
                return;
            }

            StatementSyntax statement = node.Statement;
            if (statement != null)
            {
                VisitStatement(statement);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ElseClauseSyntax @else = node.Else;
            if (@else != null)
            {
                VisitElseClause(@else);
            }
        }

        public void VisitImplicitArrayCreationExpression(ImplicitArrayCreationExpressionSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            InitializerExpressionSyntax initializer = node.Initializer;
            if (initializer != null)
            {
                VisitInitializerExpression(initializer);
            }
        }

        public void VisitImplicitElementAccess(ImplicitElementAccessSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            BracketedArgumentListSyntax argumentList = node.ArgumentList;
            if (argumentList != null)
            {
                VisitBracketedArgumentList(argumentList);
            }
        }

        public void VisitIncompleteMember(IncompleteMemberSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            if (!ShouldVisit)
            {
                return;
            }

            TypeSyntax type = node.Type;
            if (type != null)
            {
                VisitType(type);
            }
        }

        public void VisitIndexerDeclaration(IndexerDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            if (!ShouldVisit)
            {
                return;
            }

            TypeSyntax type = node.Type;
            if (type != null)
            {
                VisitType(type);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier = node.ExplicitInterfaceSpecifier;
            if (explicitInterfaceSpecifier != null)
            {
                VisitExplicitInterfaceSpecifier(explicitInterfaceSpecifier);
            }

            if (!ShouldVisit)
            {
                return;
            }

            BracketedParameterListSyntax parameterList = node.ParameterList;
            if (parameterList != null)
            {
                VisitBracketedParameterList(parameterList);
            }

            if (!ShouldVisit)
            {
                return;
            }

            AccessorListSyntax accessorList = node.AccessorList;
            if (accessorList != null)
            {
                VisitAccessorList(accessorList);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ArrowExpressionClauseSyntax expressionBody = node.ExpressionBody;
            if (expressionBody != null)
            {
                VisitArrowExpressionClause(expressionBody);
            }
        }

        public void VisitIndexerMemberCref(IndexerMemberCrefSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            CrefBracketedParameterListSyntax parameters = node.Parameters;
            if (parameters != null)
            {
                VisitCrefBracketedParameterList(parameters);
            }
        }

        public void VisitInitializerExpression(InitializerExpressionSyntax node)
        {
            foreach (ExpressionSyntax expression in node.Expressions)
            {
                VisitExpression(expression);
            }
        }

        public void VisitInterfaceDeclaration(InterfaceDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            if (!ShouldVisit)
            {
                return;
            }

            TypeParameterListSyntax typeParameterList = node.TypeParameterList;
            if (typeParameterList != null)
            {
                VisitTypeParameterList(typeParameterList);
            }

            if (!ShouldVisit)
            {
                return;
            }

            BaseListSyntax baseList = node.BaseList;
            if (baseList != null)
            {
                VisitBaseList(baseList);
            }

            foreach (TypeParameterConstraintClauseSyntax typeParameterConstraintClause in node.ConstraintClauses)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitTypeParameterConstraintClause(typeParameterConstraintClause);
            }

            foreach (MemberDeclarationSyntax memberDeclaration in node.Members)
            {
                VisitMemberDeclaration(memberDeclaration);
            }
        }

        public void VisitInterpolatedStringExpression(InterpolatedStringExpressionSyntax node)
        {
            foreach (InterpolatedStringContentSyntax interpolatedStringContent in node.Contents)
            {
                VisitInterpolatedStringContent(interpolatedStringContent);
            }
        }

        public void VisitInterpolatedStringText(InterpolatedStringTextSyntax node)
        {
        }

        public void VisitInterpolation(InterpolationSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax expression = node.Expression;
            if (expression != null)
            {
                VisitExpression(expression);
            }

            if (!ShouldVisit)
            {
                return;
            }

            InterpolationAlignmentClauseSyntax alignmentClause = node.AlignmentClause;
            if (alignmentClause != null)
            {
                VisitInterpolationAlignmentClause(alignmentClause);
            }

            if (!ShouldVisit)
            {
                return;
            }

            InterpolationFormatClauseSyntax formatClause = node.FormatClause;
            if (formatClause != null)
            {
                VisitInterpolationFormatClause(formatClause);
            }
        }

        public void VisitInterpolationAlignmentClause(InterpolationAlignmentClauseSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax value = node.Value;
            if (value != null)
            {
                VisitExpression(value);
            }
        }

        public void VisitInterpolationFormatClause(InterpolationFormatClauseSyntax node)
        {
        }

        public void VisitInvocationExpression(InvocationExpressionSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax expression = node.Expression;
            if (expression != null)
            {
                VisitExpression(expression);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ArgumentListSyntax argumentList = node.ArgumentList;
            if (argumentList != null)
            {
                VisitArgumentList(argumentList);
            }
        }

        public void VisitIsPatternExpression(IsPatternExpressionSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax expression = node.Expression;
            if (expression != null)
            {
                VisitExpression(expression);
            }

            if (!ShouldVisit)
            {
                return;
            }

            PatternSyntax pattern = node.Pattern;
            if (pattern != null)
            {
                VisitPattern(pattern);
            }
        }

        public void VisitJoinClause(JoinClauseSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            TypeSyntax type = node.Type;
            if (type != null)
            {
                VisitType(type);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax inExpression = node.InExpression;
            if (inExpression != null)
            {
                VisitExpression(inExpression);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax leftExpression = node.LeftExpression;
            if (leftExpression != null)
            {
                VisitExpression(leftExpression);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax rightExpression = node.RightExpression;
            if (rightExpression != null)
            {
                VisitExpression(rightExpression);
            }

            if (!ShouldVisit)
            {
                return;
            }

            JoinIntoClauseSyntax into = node.Into;
            if (into != null)
            {
                VisitJoinIntoClause(into);
            }
        }

        public void VisitJoinIntoClause(JoinIntoClauseSyntax node)
        {
        }

        public void VisitLabeledStatement(LabeledStatementSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            StatementSyntax statement = node.Statement;
            if (statement != null)
            {
                VisitStatement(statement);
            }
        }

        public void VisitLetClause(LetClauseSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax expression = node.Expression;
            if (expression != null)
            {
                VisitExpression(expression);
            }
        }

        public void VisitLineDirectiveTrivia(LineDirectiveTriviaSyntax node)
        {
        }

        public void VisitLiteralExpression(LiteralExpressionSyntax node)
        {
        }

        public void VisitLoadDirectiveTrivia(LoadDirectiveTriviaSyntax node)
        {
        }

        public void VisitLocalDeclarationStatement(LocalDeclarationStatementSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            VariableDeclarationSyntax declaration = node.Declaration;
            if (declaration != null)
            {
                VisitVariableDeclaration(declaration);
            }
        }

        public void VisitLocalFunctionStatement(LocalFunctionStatementSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            TypeSyntax returnType = node.ReturnType;
            if (returnType != null)
            {
                VisitType(returnType);
            }

            if (!ShouldVisit)
            {
                return;
            }

            TypeParameterListSyntax typeParameterList = node.TypeParameterList;
            if (typeParameterList != null)
            {
                VisitTypeParameterList(typeParameterList);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ParameterListSyntax parameterList = node.ParameterList;
            if (parameterList != null)
            {
                VisitParameterList(parameterList);
            }

            foreach (TypeParameterConstraintClauseSyntax typeParameterConstraintClause in node.ConstraintClauses)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitTypeParameterConstraintClause(typeParameterConstraintClause);
            }

            if (!ShouldVisit)
            {
                return;
            }

            BlockSyntax body = node.Body;
            if (body != null)
            {
                VisitBlock(body);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ArrowExpressionClauseSyntax expressionBody = node.ExpressionBody;
            if (expressionBody != null)
            {
                VisitArrowExpressionClause(expressionBody);
            }
        }

        public void VisitLockStatement(LockStatementSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax expression = node.Expression;
            if (expression != null)
            {
                VisitExpression(expression);
            }

            if (!ShouldVisit)
            {
                return;
            }

            StatementSyntax statement = node.Statement;
            if (statement != null)
            {
                VisitStatement(statement);
            }
        }

        public void VisitMakeRefExpression(MakeRefExpressionSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax expression = node.Expression;
            if (expression != null)
            {
                VisitExpression(expression);
            }
        }

        public void VisitMemberAccessExpression(MemberAccessExpressionSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax expression = node.Expression;
            if (expression != null)
            {
                VisitExpression(expression);
            }

            if (!ShouldVisit)
            {
                return;
            }

            SimpleNameSyntax name = node.Name;
            if (name != null)
            {
                VisitType(name);
            }
        }

        public void VisitMemberBindingExpression(MemberBindingExpressionSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            SimpleNameSyntax name = node.Name;
            if (name != null)
            {
                VisitType(name);
            }
        }

        public void VisitMethodDeclaration(MethodDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            if (!ShouldVisit)
            {
                return;
            }

            TypeSyntax returnType = node.ReturnType;
            if (returnType != null)
            {
                VisitType(returnType);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier = node.ExplicitInterfaceSpecifier;
            if (explicitInterfaceSpecifier != null)
            {
                VisitExplicitInterfaceSpecifier(explicitInterfaceSpecifier);
            }

            if (!ShouldVisit)
            {
                return;
            }

            TypeParameterListSyntax typeParameterList = node.TypeParameterList;
            if (typeParameterList != null)
            {
                VisitTypeParameterList(typeParameterList);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ParameterListSyntax parameterList = node.ParameterList;
            if (parameterList != null)
            {
                VisitParameterList(parameterList);
            }

            foreach (TypeParameterConstraintClauseSyntax typeParameterConstraintClause in node.ConstraintClauses)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitTypeParameterConstraintClause(typeParameterConstraintClause);
            }

            if (!ShouldVisit)
            {
                return;
            }

            BlockSyntax body = node.Body;
            if (body != null)
            {
                VisitBlock(body);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ArrowExpressionClauseSyntax expressionBody = node.ExpressionBody;
            if (expressionBody != null)
            {
                VisitArrowExpressionClause(expressionBody);
            }
        }

        public void VisitNameColon(NameColonSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            IdentifierNameSyntax name = node.Name;
            if (name != null)
            {
                VisitIdentifierName(name);
            }
        }

        public void VisitNameEquals(NameEqualsSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            IdentifierNameSyntax name = node.Name;
            if (name != null)
            {
                VisitIdentifierName(name);
            }
        }

        public void VisitNameMemberCref(NameMemberCrefSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            TypeSyntax name = node.Name;
            if (name != null)
            {
                VisitType(name);
            }

            if (!ShouldVisit)
            {
                return;
            }

            CrefParameterListSyntax parameters = node.Parameters;
            if (parameters != null)
            {
                VisitCrefParameterList(parameters);
            }
        }

        public void VisitNamespaceDeclaration(NamespaceDeclarationSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            NameSyntax name = node.Name;
            if (name != null)
            {
                VisitType(name);
            }

            foreach (ExternAliasDirectiveSyntax externAliasDirective in node.Externs)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitExternAliasDirective(externAliasDirective);
            }

            foreach (UsingDirectiveSyntax usingDirective in node.Usings)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitUsingDirective(usingDirective);
            }

            foreach (MemberDeclarationSyntax memberDeclaration in node.Members)
            {
                VisitMemberDeclaration(memberDeclaration);
            }
        }

        public void VisitNullableType(NullableTypeSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            TypeSyntax elementType = node.ElementType;
            if (elementType != null)
            {
                VisitType(elementType);
            }
        }

        public void VisitObjectCreationExpression(ObjectCreationExpressionSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            TypeSyntax type = node.Type;
            if (type != null)
            {
                VisitType(type);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ArgumentListSyntax argumentList = node.ArgumentList;
            if (argumentList != null)
            {
                VisitArgumentList(argumentList);
            }

            if (!ShouldVisit)
            {
                return;
            }

            InitializerExpressionSyntax initializer = node.Initializer;
            if (initializer != null)
            {
                VisitInitializerExpression(initializer);
            }
        }

        public void VisitOmittedArraySizeExpression(OmittedArraySizeExpressionSyntax node)
        {
        }

        public void VisitOmittedTypeArgument(OmittedTypeArgumentSyntax node)
        {
        }

        public void VisitOperatorDeclaration(OperatorDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            if (!ShouldVisit)
            {
                return;
            }

            TypeSyntax returnType = node.ReturnType;
            if (returnType != null)
            {
                VisitType(returnType);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ParameterListSyntax parameterList = node.ParameterList;
            if (parameterList != null)
            {
                VisitParameterList(parameterList);
            }

            if (!ShouldVisit)
            {
                return;
            }

            BlockSyntax body = node.Body;
            if (body != null)
            {
                VisitBlock(body);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ArrowExpressionClauseSyntax expressionBody = node.ExpressionBody;
            if (expressionBody != null)
            {
                VisitArrowExpressionClause(expressionBody);
            }
        }

        public void VisitOperatorMemberCref(OperatorMemberCrefSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            CrefParameterListSyntax parameters = node.Parameters;
            if (parameters != null)
            {
                VisitCrefParameterList(parameters);
            }
        }

        public void VisitOrderByClause(OrderByClauseSyntax node)
        {
            foreach (OrderingSyntax ordering in node.Orderings)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitOrdering(ordering);
            }
        }

        public void VisitOrdering(OrderingSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax expression = node.Expression;
            if (expression != null)
            {
                VisitExpression(expression);
            }
        }

        public void VisitParameter(ParameterSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            if (!ShouldVisit)
            {
                return;
            }

            TypeSyntax type = node.Type;
            if (type != null)
            {
                VisitType(type);
            }

            if (!ShouldVisit)
            {
                return;
            }

            EqualsValueClauseSyntax @default = node.Default;
            if (@default != null)
            {
                VisitEqualsValueClause(@default);
            }
        }

        public void VisitParameterList(ParameterListSyntax node)
        {
            foreach (ParameterSyntax parameter in node.Parameters)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitParameter(parameter);
            }
        }

        public void VisitParenthesizedExpression(ParenthesizedExpressionSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax expression = node.Expression;
            if (expression != null)
            {
                VisitExpression(expression);
            }
        }

        public void VisitParenthesizedLambdaExpression(ParenthesizedLambdaExpressionSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ParameterListSyntax parameterList = node.ParameterList;
            if (parameterList != null)
            {
                VisitParameterList(parameterList);
            }

            CSharpSyntaxNode body = node.Body;
            if (body is ExpressionSyntax expression)
            {
                VisitExpression(expression);
            }
            else if (body is StatementSyntax statement)
            {
                VisitStatement(statement);
            }
            else
            {
                Visit(body);
            }
        }

        public void VisitParenthesizedVariableDesignation(ParenthesizedVariableDesignationSyntax node)
        {
            foreach (VariableDesignationSyntax variableDesignation in node.Variables)
            {
                VisitVariableDesignation(variableDesignation);
            }
        }

        public void VisitPointerType(PointerTypeSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            TypeSyntax elementType = node.ElementType;
            if (elementType != null)
            {
                VisitType(elementType);
            }
        }

        public void VisitPostfixUnaryExpression(PostfixUnaryExpressionSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax operand = node.Operand;
            if (operand != null)
            {
                VisitExpression(operand);
            }
        }

        public void VisitPragmaChecksumDirectiveTrivia(PragmaChecksumDirectiveTriviaSyntax node)
        {
        }

        public void VisitPragmaWarningDirectiveTrivia(PragmaWarningDirectiveTriviaSyntax node)
        {
            foreach (ExpressionSyntax expression in node.ErrorCodes)
            {
                VisitExpression(expression);
            }
        }

        public void VisitPredefinedType(PredefinedTypeSyntax node)
        {
        }

        public void VisitPrefixUnaryExpression(PrefixUnaryExpressionSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax operand = node.Operand;
            if (operand != null)
            {
                VisitExpression(operand);
            }
        }

        public void VisitPropertyDeclaration(PropertyDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            if (!ShouldVisit)
            {
                return;
            }

            TypeSyntax type = node.Type;
            if (type != null)
            {
                VisitType(type);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier = node.ExplicitInterfaceSpecifier;
            if (explicitInterfaceSpecifier != null)
            {
                VisitExplicitInterfaceSpecifier(explicitInterfaceSpecifier);
            }

            if (!ShouldVisit)
            {
                return;
            }

            AccessorListSyntax accessorList = node.AccessorList;
            if (accessorList != null)
            {
                VisitAccessorList(accessorList);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ArrowExpressionClauseSyntax expressionBody = node.ExpressionBody;
            if (expressionBody != null)
            {
                VisitArrowExpressionClause(expressionBody);
            }

            if (!ShouldVisit)
            {
                return;
            }

            EqualsValueClauseSyntax initializer = node.Initializer;
            if (initializer != null)
            {
                VisitEqualsValueClause(initializer);
            }
        }

        public void VisitQualifiedCref(QualifiedCrefSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            TypeSyntax container = node.Container;
            if (container != null)
            {
                VisitType(container);
            }

            if (!ShouldVisit)
            {
                return;
            }

            MemberCrefSyntax member = node.Member;
            if (member != null)
            {
                VisitMemberCref(member);
            }
        }

        public void VisitQualifiedName(QualifiedNameSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            NameSyntax left = node.Left;
            if (left != null)
            {
                VisitType(left);
            }

            if (!ShouldVisit)
            {
                return;
            }

            SimpleNameSyntax right = node.Right;
            if (right != null)
            {
                VisitType(right);
            }
        }

        public void VisitQueryBody(QueryBodySyntax node)
        {
            foreach (QueryClauseSyntax queryClause in node.Clauses)
            {
                VisitQueryClause(queryClause);
            }

            if (!ShouldVisit)
            {
                return;
            }

            SelectOrGroupClauseSyntax selectOrGroup = node.SelectOrGroup;
            if (selectOrGroup != null)
            {
                VisitSelectOrGroupClause(selectOrGroup);
            }

            if (!ShouldVisit)
            {
                return;
            }

            QueryContinuationSyntax continuation = node.Continuation;
            if (continuation != null)
            {
                VisitQueryContinuation(continuation);
            }
        }

        public void VisitQueryContinuation(QueryContinuationSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            QueryBodySyntax body = node.Body;
            if (body != null)
            {
                VisitQueryBody(body);
            }
        }

        public void VisitQueryExpression(QueryExpressionSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            FromClauseSyntax fromClause = node.FromClause;
            if (fromClause != null)
            {
                VisitFromClause(fromClause);
            }

            if (!ShouldVisit)
            {
                return;
            }

            QueryBodySyntax body = node.Body;
            if (body != null)
            {
                VisitQueryBody(body);
            }
        }

        public void VisitReferenceDirectiveTrivia(ReferenceDirectiveTriviaSyntax node)
        {
        }

        public void VisitRefExpression(RefExpressionSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax expression = node.Expression;
            if (expression != null)
            {
                VisitExpression(expression);
            }
        }

        public void VisitRefType(RefTypeSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            TypeSyntax type = node.Type;
            if (type != null)
            {
                VisitType(type);
            }
        }

        public void VisitRefTypeExpression(RefTypeExpressionSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax expression = node.Expression;
            if (expression != null)
            {
                VisitExpression(expression);
            }
        }

        public void VisitRefValueExpression(RefValueExpressionSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax expression = node.Expression;
            if (expression != null)
            {
                VisitExpression(expression);
            }

            if (!ShouldVisit)
            {
                return;
            }

            TypeSyntax type = node.Type;
            if (type != null)
            {
                VisitType(type);
            }
        }

        public void VisitRegionDirectiveTrivia(RegionDirectiveTriviaSyntax node)
        {
        }

        public void VisitReturnStatement(ReturnStatementSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax expression = node.Expression;
            if (expression != null)
            {
                VisitExpression(expression);
            }
        }

        public void VisitSelectClause(SelectClauseSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax expression = node.Expression;
            if (expression != null)
            {
                VisitExpression(expression);
            }
        }

        public void VisitShebangDirectiveTrivia(ShebangDirectiveTriviaSyntax node)
        {
        }

        public void VisitSimpleBaseType(SimpleBaseTypeSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            TypeSyntax type = node.Type;
            if (type != null)
            {
                VisitType(type);
            }
        }

        public void VisitSimpleLambdaExpression(SimpleLambdaExpressionSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ParameterSyntax parameter = node.Parameter;
            if (parameter != null)
            {
                VisitParameter(parameter);
            }

            CSharpSyntaxNode body = node.Body;
            if (body is ExpressionSyntax expression)
            {
                VisitExpression(expression);
            }
            else if (body is StatementSyntax statement)
            {
                VisitStatement(statement);
            }
            else
            {
                Visit(body);
            }
        }

        public void VisitSingleVariableDesignation(SingleVariableDesignationSyntax node)
        {
        }

        public void VisitSizeOfExpression(SizeOfExpressionSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            TypeSyntax type = node.Type;
            if (type != null)
            {
                VisitType(type);
            }
        }

        public void VisitSkippedTokensTrivia(SkippedTokensTriviaSyntax node)
        {
        }

        public void VisitStackAllocArrayCreationExpression(StackAllocArrayCreationExpressionSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            TypeSyntax type = node.Type;
            if (type != null)
            {
                VisitType(type);
            }
        }

        public void VisitStructDeclaration(StructDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            if (!ShouldVisit)
            {
                return;
            }

            TypeParameterListSyntax typeParameterList = node.TypeParameterList;
            if (typeParameterList != null)
            {
                VisitTypeParameterList(typeParameterList);
            }

            if (!ShouldVisit)
            {
                return;
            }

            BaseListSyntax baseList = node.BaseList;
            if (baseList != null)
            {
                VisitBaseList(baseList);
            }

            foreach (TypeParameterConstraintClauseSyntax typeParameterConstraintClause in node.ConstraintClauses)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitTypeParameterConstraintClause(typeParameterConstraintClause);
            }

            foreach (MemberDeclarationSyntax memberDeclaration in node.Members)
            {
                VisitMemberDeclaration(memberDeclaration);
            }
        }

        public void VisitSwitchSection(SwitchSectionSyntax node)
        {
            foreach (SwitchLabelSyntax switchLabel in node.Labels)
            {
                VisitSwitchLabel(switchLabel);
            }

            foreach (StatementSyntax statement in node.Statements)
            {
                VisitStatement(statement);
            }
        }

        public void VisitSwitchStatement(SwitchStatementSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax expression = node.Expression;
            if (expression != null)
            {
                VisitExpression(expression);
            }

            foreach (SwitchSectionSyntax switchSection in node.Sections)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitSwitchSection(switchSection);
            }
        }

        public void VisitThisExpression(ThisExpressionSyntax node)
        {
        }

        public void VisitThrowExpression(ThrowExpressionSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax expression = node.Expression;
            if (expression != null)
            {
                VisitExpression(expression);
            }
        }

        public void VisitThrowStatement(ThrowStatementSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax expression = node.Expression;
            if (expression != null)
            {
                VisitExpression(expression);
            }
        }

        public void VisitTryStatement(TryStatementSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            BlockSyntax block = node.Block;
            if (block != null)
            {
                VisitBlock(block);
            }

            foreach (CatchClauseSyntax catchClause in node.Catches)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitCatchClause(catchClause);
            }

            if (!ShouldVisit)
            {
                return;
            }

            FinallyClauseSyntax @finally = node.Finally;
            if (@finally != null)
            {
                VisitFinallyClause(@finally);
            }
        }

        public void VisitTupleElement(TupleElementSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            TypeSyntax type = node.Type;
            if (type != null)
            {
                VisitType(type);
            }
        }

        public void VisitTupleExpression(TupleExpressionSyntax node)
        {
            foreach (ArgumentSyntax argument in node.Arguments)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitArgument(argument);
            }
        }

        public void VisitTupleType(TupleTypeSyntax node)
        {
            foreach (TupleElementSyntax tupleElement in node.Elements)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitTupleElement(tupleElement);
            }
        }

        public void VisitTypeArgumentList(TypeArgumentListSyntax node)
        {
            foreach (TypeSyntax type in node.Arguments)
            {
                VisitType(type);
            }
        }

        public void VisitTypeConstraint(TypeConstraintSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            TypeSyntax type = node.Type;
            if (type != null)
            {
                VisitType(type);
            }
        }

        public void VisitTypeCref(TypeCrefSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            TypeSyntax type = node.Type;
            if (type != null)
            {
                VisitType(type);
            }
        }

        public void VisitTypeOfExpression(TypeOfExpressionSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            TypeSyntax type = node.Type;
            if (type != null)
            {
                VisitType(type);
            }
        }

        public void VisitTypeParameter(TypeParameterSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }
        }

        public void VisitTypeParameterConstraintClause(TypeParameterConstraintClauseSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            IdentifierNameSyntax name = node.Name;
            if (name != null)
            {
                VisitIdentifierName(name);
            }

            foreach (TypeParameterConstraintSyntax typeParameterConstraint in node.Constraints)
            {
                VisitTypeParameterConstraint(typeParameterConstraint);
            }
        }

        public void VisitTypeParameterList(TypeParameterListSyntax node)
        {
            foreach (TypeParameterSyntax typeParameter in node.Parameters)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitTypeParameter(typeParameter);
            }
        }

        public void VisitUndefDirectiveTrivia(UndefDirectiveTriviaSyntax node)
        {
        }

        public void VisitUnsafeStatement(UnsafeStatementSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            BlockSyntax block = node.Block;
            if (block != null)
            {
                VisitBlock(block);
            }
        }

        public void VisitUsingDirective(UsingDirectiveSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            NameEqualsSyntax alias = node.Alias;
            if (alias != null)
            {
                VisitNameEquals(alias);
            }

            if (!ShouldVisit)
            {
                return;
            }

            NameSyntax name = node.Name;
            if (name != null)
            {
                VisitType(name);
            }
        }

        public void VisitUsingStatement(UsingStatementSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            VariableDeclarationSyntax declaration = node.Declaration;
            if (declaration != null)
            {
                VisitVariableDeclaration(declaration);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax expression = node.Expression;
            if (expression != null)
            {
                VisitExpression(expression);
            }

            if (!ShouldVisit)
            {
                return;
            }

            StatementSyntax statement = node.Statement;
            if (statement != null)
            {
                VisitStatement(statement);
            }
        }

        public void VisitVariableDeclaration(VariableDeclarationSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            TypeSyntax type = node.Type;
            if (type != null)
            {
                VisitType(type);
            }

            foreach (VariableDeclaratorSyntax variableDeclarator in node.Variables)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitVariableDeclarator(variableDeclarator);
            }
        }

        public void VisitVariableDeclarator(VariableDeclaratorSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            BracketedArgumentListSyntax argumentList = node.ArgumentList;
            if (argumentList != null)
            {
                VisitBracketedArgumentList(argumentList);
            }

            if (!ShouldVisit)
            {
                return;
            }

            EqualsValueClauseSyntax initializer = node.Initializer;
            if (initializer != null)
            {
                VisitEqualsValueClause(initializer);
            }
        }

        public void VisitWarningDirectiveTrivia(WarningDirectiveTriviaSyntax node)
        {
        }

        public void VisitWhenClause(WhenClauseSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax condition = node.Condition;
            if (condition != null)
            {
                VisitExpression(condition);
            }
        }

        public void VisitWhereClause(WhereClauseSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax condition = node.Condition;
            if (condition != null)
            {
                VisitExpression(condition);
            }
        }

        public void VisitWhileStatement(WhileStatementSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax condition = node.Condition;
            if (condition != null)
            {
                VisitExpression(condition);
            }

            if (!ShouldVisit)
            {
                return;
            }

            StatementSyntax statement = node.Statement;
            if (statement != null)
            {
                VisitStatement(statement);
            }
        }

        public void VisitXmlCDataSection(XmlCDataSectionSyntax node)
        {
        }

        public void VisitXmlComment(XmlCommentSyntax node)
        {
        }

        public void VisitXmlCrefAttribute(XmlCrefAttributeSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            XmlNameSyntax name = node.Name;
            if (name != null)
            {
                VisitXmlName(name);
            }

            if (!ShouldVisit)
            {
                return;
            }

            CrefSyntax cref = node.Cref;
            if (cref != null)
            {
                VisitCref(cref);
            }
        }

        public void VisitXmlElement(XmlElementSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            XmlElementStartTagSyntax startTag = node.StartTag;
            if (startTag != null)
            {
                VisitXmlElementStartTag(startTag);
            }

            foreach (XmlNodeSyntax xmlNode in node.Content)
            {
                VisitXmlNode(xmlNode);
            }

            if (!ShouldVisit)
            {
                return;
            }

            XmlElementEndTagSyntax endTag = node.EndTag;
            if (endTag != null)
            {
                VisitXmlElementEndTag(endTag);
            }
        }

        public void VisitXmlElementEndTag(XmlElementEndTagSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            XmlNameSyntax name = node.Name;
            if (name != null)
            {
                VisitXmlName(name);
            }
        }

        public void VisitXmlElementStartTag(XmlElementStartTagSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            XmlNameSyntax name = node.Name;
            if (name != null)
            {
                VisitXmlName(name);
            }

            foreach (XmlAttributeSyntax xmlAttribute in node.Attributes)
            {
                VisitXmlAttribute(xmlAttribute);
            }
        }

        public void VisitXmlEmptyElement(XmlEmptyElementSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            XmlNameSyntax name = node.Name;
            if (name != null)
            {
                VisitXmlName(name);
            }

            foreach (XmlAttributeSyntax xmlAttribute in node.Attributes)
            {
                VisitXmlAttribute(xmlAttribute);
            }
        }

        public void VisitXmlName(XmlNameSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            XmlPrefixSyntax prefix = node.Prefix;
            if (prefix != null)
            {
                VisitXmlPrefix(prefix);
            }
        }

        public void VisitXmlNameAttribute(XmlNameAttributeSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            XmlNameSyntax name = node.Name;
            if (name != null)
            {
                VisitXmlName(name);
            }

            if (!ShouldVisit)
            {
                return;
            }

            IdentifierNameSyntax identifier = node.Identifier;
            if (identifier != null)
            {
                VisitIdentifierName(identifier);
            }
        }

        public void VisitXmlPrefix(XmlPrefixSyntax node)
        {
        }

        public void VisitXmlProcessingInstruction(XmlProcessingInstructionSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            XmlNameSyntax name = node.Name;
            if (name != null)
            {
                VisitXmlName(name);
            }
        }

        public void VisitXmlText(XmlTextSyntax node)
        {
        }

        public void VisitXmlTextAttribute(XmlTextAttributeSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            XmlNameSyntax name = node.Name;
            if (name != null)
            {
                VisitXmlName(name);
            }
        }

        public void VisitYieldStatement(YieldStatementSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ExpressionSyntax expression = node.Expression;
            if (expression != null)
            {
                VisitExpression(expression);
            }
        }

        private void VisitBaseType(BaseTypeSyntax node)
        {
            switch (node.Kind())
            {
                case SyntaxKind.SimpleBaseType:
                    VisitSimpleBaseType((SimpleBaseTypeSyntax)node);
                    break;
                default:
                    throw new ArgumentException($"Unrecognized node '{node.Kind()}'.", nameof(node));
            }
        }

        private void VisitCref(CrefSyntax node)
        {
            switch (node.Kind())
            {
                case SyntaxKind.ConversionOperatorMemberCref:
                    VisitConversionOperatorMemberCref((ConversionOperatorMemberCrefSyntax)node);
                    break;
                case SyntaxKind.IndexerMemberCref:
                    VisitIndexerMemberCref((IndexerMemberCrefSyntax)node);
                    break;
                case SyntaxKind.NameMemberCref:
                    VisitNameMemberCref((NameMemberCrefSyntax)node);
                    break;
                case SyntaxKind.OperatorMemberCref:
                    VisitOperatorMemberCref((OperatorMemberCrefSyntax)node);
                    break;
                case SyntaxKind.QualifiedCref:
                    VisitQualifiedCref((QualifiedCrefSyntax)node);
                    break;
                case SyntaxKind.TypeCref:
                    VisitTypeCref((TypeCrefSyntax)node);
                    break;
                default:
                    throw new ArgumentException($"Unrecognized node '{node.Kind()}'.", nameof(node));
            }
        }

        private void VisitExpression(ExpressionSyntax node)
        {
            switch (node.Kind())
            {
                case SyntaxKind.AliasQualifiedName:
                    VisitAliasQualifiedName((AliasQualifiedNameSyntax)node);
                    break;
                case SyntaxKind.AnonymousMethodExpression:
                    VisitAnonymousMethodExpression((AnonymousMethodExpressionSyntax)node);
                    break;
                case SyntaxKind.AnonymousObjectCreationExpression:
                    VisitAnonymousObjectCreationExpression((AnonymousObjectCreationExpressionSyntax)node);
                    break;
                case SyntaxKind.ArrayCreationExpression:
                    VisitArrayCreationExpression((ArrayCreationExpressionSyntax)node);
                    break;
                case SyntaxKind.ArrayType:
                    VisitArrayType((ArrayTypeSyntax)node);
                    break;
                case SyntaxKind.SimpleAssignmentExpression:
                case SyntaxKind.AddAssignmentExpression:
                case SyntaxKind.SubtractAssignmentExpression:
                case SyntaxKind.MultiplyAssignmentExpression:
                case SyntaxKind.DivideAssignmentExpression:
                case SyntaxKind.ModuloAssignmentExpression:
                case SyntaxKind.AndAssignmentExpression:
                case SyntaxKind.ExclusiveOrAssignmentExpression:
                case SyntaxKind.OrAssignmentExpression:
                case SyntaxKind.LeftShiftAssignmentExpression:
                case SyntaxKind.RightShiftAssignmentExpression:
                    VisitAssignmentExpression((AssignmentExpressionSyntax)node);
                    break;
                case SyntaxKind.AwaitExpression:
                    VisitAwaitExpression((AwaitExpressionSyntax)node);
                    break;
                case SyntaxKind.BaseExpression:
                    VisitBaseExpression((BaseExpressionSyntax)node);
                    break;
                case SyntaxKind.AddExpression:
                case SyntaxKind.SubtractExpression:
                case SyntaxKind.MultiplyExpression:
                case SyntaxKind.DivideExpression:
                case SyntaxKind.ModuloExpression:
                case SyntaxKind.LeftShiftExpression:
                case SyntaxKind.RightShiftExpression:
                case SyntaxKind.LogicalOrExpression:
                case SyntaxKind.LogicalAndExpression:
                case SyntaxKind.BitwiseOrExpression:
                case SyntaxKind.BitwiseAndExpression:
                case SyntaxKind.ExclusiveOrExpression:
                case SyntaxKind.EqualsExpression:
                case SyntaxKind.NotEqualsExpression:
                case SyntaxKind.LessThanExpression:
                case SyntaxKind.LessThanOrEqualExpression:
                case SyntaxKind.GreaterThanExpression:
                case SyntaxKind.GreaterThanOrEqualExpression:
                case SyntaxKind.IsExpression:
                case SyntaxKind.AsExpression:
                case SyntaxKind.CoalesceExpression:
                    VisitBinaryExpression((BinaryExpressionSyntax)node);
                    break;
                case SyntaxKind.CastExpression:
                    VisitCastExpression((CastExpressionSyntax)node);
                    break;
                case SyntaxKind.ConditionalAccessExpression:
                    VisitConditionalAccessExpression((ConditionalAccessExpressionSyntax)node);
                    break;
                case SyntaxKind.ConditionalExpression:
                    VisitConditionalExpression((ConditionalExpressionSyntax)node);
                    break;
                case SyntaxKind.DeclarationExpression:
                    VisitDeclarationExpression((DeclarationExpressionSyntax)node);
                    break;
                case SyntaxKind.DefaultExpression:
                    VisitDefaultExpression((DefaultExpressionSyntax)node);
                    break;
                case SyntaxKind.ElementAccessExpression:
                    VisitElementAccessExpression((ElementAccessExpressionSyntax)node);
                    break;
                case SyntaxKind.ElementBindingExpression:
                    VisitElementBindingExpression((ElementBindingExpressionSyntax)node);
                    break;
                case SyntaxKind.GenericName:
                    VisitGenericName((GenericNameSyntax)node);
                    break;
                case SyntaxKind.CheckedExpression:
                case SyntaxKind.UncheckedExpression:
                    VisitCheckedExpression((CheckedExpressionSyntax)node);
                    break;
                case SyntaxKind.IdentifierName:
                    VisitIdentifierName((IdentifierNameSyntax)node);
                    break;
                case SyntaxKind.ImplicitArrayCreationExpression:
                    VisitImplicitArrayCreationExpression((ImplicitArrayCreationExpressionSyntax)node);
                    break;
                case SyntaxKind.ImplicitElementAccess:
                    VisitImplicitElementAccess((ImplicitElementAccessSyntax)node);
                    break;
                case SyntaxKind.ArrayInitializerExpression:
                case SyntaxKind.CollectionInitializerExpression:
                case SyntaxKind.ComplexElementInitializerExpression:
                case SyntaxKind.ObjectInitializerExpression:
                    VisitInitializerExpression((InitializerExpressionSyntax)node);
                    break;
                case SyntaxKind.InterpolatedStringExpression:
                    VisitInterpolatedStringExpression((InterpolatedStringExpressionSyntax)node);
                    break;
                case SyntaxKind.InvocationExpression:
                    VisitInvocationExpression((InvocationExpressionSyntax)node);
                    break;
                case SyntaxKind.IsPatternExpression:
                    VisitIsPatternExpression((IsPatternExpressionSyntax)node);
                    break;
                case SyntaxKind.ArgListExpression:
                case SyntaxKind.NumericLiteralExpression:
                case SyntaxKind.StringLiteralExpression:
                case SyntaxKind.CharacterLiteralExpression:
                case SyntaxKind.TrueLiteralExpression:
                case SyntaxKind.FalseLiteralExpression:
                case SyntaxKind.NullLiteralExpression:
                case SyntaxKind.DefaultLiteralExpression:
                    VisitLiteralExpression((LiteralExpressionSyntax)node);
                    break;
                case SyntaxKind.MakeRefExpression:
                    VisitMakeRefExpression((MakeRefExpressionSyntax)node);
                    break;
                case SyntaxKind.PointerMemberAccessExpression:
                case SyntaxKind.SimpleMemberAccessExpression:
                    VisitMemberAccessExpression((MemberAccessExpressionSyntax)node);
                    break;
                case SyntaxKind.MemberBindingExpression:
                    VisitMemberBindingExpression((MemberBindingExpressionSyntax)node);
                    break;
                case SyntaxKind.NullableType:
                    VisitNullableType((NullableTypeSyntax)node);
                    break;
                case SyntaxKind.ObjectCreationExpression:
                    VisitObjectCreationExpression((ObjectCreationExpressionSyntax)node);
                    break;
                case SyntaxKind.OmittedArraySizeExpression:
                    VisitOmittedArraySizeExpression((OmittedArraySizeExpressionSyntax)node);
                    break;
                case SyntaxKind.OmittedTypeArgument:
                    VisitOmittedTypeArgument((OmittedTypeArgumentSyntax)node);
                    break;
                case SyntaxKind.ParenthesizedExpression:
                    VisitParenthesizedExpression((ParenthesizedExpressionSyntax)node);
                    break;
                case SyntaxKind.ParenthesizedLambdaExpression:
                    VisitParenthesizedLambdaExpression((ParenthesizedLambdaExpressionSyntax)node);
                    break;
                case SyntaxKind.PointerType:
                    VisitPointerType((PointerTypeSyntax)node);
                    break;
                case SyntaxKind.PostDecrementExpression:
                case SyntaxKind.PostIncrementExpression:
                    VisitPostfixUnaryExpression((PostfixUnaryExpressionSyntax)node);
                    break;
                case SyntaxKind.PredefinedType:
                    VisitPredefinedType((PredefinedTypeSyntax)node);
                    break;
                case SyntaxKind.UnaryPlusExpression:
                case SyntaxKind.UnaryMinusExpression:
                case SyntaxKind.BitwiseNotExpression:
                case SyntaxKind.LogicalNotExpression:
                case SyntaxKind.PreIncrementExpression:
                case SyntaxKind.PreDecrementExpression:
                case SyntaxKind.AddressOfExpression:
                case SyntaxKind.PointerIndirectionExpression:
                    VisitPrefixUnaryExpression((PrefixUnaryExpressionSyntax)node);
                    break;
                case SyntaxKind.QualifiedName:
                    VisitQualifiedName((QualifiedNameSyntax)node);
                    break;
                case SyntaxKind.QueryExpression:
                    VisitQueryExpression((QueryExpressionSyntax)node);
                    break;
                case SyntaxKind.RefExpression:
                    VisitRefExpression((RefExpressionSyntax)node);
                    break;
                case SyntaxKind.RefTypeExpression:
                    VisitRefTypeExpression((RefTypeExpressionSyntax)node);
                    break;
                case SyntaxKind.RefType:
                    VisitRefType((RefTypeSyntax)node);
                    break;
                case SyntaxKind.RefValueExpression:
                    VisitRefValueExpression((RefValueExpressionSyntax)node);
                    break;
                case SyntaxKind.SimpleLambdaExpression:
                    VisitSimpleLambdaExpression((SimpleLambdaExpressionSyntax)node);
                    break;
                case SyntaxKind.SizeOfExpression:
                    VisitSizeOfExpression((SizeOfExpressionSyntax)node);
                    break;
                case SyntaxKind.StackAllocArrayCreationExpression:
                    VisitStackAllocArrayCreationExpression((StackAllocArrayCreationExpressionSyntax)node);
                    break;
                case SyntaxKind.ThisExpression:
                    VisitThisExpression((ThisExpressionSyntax)node);
                    break;
                case SyntaxKind.ThrowExpression:
                    VisitThrowExpression((ThrowExpressionSyntax)node);
                    break;
                case SyntaxKind.TupleExpression:
                    VisitTupleExpression((TupleExpressionSyntax)node);
                    break;
                case SyntaxKind.TupleType:
                    VisitTupleType((TupleTypeSyntax)node);
                    break;
                case SyntaxKind.TypeOfExpression:
                    VisitTypeOfExpression((TypeOfExpressionSyntax)node);
                    break;
                default:
                    throw new ArgumentException($"Unrecognized node '{node.Kind()}'.", nameof(node));
            }
        }

        private void VisitInterpolatedStringContent(InterpolatedStringContentSyntax node)
        {
            switch (node.Kind())
            {
                case SyntaxKind.InterpolatedStringText:
                    VisitInterpolatedStringText((InterpolatedStringTextSyntax)node);
                    break;
                case SyntaxKind.Interpolation:
                    VisitInterpolation((InterpolationSyntax)node);
                    break;
                default:
                    throw new ArgumentException($"Unrecognized node '{node.Kind()}'.", nameof(node));
            }
        }

        private void VisitMemberCref(MemberCrefSyntax node)
        {
            switch (node.Kind())
            {
                case SyntaxKind.ConversionOperatorMemberCref:
                    VisitConversionOperatorMemberCref((ConversionOperatorMemberCrefSyntax)node);
                    break;
                case SyntaxKind.IndexerMemberCref:
                    VisitIndexerMemberCref((IndexerMemberCrefSyntax)node);
                    break;
                case SyntaxKind.NameMemberCref:
                    VisitNameMemberCref((NameMemberCrefSyntax)node);
                    break;
                case SyntaxKind.OperatorMemberCref:
                    VisitOperatorMemberCref((OperatorMemberCrefSyntax)node);
                    break;
                default:
                    throw new ArgumentException($"Unrecognized node '{node.Kind()}'.", nameof(node));
            }
        }

        private void VisitMemberDeclaration(MemberDeclarationSyntax node)
        {
            switch (node.Kind())
            {
                case SyntaxKind.ClassDeclaration:
                    VisitClassDeclaration((ClassDeclarationSyntax)node);
                    break;
                case SyntaxKind.ConstructorDeclaration:
                    VisitConstructorDeclaration((ConstructorDeclarationSyntax)node);
                    break;
                case SyntaxKind.ConversionOperatorDeclaration:
                    VisitConversionOperatorDeclaration((ConversionOperatorDeclarationSyntax)node);
                    break;
                case SyntaxKind.DelegateDeclaration:
                    VisitDelegateDeclaration((DelegateDeclarationSyntax)node);
                    break;
                case SyntaxKind.DestructorDeclaration:
                    VisitDestructorDeclaration((DestructorDeclarationSyntax)node);
                    break;
                case SyntaxKind.EnumDeclaration:
                    VisitEnumDeclaration((EnumDeclarationSyntax)node);
                    break;
                case SyntaxKind.EnumMemberDeclaration:
                    VisitEnumMemberDeclaration((EnumMemberDeclarationSyntax)node);
                    break;
                case SyntaxKind.EventDeclaration:
                    VisitEventDeclaration((EventDeclarationSyntax)node);
                    break;
                case SyntaxKind.EventFieldDeclaration:
                    VisitEventFieldDeclaration((EventFieldDeclarationSyntax)node);
                    break;
                case SyntaxKind.FieldDeclaration:
                    VisitFieldDeclaration((FieldDeclarationSyntax)node);
                    break;
                case SyntaxKind.GlobalStatement:
                    VisitGlobalStatement((GlobalStatementSyntax)node);
                    break;
                case SyntaxKind.IncompleteMember:
                    VisitIncompleteMember((IncompleteMemberSyntax)node);
                    break;
                case SyntaxKind.IndexerDeclaration:
                    VisitIndexerDeclaration((IndexerDeclarationSyntax)node);
                    break;
                case SyntaxKind.InterfaceDeclaration:
                    VisitInterfaceDeclaration((InterfaceDeclarationSyntax)node);
                    break;
                case SyntaxKind.MethodDeclaration:
                    VisitMethodDeclaration((MethodDeclarationSyntax)node);
                    break;
                case SyntaxKind.NamespaceDeclaration:
                    VisitNamespaceDeclaration((NamespaceDeclarationSyntax)node);
                    break;
                case SyntaxKind.OperatorDeclaration:
                    VisitOperatorDeclaration((OperatorDeclarationSyntax)node);
                    break;
                case SyntaxKind.PropertyDeclaration:
                    VisitPropertyDeclaration((PropertyDeclarationSyntax)node);
                    break;
                case SyntaxKind.StructDeclaration:
                    VisitStructDeclaration((StructDeclarationSyntax)node);
                    break;
                default:
                    throw new ArgumentException($"Unrecognized node '{node.Kind()}'.", nameof(node));
            }
        }

        private void VisitPattern(PatternSyntax node)
        {
            switch (node.Kind())
            {
                case SyntaxKind.ConstantPattern:
                    VisitConstantPattern((ConstantPatternSyntax)node);
                    break;
                case SyntaxKind.DeclarationPattern:
                    VisitDeclarationPattern((DeclarationPatternSyntax)node);
                    break;
                default:
                    throw new ArgumentException($"Unrecognized node '{node.Kind()}'.", nameof(node));
            }
        }

        private void VisitQueryClause(QueryClauseSyntax node)
        {
            switch (node.Kind())
            {
                case SyntaxKind.FromClause:
                    VisitFromClause((FromClauseSyntax)node);
                    break;
                case SyntaxKind.JoinClause:
                    VisitJoinClause((JoinClauseSyntax)node);
                    break;
                case SyntaxKind.LetClause:
                    VisitLetClause((LetClauseSyntax)node);
                    break;
                case SyntaxKind.OrderByClause:
                    VisitOrderByClause((OrderByClauseSyntax)node);
                    break;
                case SyntaxKind.WhereClause:
                    VisitWhereClause((WhereClauseSyntax)node);
                    break;
                default:
                    throw new ArgumentException($"Unrecognized node '{node.Kind()}'.", nameof(node));
            }
        }

        private void VisitSelectOrGroupClause(SelectOrGroupClauseSyntax node)
        {
            switch (node.Kind())
            {
                case SyntaxKind.GroupClause:
                    VisitGroupClause((GroupClauseSyntax)node);
                    break;
                case SyntaxKind.SelectClause:
                    VisitSelectClause((SelectClauseSyntax)node);
                    break;
                default:
                    throw new ArgumentException($"Unrecognized node '{node.Kind()}'.", nameof(node));
            }
        }

        private void VisitStatement(StatementSyntax node)
        {
            switch (node.Kind())
            {
                case SyntaxKind.Block:
                    VisitBlock((BlockSyntax)node);
                    break;
                case SyntaxKind.BreakStatement:
                    VisitBreakStatement((BreakStatementSyntax)node);
                    break;
                case SyntaxKind.ContinueStatement:
                    VisitContinueStatement((ContinueStatementSyntax)node);
                    break;
                case SyntaxKind.DoStatement:
                    VisitDoStatement((DoStatementSyntax)node);
                    break;
                case SyntaxKind.EmptyStatement:
                    VisitEmptyStatement((EmptyStatementSyntax)node);
                    break;
                case SyntaxKind.ExpressionStatement:
                    VisitExpressionStatement((ExpressionStatementSyntax)node);
                    break;
                case SyntaxKind.FixedStatement:
                    VisitFixedStatement((FixedStatementSyntax)node);
                    break;
                case SyntaxKind.ForEachStatement:
                    VisitForEachStatement((ForEachStatementSyntax)node);
                    break;
                case SyntaxKind.ForEachVariableStatement:
                    VisitForEachVariableStatement((ForEachVariableStatementSyntax)node);
                    break;
                case SyntaxKind.ForStatement:
                    VisitForStatement((ForStatementSyntax)node);
                    break;
                case SyntaxKind.GotoStatement:
                case SyntaxKind.GotoCaseStatement:
                case SyntaxKind.GotoDefaultStatement:
                    VisitGotoStatement((GotoStatementSyntax)node);
                    break;
                case SyntaxKind.CheckedStatement:
                case SyntaxKind.UncheckedStatement:
                    VisitCheckedStatement((CheckedStatementSyntax)node);
                    break;
                case SyntaxKind.IfStatement:
                    VisitIfStatement((IfStatementSyntax)node);
                    break;
                case SyntaxKind.LabeledStatement:
                    VisitLabeledStatement((LabeledStatementSyntax)node);
                    break;
                case SyntaxKind.LocalDeclarationStatement:
                    VisitLocalDeclarationStatement((LocalDeclarationStatementSyntax)node);
                    break;
                case SyntaxKind.LocalFunctionStatement:
                    VisitLocalFunctionStatement((LocalFunctionStatementSyntax)node);
                    break;
                case SyntaxKind.LockStatement:
                    VisitLockStatement((LockStatementSyntax)node);
                    break;
                case SyntaxKind.ReturnStatement:
                    VisitReturnStatement((ReturnStatementSyntax)node);
                    break;
                case SyntaxKind.SwitchStatement:
                    VisitSwitchStatement((SwitchStatementSyntax)node);
                    break;
                case SyntaxKind.ThrowStatement:
                    VisitThrowStatement((ThrowStatementSyntax)node);
                    break;
                case SyntaxKind.TryStatement:
                    VisitTryStatement((TryStatementSyntax)node);
                    break;
                case SyntaxKind.UnsafeStatement:
                    VisitUnsafeStatement((UnsafeStatementSyntax)node);
                    break;
                case SyntaxKind.UsingStatement:
                    VisitUsingStatement((UsingStatementSyntax)node);
                    break;
                case SyntaxKind.WhileStatement:
                    VisitWhileStatement((WhileStatementSyntax)node);
                    break;
                case SyntaxKind.YieldBreakStatement:
                case SyntaxKind.YieldReturnStatement:
                    VisitYieldStatement((YieldStatementSyntax)node);
                    break;
                default:
                    throw new ArgumentException($"Unrecognized node '{node.Kind()}'.", nameof(node));
            }
        }

        private void VisitSwitchLabel(SwitchLabelSyntax node)
        {
            switch (node.Kind())
            {
                case SyntaxKind.CasePatternSwitchLabel:
                    VisitCasePatternSwitchLabel((CasePatternSwitchLabelSyntax)node);
                    break;
                case SyntaxKind.CaseSwitchLabel:
                    VisitCaseSwitchLabel((CaseSwitchLabelSyntax)node);
                    break;
                case SyntaxKind.DefaultSwitchLabel:
                    VisitDefaultSwitchLabel((DefaultSwitchLabelSyntax)node);
                    break;
                default:
                    throw new ArgumentException($"Unrecognized node '{node.Kind()}'.", nameof(node));
            }
        }

        private void VisitTypeParameterConstraint(TypeParameterConstraintSyntax node)
        {
            switch (node.Kind())
            {
                case SyntaxKind.ClassConstraint:
                case SyntaxKind.StructConstraint:
                    VisitClassOrStructConstraint((ClassOrStructConstraintSyntax)node);
                    break;
                case SyntaxKind.ConstructorConstraint:
                    VisitConstructorConstraint((ConstructorConstraintSyntax)node);
                    break;
                case SyntaxKind.TypeConstraint:
                    VisitTypeConstraint((TypeConstraintSyntax)node);
                    break;
                default:
                    throw new ArgumentException($"Unrecognized node '{node.Kind()}'.", nameof(node));
            }
        }

        protected virtual void VisitType(TypeSyntax node)
        {
            switch (node.Kind())
            {
                case SyntaxKind.AliasQualifiedName:
                    VisitAliasQualifiedName((AliasQualifiedNameSyntax)node);
                    break;
                case SyntaxKind.ArrayType:
                    VisitArrayType((ArrayTypeSyntax)node);
                    break;
                case SyntaxKind.GenericName:
                    VisitGenericName((GenericNameSyntax)node);
                    break;
                case SyntaxKind.IdentifierName:
                    VisitIdentifierName((IdentifierNameSyntax)node);
                    break;
                case SyntaxKind.NullableType:
                    VisitNullableType((NullableTypeSyntax)node);
                    break;
                case SyntaxKind.OmittedTypeArgument:
                    VisitOmittedTypeArgument((OmittedTypeArgumentSyntax)node);
                    break;
                case SyntaxKind.PointerType:
                    VisitPointerType((PointerTypeSyntax)node);
                    break;
                case SyntaxKind.PredefinedType:
                    VisitPredefinedType((PredefinedTypeSyntax)node);
                    break;
                case SyntaxKind.QualifiedName:
                    VisitQualifiedName((QualifiedNameSyntax)node);
                    break;
                case SyntaxKind.RefType:
                    VisitRefType((RefTypeSyntax)node);
                    break;
                case SyntaxKind.TupleType:
                    VisitTupleType((TupleTypeSyntax)node);
                    break;
                default:
                    throw new ArgumentException($"Unrecognized node '{node.Kind()}'.", nameof(node));
            }
        }

        private void VisitVariableDesignation(VariableDesignationSyntax node)
        {
            switch (node.Kind())
            {
                case SyntaxKind.DiscardDesignation:
                    VisitDiscardDesignation((DiscardDesignationSyntax)node);
                    break;
                case SyntaxKind.ParenthesizedVariableDesignation:
                    VisitParenthesizedVariableDesignation((ParenthesizedVariableDesignationSyntax)node);
                    break;
                case SyntaxKind.SingleVariableDesignation:
                    VisitSingleVariableDesignation((SingleVariableDesignationSyntax)node);
                    break;
                default:
                    throw new ArgumentException($"Unrecognized node '{node.Kind()}'.", nameof(node));
            }
        }

        private void VisitXmlAttribute(XmlAttributeSyntax node)
        {
            switch (node.Kind())
            {
                case SyntaxKind.XmlCrefAttribute:
                    VisitXmlCrefAttribute((XmlCrefAttributeSyntax)node);
                    break;
                case SyntaxKind.XmlNameAttribute:
                    VisitXmlNameAttribute((XmlNameAttributeSyntax)node);
                    break;
                case SyntaxKind.XmlTextAttribute:
                    VisitXmlTextAttribute((XmlTextAttributeSyntax)node);
                    break;
                default:
                    throw new ArgumentException($"Unrecognized node '{node.Kind()}'.", nameof(node));
            }
        }

        private void VisitXmlNode(XmlNodeSyntax node)
        {
            switch (node.Kind())
            {
                case SyntaxKind.XmlCDataSection:
                    VisitXmlCDataSection((XmlCDataSectionSyntax)node);
                    break;
                case SyntaxKind.XmlComment:
                    VisitXmlComment((XmlCommentSyntax)node);
                    break;
                case SyntaxKind.XmlElement:
                    VisitXmlElement((XmlElementSyntax)node);
                    break;
                case SyntaxKind.XmlEmptyElement:
                    VisitXmlEmptyElement((XmlEmptyElementSyntax)node);
                    break;
                case SyntaxKind.XmlProcessingInstruction:
                    VisitXmlProcessingInstruction((XmlProcessingInstructionSyntax)node);
                    break;
                case SyntaxKind.XmlText:
                    VisitXmlText((XmlTextSyntax)node);
                    break;
                default:
                    throw new ArgumentException($"Unrecognized node '{node.Kind()}'.", nameof(node));
            }
        }
    }
}