// Copyright (c) Josef Pihrt. All rights reserved. Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Formatting;
using Microsoft.CodeAnalysis.Options;
using Microsoft.CodeAnalysis.CSharp;
using Roslynator.CSharp;

namespace Roslynator.Formatting
{
    internal static class CodeFormatter
    {
        public static async Task<Project> FormatProjectAsync(Project project, CancellationToken cancellationToken = default)
        {
            foreach (DocumentId documentId in project.DocumentIds)
            {
                Document document = project.GetDocument(documentId);

                if (GeneratedCodeUtility.IsGeneratedCodeFile(document.FilePath))
                    continue;

                SyntaxNode root = await document.GetSyntaxRootAsync(cancellationToken).ConfigureAwait(false);

                if (BeginsWithAutoGeneratedComment(root))
                    continue;

                DocumentOptionSet options = await document.GetOptionsAsync(cancellationToken).ConfigureAwait(false);

                Document newDocument = await Formatter.FormatAsync(document, options, cancellationToken).ConfigureAwait(false);

                project = newDocument.Project;
            }

            return project;

            bool BeginsWithAutoGeneratedComment(SyntaxNode root)
            {
                switch (project.Language)
                {
                    case LanguageNames.CSharp:
                        {
                            return GeneratedCodeUtility.BeginsWithAutoGeneratedComment(
                                root,
                                f => f.IsKind(SyntaxKind.SingleLineCommentTrivia, SyntaxKind.MultiLineCommentTrivia));
                        }
                    case LanguageNames.VisualBasic:
                        {
                            return GeneratedCodeUtility.BeginsWithAutoGeneratedComment(
                                root,
                                f => f.IsKind(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CommentTrivia));
                        }
                }

                return false;
            }
        }
    }
}
