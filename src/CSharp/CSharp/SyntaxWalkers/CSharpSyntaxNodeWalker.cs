// Copyright (c) Josef Pihrt. All rights reserved. Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

// <auto-generated>

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace Roslynator.CSharp.SyntaxWalkers
{
    public abstract class CSharpSyntaxNodeWalker : CSharpSyntaxWalker
    {
        protected CSharpSyntaxNodeWalker(): base (depth: SyntaxWalkerDepth.Node)
        {
        }

        protected virtual bool ShouldVisit
        {
            get
            {
                return true;
            }
        }

        public override void Visit(SyntaxNode node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            base.Visit(node);
        }

        private void VisitList<TNode>(SyntaxList<TNode> list)where TNode : SyntaxNode
        {
            foreach (TNode node in list)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                Visit(node);
            }
        }

        private void VisitSeparatedList<TNode>(SeparatedSyntaxList<TNode> list)where TNode : SyntaxNode
        {
            foreach (TNode node in list)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                Visit(node);
            }
        }

        protected virtual void VisitType(TypeSyntax node)
        {
            Visit(node);
        }

        public override void VisitAccessorDeclaration(AccessorDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            if (!ShouldVisit)
            {
                return;
            }

            BlockSyntax body = node.Body;
            if (body != null)
            {
                VisitBlock(body);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ArrowExpressionClauseSyntax expressionBody = node.ExpressionBody;
            if (expressionBody != null)
            {
                VisitArrowExpressionClause(expressionBody);
            }
        }

        public override void VisitAccessorList(AccessorListSyntax node)
        {
            foreach (AccessorDeclarationSyntax accessorDeclaration in node.Accessors)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAccessorDeclaration(accessorDeclaration);
            }
        }

        public override void VisitAliasQualifiedName(AliasQualifiedNameSyntax node)
        {
            VisitType(node.Alias);
            VisitType(node.Name);
        }

        public override void VisitAnonymousMethodExpression(AnonymousMethodExpressionSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            BlockSyntax block = node.Block;
            if (block != null)
            {
                VisitBlock(block);
            }

            ParameterListSyntax parameterList = node.ParameterList;
            if (parameterList != null)
            {
                foreach (ParameterSyntax parameter in parameterList.Parameters)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitParameter(parameter);
                }
            }

            Visit(node.Body);
        }

        public override void VisitAnonymousObjectCreationExpression(AnonymousObjectCreationExpressionSyntax node)
        {
            foreach (AnonymousObjectMemberDeclaratorSyntax anonymousObjectMemberDeclarator in node.Initializers)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAnonymousObjectMemberDeclarator(anonymousObjectMemberDeclarator);
            }
        }

        public override void VisitAnonymousObjectMemberDeclarator(AnonymousObjectMemberDeclaratorSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            NameEqualsSyntax nameEquals = node.NameEquals;
            if (nameEquals != null)
            {
                VisitNameEquals(nameEquals);
            }

            Visit(node.Expression);
        }

        public override void VisitArgument(ArgumentSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            NameColonSyntax nameColon = node.NameColon;
            if (nameColon != null)
            {
                VisitNameColon(nameColon);
            }

            Visit(node.Expression);
        }

        public override void VisitArgumentList(ArgumentListSyntax node)
        {
            foreach (ArgumentSyntax argument in node.Arguments)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitArgument(argument);
            }
        }

        public override void VisitArrayCreationExpression(ArrayCreationExpressionSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ArrayTypeSyntax type = node.Type;
            if (type != null)
            {
                VisitArrayType(type);
            }

            Visit(node.Initializer);
        }

        public override void VisitArrayRankSpecifier(ArrayRankSpecifierSyntax node)
        {
            VisitSeparatedList(node.Sizes);
        }

        public override void VisitArrayType(ArrayTypeSyntax node)
        {
            VisitType(node.ElementType);
            foreach (ArrayRankSpecifierSyntax arrayRankSpecifier in node.RankSpecifiers)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitArrayRankSpecifier(arrayRankSpecifier);
            }
        }

        public override void VisitArrowExpressionClause(ArrowExpressionClauseSyntax node)
        {
            Visit(node.Expression);
        }

        public override void VisitAssignmentExpression(AssignmentExpressionSyntax node)
        {
            Visit(node.Left);
            Visit(node.Right);
        }

        public override void VisitAttribute(AttributeSyntax node)
        {
            VisitType(node.Name);
            AttributeArgumentListSyntax argumentList = node.ArgumentList;
            if (argumentList != null)
            {
                foreach (AttributeArgumentSyntax attributeArgument in argumentList.Arguments)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitAttributeArgument(attributeArgument);
                }
            }
        }

        public override void VisitAttributeArgument(AttributeArgumentSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            NameEqualsSyntax nameEquals = node.NameEquals;
            if (nameEquals != null)
            {
                VisitNameEquals(nameEquals);
            }

            if (!ShouldVisit)
            {
                return;
            }

            NameColonSyntax nameColon = node.NameColon;
            if (nameColon != null)
            {
                VisitNameColon(nameColon);
            }

            Visit(node.Expression);
        }

        public override void VisitAttributeArgumentList(AttributeArgumentListSyntax node)
        {
            foreach (AttributeArgumentSyntax attributeArgument in node.Arguments)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeArgument(attributeArgument);
            }
        }

        public override void VisitAttributeList(AttributeListSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            AttributeTargetSpecifierSyntax target = node.Target;
            if (target != null)
            {
                VisitAttributeTargetSpecifier(target);
            }

            foreach (AttributeSyntax attribute in node.Attributes)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttribute(attribute);
            }
        }

        public override void VisitAttributeTargetSpecifier(AttributeTargetSpecifierSyntax node)
        {
        }

        public override void VisitAwaitExpression(AwaitExpressionSyntax node)
        {
            Visit(node.Expression);
        }

        public override void VisitBadDirectiveTrivia(BadDirectiveTriviaSyntax node)
        {
        }

        public override void VisitBaseExpression(BaseExpressionSyntax node)
        {
        }

        public override void VisitBaseList(BaseListSyntax node)
        {
            VisitSeparatedList(node.Types);
        }

        public override void VisitBinaryExpression(BinaryExpressionSyntax node)
        {
            Visit(node.Left);
            Visit(node.Right);
        }

        public override void VisitBlock(BlockSyntax node)
        {
            VisitList(node.Statements);
        }

        public override void VisitBracketedArgumentList(BracketedArgumentListSyntax node)
        {
            foreach (ArgumentSyntax argument in node.Arguments)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitArgument(argument);
            }
        }

        public override void VisitBracketedParameterList(BracketedParameterListSyntax node)
        {
            foreach (ParameterSyntax parameter in node.Parameters)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitParameter(parameter);
            }
        }

        public override void VisitBreakStatement(BreakStatementSyntax node)
        {
        }

        public override void VisitCasePatternSwitchLabel(CasePatternSwitchLabelSyntax node)
        {
            Visit(node.Pattern);
            if (!ShouldVisit)
            {
                return;
            }

            WhenClauseSyntax whenClause = node.WhenClause;
            if (whenClause != null)
            {
                VisitWhenClause(whenClause);
            }
        }

        public override void VisitCaseSwitchLabel(CaseSwitchLabelSyntax node)
        {
            Visit(node.Value);
        }

        public override void VisitCastExpression(CastExpressionSyntax node)
        {
            VisitType(node.Type);
            Visit(node.Expression);
        }

        public override void VisitCatchClause(CatchClauseSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            CatchDeclarationSyntax declaration = node.Declaration;
            if (declaration != null)
            {
                VisitCatchDeclaration(declaration);
            }

            if (!ShouldVisit)
            {
                return;
            }

            CatchFilterClauseSyntax filter = node.Filter;
            if (filter != null)
            {
                VisitCatchFilterClause(filter);
            }

            if (!ShouldVisit)
            {
                return;
            }

            BlockSyntax block = node.Block;
            if (block != null)
            {
                VisitBlock(block);
            }
        }

        public override void VisitCatchDeclaration(CatchDeclarationSyntax node)
        {
            VisitType(node.Type);
        }

        public override void VisitCatchFilterClause(CatchFilterClauseSyntax node)
        {
            Visit(node.FilterExpression);
        }

        public override void VisitClassDeclaration(ClassDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            TypeParameterListSyntax typeParameterList = node.TypeParameterList;
            if (typeParameterList != null)
            {
                foreach (TypeParameterSyntax typeParameter in typeParameterList.Parameters)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitTypeParameter(typeParameter);
                }
            }

            if (!ShouldVisit)
            {
                return;
            }

            BaseListSyntax baseList = node.BaseList;
            if (baseList != null)
            {
                VisitBaseList(baseList);
            }

            foreach (TypeParameterConstraintClauseSyntax typeParameterConstraintClause in node.ConstraintClauses)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitTypeParameterConstraintClause(typeParameterConstraintClause);
            }

            VisitList(node.Members);
        }

        public override void VisitClassOrStructConstraint(ClassOrStructConstraintSyntax node)
        {
        }

        public override void VisitCompilationUnit(CompilationUnitSyntax node)
        {
            foreach (ExternAliasDirectiveSyntax externAliasDirective in node.Externs)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitExternAliasDirective(externAliasDirective);
            }

            foreach (UsingDirectiveSyntax usingDirective in node.Usings)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitUsingDirective(usingDirective);
            }

            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            VisitList(node.Members);
        }

        public override void VisitConditionalAccessExpression(ConditionalAccessExpressionSyntax node)
        {
            Visit(node.Expression);
            Visit(node.WhenNotNull);
        }

        public override void VisitConditionalExpression(ConditionalExpressionSyntax node)
        {
            Visit(node.Condition);
            Visit(node.WhenTrue);
            Visit(node.WhenFalse);
        }

        public override void VisitConstantPattern(ConstantPatternSyntax node)
        {
            Visit(node.Expression);
        }

        public override void VisitConstructorConstraint(ConstructorConstraintSyntax node)
        {
        }

        public override void VisitConstructorDeclaration(ConstructorDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            ParameterListSyntax parameterList = node.ParameterList;
            if (parameterList != null)
            {
                foreach (ParameterSyntax parameter in parameterList.Parameters)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitParameter(parameter);
                }
            }

            if (!ShouldVisit)
            {
                return;
            }

            ConstructorInitializerSyntax initializer = node.Initializer;
            if (initializer != null)
            {
                VisitConstructorInitializer(initializer);
            }

            if (!ShouldVisit)
            {
                return;
            }

            BlockSyntax body = node.Body;
            if (body != null)
            {
                VisitBlock(body);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ArrowExpressionClauseSyntax expressionBody = node.ExpressionBody;
            if (expressionBody != null)
            {
                VisitArrowExpressionClause(expressionBody);
            }
        }

        public override void VisitConstructorInitializer(ConstructorInitializerSyntax node)
        {
            ArgumentListSyntax argumentList = node.ArgumentList;
            if (argumentList != null)
            {
                foreach (ArgumentSyntax argument in argumentList.Arguments)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitArgument(argument);
                }
            }
        }

        public override void VisitContinueStatement(ContinueStatementSyntax node)
        {
        }

        public override void VisitConversionOperatorDeclaration(ConversionOperatorDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            VisitType(node.Type);
            ParameterListSyntax parameterList = node.ParameterList;
            if (parameterList != null)
            {
                foreach (ParameterSyntax parameter in parameterList.Parameters)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitParameter(parameter);
                }
            }

            if (!ShouldVisit)
            {
                return;
            }

            BlockSyntax body = node.Body;
            if (body != null)
            {
                VisitBlock(body);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ArrowExpressionClauseSyntax expressionBody = node.ExpressionBody;
            if (expressionBody != null)
            {
                VisitArrowExpressionClause(expressionBody);
            }
        }

        public override void VisitConversionOperatorMemberCref(ConversionOperatorMemberCrefSyntax node)
        {
            VisitType(node.Type);
            if (!ShouldVisit)
            {
                return;
            }

            CrefParameterListSyntax parameters = node.Parameters;
            if (parameters != null)
            {
                VisitCrefParameterList(parameters);
            }
        }

        public override void VisitCrefBracketedParameterList(CrefBracketedParameterListSyntax node)
        {
            foreach (CrefParameterSyntax crefParameter in node.Parameters)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitCrefParameter(crefParameter);
            }
        }

        public override void VisitCrefParameter(CrefParameterSyntax node)
        {
            VisitType(node.Type);
        }

        public override void VisitCrefParameterList(CrefParameterListSyntax node)
        {
            foreach (CrefParameterSyntax crefParameter in node.Parameters)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitCrefParameter(crefParameter);
            }
        }

        public override void VisitDeclarationExpression(DeclarationExpressionSyntax node)
        {
            VisitType(node.Type);
            Visit(node.Designation);
        }

        public override void VisitDeclarationPattern(DeclarationPatternSyntax node)
        {
            VisitType(node.Type);
            Visit(node.Designation);
        }

        public override void VisitDefaultExpression(DefaultExpressionSyntax node)
        {
            VisitType(node.Type);
        }

        public override void VisitDefaultSwitchLabel(DefaultSwitchLabelSyntax node)
        {
        }

        public override void VisitDefineDirectiveTrivia(DefineDirectiveTriviaSyntax node)
        {
        }

        public override void VisitDelegateDeclaration(DelegateDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            VisitType(node.ReturnType);
            TypeParameterListSyntax typeParameterList = node.TypeParameterList;
            if (typeParameterList != null)
            {
                foreach (TypeParameterSyntax typeParameter in typeParameterList.Parameters)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitTypeParameter(typeParameter);
                }
            }

            ParameterListSyntax parameterList = node.ParameterList;
            if (parameterList != null)
            {
                foreach (ParameterSyntax parameter in parameterList.Parameters)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitParameter(parameter);
                }
            }

            foreach (TypeParameterConstraintClauseSyntax typeParameterConstraintClause in node.ConstraintClauses)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitTypeParameterConstraintClause(typeParameterConstraintClause);
            }
        }

        public override void VisitDestructorDeclaration(DestructorDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            ParameterListSyntax parameterList = node.ParameterList;
            if (parameterList != null)
            {
                foreach (ParameterSyntax parameter in parameterList.Parameters)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitParameter(parameter);
                }
            }

            if (!ShouldVisit)
            {
                return;
            }

            BlockSyntax body = node.Body;
            if (body != null)
            {
                VisitBlock(body);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ArrowExpressionClauseSyntax expressionBody = node.ExpressionBody;
            if (expressionBody != null)
            {
                VisitArrowExpressionClause(expressionBody);
            }
        }

        public override void VisitDiscardDesignation(DiscardDesignationSyntax node)
        {
        }

        public override void VisitDocumentationCommentTrivia(DocumentationCommentTriviaSyntax node)
        {
            VisitList(node.Content);
        }

        public override void VisitDoStatement(DoStatementSyntax node)
        {
            Visit(node.Statement);
            Visit(node.Condition);
        }

        public override void VisitElementAccessExpression(ElementAccessExpressionSyntax node)
        {
            Visit(node.Expression);
            BracketedArgumentListSyntax argumentList = node.ArgumentList;
            if (argumentList != null)
            {
                foreach (ArgumentSyntax argument in argumentList.Arguments)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitArgument(argument);
                }
            }
        }

        public override void VisitElementBindingExpression(ElementBindingExpressionSyntax node)
        {
            BracketedArgumentListSyntax argumentList = node.ArgumentList;
            if (argumentList != null)
            {
                foreach (ArgumentSyntax argument in argumentList.Arguments)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitArgument(argument);
                }
            }
        }

        public override void VisitElifDirectiveTrivia(ElifDirectiveTriviaSyntax node)
        {
            Visit(node.Condition);
        }

        public override void VisitElseClause(ElseClauseSyntax node)
        {
            Visit(node.Statement);
        }

        public override void VisitElseDirectiveTrivia(ElseDirectiveTriviaSyntax node)
        {
        }

        public override void VisitEmptyStatement(EmptyStatementSyntax node)
        {
        }

        public override void VisitEndIfDirectiveTrivia(EndIfDirectiveTriviaSyntax node)
        {
        }

        public override void VisitEndRegionDirectiveTrivia(EndRegionDirectiveTriviaSyntax node)
        {
        }

        public override void VisitEnumDeclaration(EnumDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            if (!ShouldVisit)
            {
                return;
            }

            BaseListSyntax baseList = node.BaseList;
            if (baseList != null)
            {
                VisitBaseList(baseList);
            }

            foreach (EnumMemberDeclarationSyntax enumMemberDeclaration in node.Members)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitEnumMemberDeclaration(enumMemberDeclaration);
            }
        }

        public override void VisitEnumMemberDeclaration(EnumMemberDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            if (!ShouldVisit)
            {
                return;
            }

            EqualsValueClauseSyntax equalsValue = node.EqualsValue;
            if (equalsValue != null)
            {
                VisitEqualsValueClause(equalsValue);
            }
        }

        public override void VisitEqualsValueClause(EqualsValueClauseSyntax node)
        {
            Visit(node.Value);
        }

        public override void VisitErrorDirectiveTrivia(ErrorDirectiveTriviaSyntax node)
        {
        }

        public override void VisitEventDeclaration(EventDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            VisitType(node.Type);
            if (!ShouldVisit)
            {
                return;
            }

            ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier = node.ExplicitInterfaceSpecifier;
            if (explicitInterfaceSpecifier != null)
            {
                VisitExplicitInterfaceSpecifier(explicitInterfaceSpecifier);
            }

            AccessorListSyntax accessorList = node.AccessorList;
            if (accessorList != null)
            {
                foreach (AccessorDeclarationSyntax accessorDeclaration in accessorList.Accessors)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitAccessorDeclaration(accessorDeclaration);
                }
            }
        }

        public override void VisitEventFieldDeclaration(EventFieldDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            if (!ShouldVisit)
            {
                return;
            }

            VariableDeclarationSyntax declaration = node.Declaration;
            if (declaration != null)
            {
                VisitVariableDeclaration(declaration);
            }
        }

        public override void VisitExplicitInterfaceSpecifier(ExplicitInterfaceSpecifierSyntax node)
        {
            VisitType(node.Name);
        }

        public override void VisitExpressionStatement(ExpressionStatementSyntax node)
        {
            Visit(node.Expression);
        }

        public override void VisitExternAliasDirective(ExternAliasDirectiveSyntax node)
        {
        }

        public override void VisitFieldDeclaration(FieldDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            if (!ShouldVisit)
            {
                return;
            }

            VariableDeclarationSyntax declaration = node.Declaration;
            if (declaration != null)
            {
                VisitVariableDeclaration(declaration);
            }
        }

        public override void VisitFinallyClause(FinallyClauseSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            BlockSyntax block = node.Block;
            if (block != null)
            {
                VisitBlock(block);
            }
        }

        public override void VisitFixedStatement(FixedStatementSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            VariableDeclarationSyntax declaration = node.Declaration;
            if (declaration != null)
            {
                VisitVariableDeclaration(declaration);
            }

            Visit(node.Statement);
        }

        public override void VisitForEachStatement(ForEachStatementSyntax node)
        {
            VisitType(node.Type);
            Visit(node.Expression);
            Visit(node.Statement);
        }

        public override void VisitForEachVariableStatement(ForEachVariableStatementSyntax node)
        {
            Visit(node.Variable);
            Visit(node.Expression);
            Visit(node.Statement);
        }

        public override void VisitForStatement(ForStatementSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            VariableDeclarationSyntax declaration = node.Declaration;
            if (declaration != null)
            {
                VisitVariableDeclaration(declaration);
            }

            VisitSeparatedList(node.Initializers);
            Visit(node.Condition);
            VisitSeparatedList(node.Incrementors);
            Visit(node.Statement);
        }

        public override void VisitFromClause(FromClauseSyntax node)
        {
            VisitType(node.Type);
            Visit(node.Expression);
        }

        public override void VisitGenericName(GenericNameSyntax node)
        {
            TypeArgumentListSyntax typeArgumentList = node.TypeArgumentList;
            if (typeArgumentList != null)
            {
                VisitSeparatedList(typeArgumentList.Arguments);
            }
        }

        public override void VisitGlobalStatement(GlobalStatementSyntax node)
        {
            Visit(node.Statement);
        }

        public override void VisitGotoStatement(GotoStatementSyntax node)
        {
            Visit(node.Expression);
        }

        public override void VisitGroupClause(GroupClauseSyntax node)
        {
            Visit(node.GroupExpression);
            Visit(node.ByExpression);
        }

        public override void VisitCheckedExpression(CheckedExpressionSyntax node)
        {
            Visit(node.Expression);
        }

        public override void VisitCheckedStatement(CheckedStatementSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            BlockSyntax block = node.Block;
            if (block != null)
            {
                VisitBlock(block);
            }
        }

        public override void VisitIdentifierName(IdentifierNameSyntax node)
        {
        }

        public override void VisitIfDirectiveTrivia(IfDirectiveTriviaSyntax node)
        {
            Visit(node.Condition);
        }

        public override void VisitIfStatement(IfStatementSyntax node)
        {
            Visit(node.Condition);
            Visit(node.Statement);
            if (!ShouldVisit)
            {
                return;
            }

            ElseClauseSyntax @else = node.Else;
            if (@else != null)
            {
                VisitElseClause(@else);
            }
        }

        public override void VisitImplicitArrayCreationExpression(ImplicitArrayCreationExpressionSyntax node)
        {
            Visit(node.Initializer);
        }

        public override void VisitImplicitElementAccess(ImplicitElementAccessSyntax node)
        {
            BracketedArgumentListSyntax argumentList = node.ArgumentList;
            if (argumentList != null)
            {
                foreach (ArgumentSyntax argument in argumentList.Arguments)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitArgument(argument);
                }
            }
        }

        public override void VisitIncompleteMember(IncompleteMemberSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            VisitType(node.Type);
        }

        public override void VisitIndexerDeclaration(IndexerDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            VisitType(node.Type);
            if (!ShouldVisit)
            {
                return;
            }

            ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier = node.ExplicitInterfaceSpecifier;
            if (explicitInterfaceSpecifier != null)
            {
                VisitExplicitInterfaceSpecifier(explicitInterfaceSpecifier);
            }

            BracketedParameterListSyntax parameterList = node.ParameterList;
            if (parameterList != null)
            {
                foreach (ParameterSyntax parameter in parameterList.Parameters)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitParameter(parameter);
                }
            }

            AccessorListSyntax accessorList = node.AccessorList;
            if (accessorList != null)
            {
                foreach (AccessorDeclarationSyntax accessorDeclaration in accessorList.Accessors)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitAccessorDeclaration(accessorDeclaration);
                }
            }

            if (!ShouldVisit)
            {
                return;
            }

            ArrowExpressionClauseSyntax expressionBody = node.ExpressionBody;
            if (expressionBody != null)
            {
                VisitArrowExpressionClause(expressionBody);
            }
        }

        public override void VisitIndexerMemberCref(IndexerMemberCrefSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            CrefBracketedParameterListSyntax parameters = node.Parameters;
            if (parameters != null)
            {
                VisitCrefBracketedParameterList(parameters);
            }
        }

        public override void VisitInitializerExpression(InitializerExpressionSyntax node)
        {
            VisitSeparatedList(node.Expressions);
        }

        public override void VisitInterfaceDeclaration(InterfaceDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            TypeParameterListSyntax typeParameterList = node.TypeParameterList;
            if (typeParameterList != null)
            {
                foreach (TypeParameterSyntax typeParameter in typeParameterList.Parameters)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitTypeParameter(typeParameter);
                }
            }

            if (!ShouldVisit)
            {
                return;
            }

            BaseListSyntax baseList = node.BaseList;
            if (baseList != null)
            {
                VisitBaseList(baseList);
            }

            foreach (TypeParameterConstraintClauseSyntax typeParameterConstraintClause in node.ConstraintClauses)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitTypeParameterConstraintClause(typeParameterConstraintClause);
            }

            VisitList(node.Members);
        }

        public override void VisitInterpolatedStringExpression(InterpolatedStringExpressionSyntax node)
        {
            VisitList(node.Contents);
        }

        public override void VisitInterpolatedStringText(InterpolatedStringTextSyntax node)
        {
        }

        public override void VisitInterpolation(InterpolationSyntax node)
        {
            Visit(node.Expression);
            if (!ShouldVisit)
            {
                return;
            }

            InterpolationAlignmentClauseSyntax alignmentClause = node.AlignmentClause;
            if (alignmentClause != null)
            {
                VisitInterpolationAlignmentClause(alignmentClause);
            }

            if (!ShouldVisit)
            {
                return;
            }

            InterpolationFormatClauseSyntax formatClause = node.FormatClause;
            if (formatClause != null)
            {
                VisitInterpolationFormatClause(formatClause);
            }
        }

        public override void VisitInterpolationAlignmentClause(InterpolationAlignmentClauseSyntax node)
        {
            Visit(node.Value);
        }

        public override void VisitInterpolationFormatClause(InterpolationFormatClauseSyntax node)
        {
        }

        public override void VisitInvocationExpression(InvocationExpressionSyntax node)
        {
            Visit(node.Expression);
            ArgumentListSyntax argumentList = node.ArgumentList;
            if (argumentList != null)
            {
                foreach (ArgumentSyntax argument in argumentList.Arguments)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitArgument(argument);
                }
            }
        }

        public override void VisitIsPatternExpression(IsPatternExpressionSyntax node)
        {
            Visit(node.Expression);
            Visit(node.Pattern);
        }

        public override void VisitJoinClause(JoinClauseSyntax node)
        {
            VisitType(node.Type);
            Visit(node.InExpression);
            Visit(node.LeftExpression);
            Visit(node.RightExpression);
            if (!ShouldVisit)
            {
                return;
            }

            JoinIntoClauseSyntax into = node.Into;
            if (into != null)
            {
                VisitJoinIntoClause(into);
            }
        }

        public override void VisitJoinIntoClause(JoinIntoClauseSyntax node)
        {
        }

        public override void VisitLabeledStatement(LabeledStatementSyntax node)
        {
            Visit(node.Statement);
        }

        public override void VisitLetClause(LetClauseSyntax node)
        {
            Visit(node.Expression);
        }

        public override void VisitLineDirectiveTrivia(LineDirectiveTriviaSyntax node)
        {
        }

        public override void VisitLiteralExpression(LiteralExpressionSyntax node)
        {
        }

        public override void VisitLoadDirectiveTrivia(LoadDirectiveTriviaSyntax node)
        {
        }

        public override void VisitLocalDeclarationStatement(LocalDeclarationStatementSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            VariableDeclarationSyntax declaration = node.Declaration;
            if (declaration != null)
            {
                VisitVariableDeclaration(declaration);
            }
        }

        public override void VisitLocalFunctionStatement(LocalFunctionStatementSyntax node)
        {
            VisitType(node.ReturnType);
            TypeParameterListSyntax typeParameterList = node.TypeParameterList;
            if (typeParameterList != null)
            {
                foreach (TypeParameterSyntax typeParameter in typeParameterList.Parameters)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitTypeParameter(typeParameter);
                }
            }

            ParameterListSyntax parameterList = node.ParameterList;
            if (parameterList != null)
            {
                foreach (ParameterSyntax parameter in parameterList.Parameters)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitParameter(parameter);
                }
            }

            foreach (TypeParameterConstraintClauseSyntax typeParameterConstraintClause in node.ConstraintClauses)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitTypeParameterConstraintClause(typeParameterConstraintClause);
            }

            if (!ShouldVisit)
            {
                return;
            }

            BlockSyntax body = node.Body;
            if (body != null)
            {
                VisitBlock(body);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ArrowExpressionClauseSyntax expressionBody = node.ExpressionBody;
            if (expressionBody != null)
            {
                VisitArrowExpressionClause(expressionBody);
            }
        }

        public override void VisitLockStatement(LockStatementSyntax node)
        {
            Visit(node.Expression);
            Visit(node.Statement);
        }

        public override void VisitMakeRefExpression(MakeRefExpressionSyntax node)
        {
            Visit(node.Expression);
        }

        public override void VisitMemberAccessExpression(MemberAccessExpressionSyntax node)
        {
            Visit(node.Expression);
            VisitType(node.Name);
        }

        public override void VisitMemberBindingExpression(MemberBindingExpressionSyntax node)
        {
            VisitType(node.Name);
        }

        public override void VisitMethodDeclaration(MethodDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            VisitType(node.ReturnType);
            if (!ShouldVisit)
            {
                return;
            }

            ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier = node.ExplicitInterfaceSpecifier;
            if (explicitInterfaceSpecifier != null)
            {
                VisitExplicitInterfaceSpecifier(explicitInterfaceSpecifier);
            }

            TypeParameterListSyntax typeParameterList = node.TypeParameterList;
            if (typeParameterList != null)
            {
                foreach (TypeParameterSyntax typeParameter in typeParameterList.Parameters)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitTypeParameter(typeParameter);
                }
            }

            ParameterListSyntax parameterList = node.ParameterList;
            if (parameterList != null)
            {
                foreach (ParameterSyntax parameter in parameterList.Parameters)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitParameter(parameter);
                }
            }

            foreach (TypeParameterConstraintClauseSyntax typeParameterConstraintClause in node.ConstraintClauses)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitTypeParameterConstraintClause(typeParameterConstraintClause);
            }

            if (!ShouldVisit)
            {
                return;
            }

            BlockSyntax body = node.Body;
            if (body != null)
            {
                VisitBlock(body);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ArrowExpressionClauseSyntax expressionBody = node.ExpressionBody;
            if (expressionBody != null)
            {
                VisitArrowExpressionClause(expressionBody);
            }
        }

        public override void VisitNameColon(NameColonSyntax node)
        {
            VisitType(node.Name);
        }

        public override void VisitNameEquals(NameEqualsSyntax node)
        {
            VisitType(node.Name);
        }

        public override void VisitNameMemberCref(NameMemberCrefSyntax node)
        {
            VisitType(node.Name);
            if (!ShouldVisit)
            {
                return;
            }

            CrefParameterListSyntax parameters = node.Parameters;
            if (parameters != null)
            {
                VisitCrefParameterList(parameters);
            }
        }

        public override void VisitNamespaceDeclaration(NamespaceDeclarationSyntax node)
        {
            VisitType(node.Name);
            foreach (ExternAliasDirectiveSyntax externAliasDirective in node.Externs)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitExternAliasDirective(externAliasDirective);
            }

            foreach (UsingDirectiveSyntax usingDirective in node.Usings)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitUsingDirective(usingDirective);
            }

            VisitList(node.Members);
        }

        public override void VisitNullableType(NullableTypeSyntax node)
        {
            VisitType(node.ElementType);
        }

        public override void VisitObjectCreationExpression(ObjectCreationExpressionSyntax node)
        {
            VisitType(node.Type);
            ArgumentListSyntax argumentList = node.ArgumentList;
            if (argumentList != null)
            {
                foreach (ArgumentSyntax argument in argumentList.Arguments)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitArgument(argument);
                }
            }

            Visit(node.Initializer);
        }

        public override void VisitOmittedArraySizeExpression(OmittedArraySizeExpressionSyntax node)
        {
        }

        public override void VisitOmittedTypeArgument(OmittedTypeArgumentSyntax node)
        {
        }

        public override void VisitOperatorDeclaration(OperatorDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            VisitType(node.ReturnType);
            ParameterListSyntax parameterList = node.ParameterList;
            if (parameterList != null)
            {
                foreach (ParameterSyntax parameter in parameterList.Parameters)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitParameter(parameter);
                }
            }

            if (!ShouldVisit)
            {
                return;
            }

            BlockSyntax body = node.Body;
            if (body != null)
            {
                VisitBlock(body);
            }

            if (!ShouldVisit)
            {
                return;
            }

            ArrowExpressionClauseSyntax expressionBody = node.ExpressionBody;
            if (expressionBody != null)
            {
                VisitArrowExpressionClause(expressionBody);
            }
        }

        public override void VisitOperatorMemberCref(OperatorMemberCrefSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            CrefParameterListSyntax parameters = node.Parameters;
            if (parameters != null)
            {
                VisitCrefParameterList(parameters);
            }
        }

        public override void VisitOrderByClause(OrderByClauseSyntax node)
        {
            foreach (OrderingSyntax ordering in node.Orderings)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitOrdering(ordering);
            }
        }

        public override void VisitOrdering(OrderingSyntax node)
        {
            Visit(node.Expression);
        }

        public override void VisitParameter(ParameterSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            VisitType(node.Type);
            if (!ShouldVisit)
            {
                return;
            }

            EqualsValueClauseSyntax @default = node.Default;
            if (@default != null)
            {
                VisitEqualsValueClause(@default);
            }
        }

        public override void VisitParameterList(ParameterListSyntax node)
        {
            foreach (ParameterSyntax parameter in node.Parameters)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitParameter(parameter);
            }
        }

        public override void VisitParenthesizedExpression(ParenthesizedExpressionSyntax node)
        {
            Visit(node.Expression);
        }

        public override void VisitParenthesizedLambdaExpression(ParenthesizedLambdaExpressionSyntax node)
        {
            ParameterListSyntax parameterList = node.ParameterList;
            if (parameterList != null)
            {
                foreach (ParameterSyntax parameter in parameterList.Parameters)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitParameter(parameter);
                }
            }

            Visit(node.Body);
        }

        public override void VisitParenthesizedVariableDesignation(ParenthesizedVariableDesignationSyntax node)
        {
            VisitSeparatedList(node.Variables);
        }

        public override void VisitPointerType(PointerTypeSyntax node)
        {
            VisitType(node.ElementType);
        }

        public override void VisitPostfixUnaryExpression(PostfixUnaryExpressionSyntax node)
        {
            Visit(node.Operand);
        }

        public override void VisitPragmaChecksumDirectiveTrivia(PragmaChecksumDirectiveTriviaSyntax node)
        {
        }

        public override void VisitPragmaWarningDirectiveTrivia(PragmaWarningDirectiveTriviaSyntax node)
        {
            VisitSeparatedList(node.ErrorCodes);
        }

        public override void VisitPredefinedType(PredefinedTypeSyntax node)
        {
        }

        public override void VisitPrefixUnaryExpression(PrefixUnaryExpressionSyntax node)
        {
            Visit(node.Operand);
        }

        public override void VisitPropertyDeclaration(PropertyDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            VisitType(node.Type);
            if (!ShouldVisit)
            {
                return;
            }

            ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier = node.ExplicitInterfaceSpecifier;
            if (explicitInterfaceSpecifier != null)
            {
                VisitExplicitInterfaceSpecifier(explicitInterfaceSpecifier);
            }

            AccessorListSyntax accessorList = node.AccessorList;
            if (accessorList != null)
            {
                foreach (AccessorDeclarationSyntax accessorDeclaration in accessorList.Accessors)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitAccessorDeclaration(accessorDeclaration);
                }
            }

            if (!ShouldVisit)
            {
                return;
            }

            ArrowExpressionClauseSyntax expressionBody = node.ExpressionBody;
            if (expressionBody != null)
            {
                VisitArrowExpressionClause(expressionBody);
            }

            if (!ShouldVisit)
            {
                return;
            }

            EqualsValueClauseSyntax initializer = node.Initializer;
            if (initializer != null)
            {
                VisitEqualsValueClause(initializer);
            }
        }

        public override void VisitQualifiedCref(QualifiedCrefSyntax node)
        {
            VisitType(node.Container);
            Visit(node.Member);
        }

        public override void VisitQualifiedName(QualifiedNameSyntax node)
        {
            VisitType(node.Left);
            VisitType(node.Right);
        }

        public override void VisitQueryBody(QueryBodySyntax node)
        {
            VisitList(node.Clauses);
            Visit(node.SelectOrGroup);
            if (!ShouldVisit)
            {
                return;
            }

            QueryContinuationSyntax continuation = node.Continuation;
            if (continuation != null)
            {
                VisitQueryContinuation(continuation);
            }
        }

        public override void VisitQueryContinuation(QueryContinuationSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            QueryBodySyntax body = node.Body;
            if (body != null)
            {
                VisitQueryBody(body);
            }
        }

        public override void VisitQueryExpression(QueryExpressionSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            FromClauseSyntax fromClause = node.FromClause;
            if (fromClause != null)
            {
                VisitFromClause(fromClause);
            }

            if (!ShouldVisit)
            {
                return;
            }

            QueryBodySyntax body = node.Body;
            if (body != null)
            {
                VisitQueryBody(body);
            }
        }

        public override void VisitReferenceDirectiveTrivia(ReferenceDirectiveTriviaSyntax node)
        {
        }

        public override void VisitRefExpression(RefExpressionSyntax node)
        {
            Visit(node.Expression);
        }

        public override void VisitRefType(RefTypeSyntax node)
        {
            VisitType(node.Type);
        }

        public override void VisitRefTypeExpression(RefTypeExpressionSyntax node)
        {
            Visit(node.Expression);
        }

        public override void VisitRefValueExpression(RefValueExpressionSyntax node)
        {
            Visit(node.Expression);
            VisitType(node.Type);
        }

        public override void VisitRegionDirectiveTrivia(RegionDirectiveTriviaSyntax node)
        {
        }

        public override void VisitReturnStatement(ReturnStatementSyntax node)
        {
            Visit(node.Expression);
        }

        public override void VisitSelectClause(SelectClauseSyntax node)
        {
            Visit(node.Expression);
        }

        public override void VisitShebangDirectiveTrivia(ShebangDirectiveTriviaSyntax node)
        {
        }

        public override void VisitSimpleBaseType(SimpleBaseTypeSyntax node)
        {
            VisitType(node.Type);
        }

        public override void VisitSimpleLambdaExpression(SimpleLambdaExpressionSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            ParameterSyntax parameter = node.Parameter;
            if (parameter != null)
            {
                VisitParameter(parameter);
            }

            Visit(node.Body);
        }

        public override void VisitSingleVariableDesignation(SingleVariableDesignationSyntax node)
        {
        }

        public override void VisitSizeOfExpression(SizeOfExpressionSyntax node)
        {
            VisitType(node.Type);
        }

        public override void VisitSkippedTokensTrivia(SkippedTokensTriviaSyntax node)
        {
        }

        public override void VisitStackAllocArrayCreationExpression(StackAllocArrayCreationExpressionSyntax node)
        {
            VisitType(node.Type);
        }

        public override void VisitStructDeclaration(StructDeclarationSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }

            TypeParameterListSyntax typeParameterList = node.TypeParameterList;
            if (typeParameterList != null)
            {
                foreach (TypeParameterSyntax typeParameter in typeParameterList.Parameters)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitTypeParameter(typeParameter);
                }
            }

            if (!ShouldVisit)
            {
                return;
            }

            BaseListSyntax baseList = node.BaseList;
            if (baseList != null)
            {
                VisitBaseList(baseList);
            }

            foreach (TypeParameterConstraintClauseSyntax typeParameterConstraintClause in node.ConstraintClauses)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitTypeParameterConstraintClause(typeParameterConstraintClause);
            }

            VisitList(node.Members);
        }

        public override void VisitSwitchSection(SwitchSectionSyntax node)
        {
            VisitList(node.Labels);
            VisitList(node.Statements);
        }

        public override void VisitSwitchStatement(SwitchStatementSyntax node)
        {
            Visit(node.Expression);
            foreach (SwitchSectionSyntax switchSection in node.Sections)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitSwitchSection(switchSection);
            }
        }

        public override void VisitThisExpression(ThisExpressionSyntax node)
        {
        }

        public override void VisitThrowExpression(ThrowExpressionSyntax node)
        {
            Visit(node.Expression);
        }

        public override void VisitThrowStatement(ThrowStatementSyntax node)
        {
            Visit(node.Expression);
        }

        public override void VisitTryStatement(TryStatementSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            BlockSyntax block = node.Block;
            if (block != null)
            {
                VisitBlock(block);
            }

            foreach (CatchClauseSyntax catchClause in node.Catches)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitCatchClause(catchClause);
            }

            if (!ShouldVisit)
            {
                return;
            }

            FinallyClauseSyntax @finally = node.Finally;
            if (@finally != null)
            {
                VisitFinallyClause(@finally);
            }
        }

        public override void VisitTupleElement(TupleElementSyntax node)
        {
            VisitType(node.Type);
        }

        public override void VisitTupleExpression(TupleExpressionSyntax node)
        {
            foreach (ArgumentSyntax argument in node.Arguments)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitArgument(argument);
            }
        }

        public override void VisitTupleType(TupleTypeSyntax node)
        {
            foreach (TupleElementSyntax tupleElement in node.Elements)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitTupleElement(tupleElement);
            }
        }

        public override void VisitTypeArgumentList(TypeArgumentListSyntax node)
        {
            foreach (TypeSyntax type in node.Arguments)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitType(type);
            }
        }

        public override void VisitTypeConstraint(TypeConstraintSyntax node)
        {
            VisitType(node.Type);
        }

        public override void VisitTypeCref(TypeCrefSyntax node)
        {
            VisitType(node.Type);
        }

        public override void VisitTypeOfExpression(TypeOfExpressionSyntax node)
        {
            VisitType(node.Type);
        }

        public override void VisitTypeParameter(TypeParameterSyntax node)
        {
            foreach (AttributeListSyntax attributeList in node.AttributeLists)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitAttributeList(attributeList);
            }
        }

        public override void VisitTypeParameterConstraintClause(TypeParameterConstraintClauseSyntax node)
        {
            VisitType(node.Name);
            VisitSeparatedList(node.Constraints);
        }

        public override void VisitTypeParameterList(TypeParameterListSyntax node)
        {
            foreach (TypeParameterSyntax typeParameter in node.Parameters)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitTypeParameter(typeParameter);
            }
        }

        public override void VisitUndefDirectiveTrivia(UndefDirectiveTriviaSyntax node)
        {
        }

        public override void VisitUnsafeStatement(UnsafeStatementSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            BlockSyntax block = node.Block;
            if (block != null)
            {
                VisitBlock(block);
            }
        }

        public override void VisitUsingDirective(UsingDirectiveSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            NameEqualsSyntax alias = node.Alias;
            if (alias != null)
            {
                VisitNameEquals(alias);
            }

            VisitType(node.Name);
        }

        public override void VisitUsingStatement(UsingStatementSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            VariableDeclarationSyntax declaration = node.Declaration;
            if (declaration != null)
            {
                VisitVariableDeclaration(declaration);
            }

            Visit(node.Expression);
            Visit(node.Statement);
        }

        public override void VisitVariableDeclaration(VariableDeclarationSyntax node)
        {
            VisitType(node.Type);
            foreach (VariableDeclaratorSyntax variableDeclarator in node.Variables)
            {
                if (!ShouldVisit)
                {
                    return;
                }

                VisitVariableDeclarator(variableDeclarator);
            }
        }

        public override void VisitVariableDeclarator(VariableDeclaratorSyntax node)
        {
            BracketedArgumentListSyntax argumentList = node.ArgumentList;
            if (argumentList != null)
            {
                foreach (ArgumentSyntax argument in argumentList.Arguments)
                {
                    if (!ShouldVisit)
                    {
                        return;
                    }

                    VisitArgument(argument);
                }
            }

            if (!ShouldVisit)
            {
                return;
            }

            EqualsValueClauseSyntax initializer = node.Initializer;
            if (initializer != null)
            {
                VisitEqualsValueClause(initializer);
            }
        }

        public override void VisitWarningDirectiveTrivia(WarningDirectiveTriviaSyntax node)
        {
        }

        public override void VisitWhenClause(WhenClauseSyntax node)
        {
            Visit(node.Condition);
        }

        public override void VisitWhereClause(WhereClauseSyntax node)
        {
            Visit(node.Condition);
        }

        public override void VisitWhileStatement(WhileStatementSyntax node)
        {
            Visit(node.Condition);
            Visit(node.Statement);
        }

        public override void VisitXmlCDataSection(XmlCDataSectionSyntax node)
        {
        }

        public override void VisitXmlComment(XmlCommentSyntax node)
        {
        }

        public override void VisitXmlCrefAttribute(XmlCrefAttributeSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            XmlNameSyntax name = node.Name;
            if (name != null)
            {
                VisitXmlName(name);
            }

            Visit(node.Cref);
        }

        public override void VisitXmlElement(XmlElementSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            XmlElementStartTagSyntax startTag = node.StartTag;
            if (startTag != null)
            {
                VisitXmlElementStartTag(startTag);
            }

            VisitList(node.Content);
            if (!ShouldVisit)
            {
                return;
            }

            XmlElementEndTagSyntax endTag = node.EndTag;
            if (endTag != null)
            {
                VisitXmlElementEndTag(endTag);
            }
        }

        public override void VisitXmlElementEndTag(XmlElementEndTagSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            XmlNameSyntax name = node.Name;
            if (name != null)
            {
                VisitXmlName(name);
            }
        }

        public override void VisitXmlElementStartTag(XmlElementStartTagSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            XmlNameSyntax name = node.Name;
            if (name != null)
            {
                VisitXmlName(name);
            }

            VisitList(node.Attributes);
        }

        public override void VisitXmlEmptyElement(XmlEmptyElementSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            XmlNameSyntax name = node.Name;
            if (name != null)
            {
                VisitXmlName(name);
            }

            VisitList(node.Attributes);
        }

        public override void VisitXmlName(XmlNameSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            XmlPrefixSyntax prefix = node.Prefix;
            if (prefix != null)
            {
                VisitXmlPrefix(prefix);
            }
        }

        public override void VisitXmlNameAttribute(XmlNameAttributeSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            XmlNameSyntax name = node.Name;
            if (name != null)
            {
                VisitXmlName(name);
            }

            VisitType(node.Identifier);
        }

        public override void VisitXmlPrefix(XmlPrefixSyntax node)
        {
        }

        public override void VisitXmlProcessingInstruction(XmlProcessingInstructionSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            XmlNameSyntax name = node.Name;
            if (name != null)
            {
                VisitXmlName(name);
            }
        }

        public override void VisitXmlText(XmlTextSyntax node)
        {
        }

        public override void VisitXmlTextAttribute(XmlTextAttributeSyntax node)
        {
            if (!ShouldVisit)
            {
                return;
            }

            XmlNameSyntax name = node.Name;
            if (name != null)
            {
                VisitXmlName(name);
            }
        }

        public override void VisitYieldStatement(YieldStatementSyntax node)
        {
            Visit(node.Expression);
        }
    }
}