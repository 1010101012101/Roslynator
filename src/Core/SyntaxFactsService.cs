// Copyright (c) Josef Pihrt. All rights reserved. Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System;
using System.Collections.Immutable;
using Microsoft.CodeAnalysis;

namespace Roslynator
{
    public abstract class SyntaxFactsService
    {
        public static bool IsSupportedLanguage(string language)
        {
            switch (language)
            {
                case LanguageNames.CSharp:
                case LanguageNames.VisualBasic:
                    return true;
                default:
                    return false;
            }
        }

        public abstract string SingleLineCommentStart { get; }

        public abstract bool IsComment(SyntaxTrivia trivia);

        public abstract bool IsSingleLineComment(SyntaxTrivia trivia);

        public abstract bool IsEndOfLineTrivia(SyntaxTrivia trivia);

        public abstract bool IsWhitespaceTrivia(SyntaxTrivia trivia);

        public abstract SyntaxTriviaList ParseLeadingTrivia(string text, int offset = 0);

        public abstract SyntaxTriviaList ParseTrailingTrivia(string text, int offset = 0);

        public abstract bool AreEquivalent(SyntaxTree oldTree, SyntaxTree newTree);

        public bool IsWhitespaceOrEndOfLineTrivia(in SyntaxTrivia trivia)
        {
            return IsWhitespaceTrivia(trivia) || IsEndOfLineTrivia(trivia);
        }

        public abstract bool BeginsWithAutoGeneratedComment(SyntaxNode root);

        internal bool BeginsWithBanner(
            SyntaxNode root,
            ImmutableArray<string> lines)
        {
            if (lines.Length == 0)
                return false;

            SyntaxTriviaList leading = root.GetLeadingTrivia();

            if (lines.Length > leading.Count)
                return false;

            int i = 0;
            int j = 0;

            while (i < leading.Count
                && IsWhitespaceOrEndOfLineTrivia(leading[i]))
            {
                i++;
            }

            while (i < leading.Count)
            {
                SyntaxTrivia trivia = leading[i];

                if (!IsSingleLineComment(trivia))
                    return false;

                string comment = trivia.ToString();

                if (string.CompareOrdinal(
                    lines[j],
                    0,
                    comment,
                    SingleLineCommentStart.Length,
                    comment.Length - SingleLineCommentStart.Length) != 0)
                {
                    return false;
                }

                if (j == lines.Length - 1)
                    return true;

                if (i == leading.Count - 1)
                    return false;

                i++;

                if (!IsEndOfLineTrivia(leading[i]))
                    return false;

                i++;
                j++;
            }

            return false;
        }
    }
}
